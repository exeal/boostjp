<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>前口上
  <footnote>
    <para>
      訳注　<link xlink:href="http://snltranscripts.jt.org/75/75ishimmer.phtml">http://snltranscripts.jt.org/75/75ishimmer.phtml</link> とか。検索すると動画も出てきます。
    </para>
  </footnote></title>
  <blockquote xml:lang="en">
    <attribution>Saturday Night Live</attribution>
    <literallayout><lineannotation>Wife:</lineannotation> New Shimmer is a floor wax!
<lineannotation>Husband:</lineannotation> No, new Shimmer is a dessert topping!
<lineannotation>Wife:</lineannotation> It's a floor wax!
<lineannotation>Husband:</lineannotation> It's a dessert topping!
<lineannotation>Wife:</lineannotation> It's a floor wax, I'm telling you!
<lineannotation>Husband:</lineannotation> It's a dessert topping, you cow!
<lineannotation>Announcer:</lineannotation> Hey, hey, hey, calm down, you two. New Shimmer is both a floor wax and a dessert topping!</literallayout>
  </blockquote>

  <section>
    <title>説明</title>
    <para>
      xpressive は正規表現の高度な C++ オブジェクト指向テンプレートライブラリである。正規表現（正規式）を文字列で渡して実行時に解析することもできれば、式テンプレートを使ってコンパイル時に解析することもできる。正規表現はお互いを参照しあうことも、自身を再帰的に参照することもでき、これらから複雑な文法を任意に構築できる。
    </para>
  </section>

  <section>
    <title>動機</title>
    <para>
      C++ でテキスト処理をする場合、2 つの別々な選択肢がある。正規表現エンジンとパーサジェネレータである。正規表現エンジン（<link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> 等）は強力で柔軟性がある。パターンは文字列で表現し、実行時に指定する。しかしながら構文エラーもまた、実行時まで検出されない。また正規表現は、入れ子かつ数の合った HTML タグに対するマッチのような、より高度なテキスト処理問題には適していない。従来、こういった処理はパーサジェネレータ（<link xlink:href="http://spirit.sourceforge.net/">Spirit パーサジェネレータ</link>等）により取り扱われてきた。こうした怪物級の連中はより強力だが柔軟性がなく、通常はその場での文法規則の任意修正を許していない。さらに言えば、正規表現の網羅的なバックトラックのセマンティクス（意味）も有していないため、パターンの種類によっては大変な労力が必要になる場合がある。
    </para>
    <para>
      xpressive はこれら2つのアプローチを相互にシームレスに接続し、C++ テキスト処理の世界において固有の地位を築く。xpressive を使えば、<link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> を使うのと同様に正規表現を文字列で表現できる。あるいは <link xlink:href="http://spirit.sourceforge.net/">Spirit</link> を使うのと同様に正規表現を C++ の式として記述でき、テキスト処理専用の組み込み言語による恩恵を受けることができる。さらに、この 2 つを混ぜて両方の利点を引き出すこともできる。つまり正規表現<emphasis>文法</emphasis>を、あるときは静的に束縛（ハードコードし、コンパイラによる構文チェックが可能）、またあるときは動的に束縛し実行時に記述できる。これら 2 種類の正規表現はお互いに再帰的に参照可能で、普通の正規表現では不可能なマッチが可能である。
    </para>
  </section>

  <section>
    <title>影響を受けたか関係のあるライブラリ</title>
    <para>
      xpressive のインターフェイスの設計については、John Maddock の <link xlink:href="http://www.boost.org/libs/regex">Boost.Regex</link> と、正規表現が標準ライブラリに追加されることになった彼の<link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm">草案</link>に多大な影響を受けた。また、静的 xpressive のモデルとなった Joel de Guzman の <link xlink:href="http://spirit.sourceforge.net/">Spirit</link> パーサフレームワークにも大きなインスピレーションを受けた。他にインスピレーションを受けたものとして、<link xlink:href="http://www.perl.com/pub/a/2002/06/04/apo5.html">Perl 6</link> の設計と <link xlink:href="http://research.microsoft.com/projects/greta">GRETA</link> がある（正規表現の慣習を変える Perl 6 の変更について、概要がここにある）。
    </para>
  </section>
</section>
