<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>付録 4：パフォーマンスの比較</title>
  <para>
    xpressive の効率は <link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> に負けず劣らずである。パフォーマンスベンチマークを走らせ、静的正規表現、動的正規表現、Boost.Regex を 2 つのプラットフォーム（gcc（Cygwin）、Visual C++）で比較した。テストは短いマッチと長い検索を行った。いずれのプラットフォームでも、短いマッチでは xpressive が高速であり、長い検索では大体 <link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> と同じだった。
    <footnote>
      <para>
	おことわり：すべてのベンチマークについて、真のテストとは<emphasis>あなたの</emphasis>パターンと<emphasis>あなたの</emphasis>入力に対して<emphasis>あなたの</emphasis>プラットフォームで xpressive がどう動くかである。よってあなたのアプリケーションで効率が重要なのであれば、あなた自身でテストをするのが最もよい。
      </para>
    </footnote>
  </para>

  <section xml:id="perf_gcc">
    <title>xpressive 対 Boost.Regex（GCC（Cygwin））</title>
    <itemizedlist>
      <listitem>
	<para>静的正規表現</para>
      </listitem>
      <listitem>
	<para>動的正規表現</para>
      </listitem>
      <listitem>
	<para><link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link></para>
      </listitem>
    </itemizedlist>
    <para>
      以上のパフォーマンス比較結果を次に示す。
    </para>

    <variablelist>
      <title>テスト仕様</title>
      <varlistentry>
	<term>ハードウェア：</term>
	<listitem>
	  <para>ハイパースレッディング 3GHz Xeon 1GB RAM</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>オペレーティングシステム：</term>
	<listitem>
	  <para>Windows XP Professional + Cygwin</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>コンパイラ：</term>
	<listitem>
	  <para>GNU C++ 3.4.4（Cygwin 版）</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>C++ 標準ライブラリ：</term>
	<listitem>
	  <para>GNU libstdc++ 3.4.4</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> のバージョン：</term>
	<listitem>
	  <para>1.33+ 、BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>xpressive のバージョン：</term>
	<listitem>
	  <para>0.9.6a</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>比較 1：短いマッチ</title>
      <para>
	以下のテストでは入力文字列に対する正規表現マッチに要した時間を評価項目とする。各テスト結果の上側の数値は最速時間に対して正規化しており、1.0 が最もよい。下側の（括弧で囲んだ）数値は実際の秒時間である。最良の結果は緑色にしてある。
      </para>
      <!-- <xi:include href="../perf/gcc/short_matches.xml"/> -->
      <table>
	<caption>短いマッチ</caption>
	<thead>
	  <tr>
	    <th>静的 xpressive</th>
	    <th>動的 xpressive</th>
	    <th>Boost</th>
	    <th>テキスト</th>
	    <th>正規表現</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="highlight">1 (8.79e-07s)</phrase></td>
	    <td><phrase role="highlight">1.08 (9.54e-07s)</phrase></td>
	    <td>2.51 (2.2e‑06s)</td>
	    <td><phrase role="regex-input">100-</phrase> といった、メッセージ文字列を含む FTP 応答行。</td>
	    <td><phrase role="regex-pattern">^([0-9]+)(\-| |$)(.*)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1.06 (1.07e-06s)</phrase></td>
	    <td><phrase role="highlight">1 (1.01e-06s)</phrase></td>
	    <td>4.01 (4.06e-06s)</td>
	    <td><phrase role="regex-input">1234-5678-1234-456</phrase></td>
	    <td><phrase role="regex-pattern">([[:digit:]]{4}[- ]){3}[[:digit:]]{3,4}</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (1.4e-06s)</phrase></td>
	    <td>1.13 (1.58e-06s)</td>
	    <td>2.89 (4.05e-06s)</td>
	    <td><phrase role="regex-input">john_maddock@compuserve.com</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (1.28e-06s)</phrase></td>
	    <td>1.16 (1.49e-06s)</td>
	    <td>3.07 (3.94e-06s)</td>
	    <td><phrase role="regex-input">foo12@foo.edu</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (1.22e-06s)</phrase></td>
	    <td>1.2 (1.46e-06s)</td>
	    <td>3.22 (3.93e-06s)</td>
	    <td><phrase role="regex-input">bob.smith@foo.tv</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1.04 (8.64e-07s)</phrase></td>
	    <td><phrase role="highlight">1 (8.34e-07s)</phrase></td>
	    <td>2.5 (2.09e-06s)</td>
	    <td><phrase role="regex-input">EH10 2QQ</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td>1.11 (9.09e-07s)</td>
	    <td><phrase role="highlight">1 (8.19e-07s)</phrase></td>
	    <td>2.47 (2.03e-06s)</td>
	    <td><phrase role="regex-input">G1 1AA</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td>1.12 (9.38e-07s)</td>
	    <td><phrase role="highlight">1 (8.34e-07s)</phrase></td>
	    <td>2.5 (2.08e-06s)</td>
	    <td><phrase role="regex-input">SW1 1ZZ</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (7.9e-07s)</phrase></td>
	    <td><phrase role="highlight">1.06 (8.34e-07s)</phrase></td>
	    <td>2.49
(1.96e-06s)</td>
	    <td><phrase role="regex-input">4/1/2001</phrase></td>
	    <td><phrase role="regex-pattern">^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (8.19e-07s)</phrase></td>
	    <td><phrase role="highlight">1.04 (8.49e-07s)</phrase></td>
	    <td>2.4 (1.97e-06s)</td>
	    <td><phrase role="regex-input">12/12/2001</phrase></td>
	    <td><phrase role="regex-pattern">^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1.09 (8.95e-07s)</phrase></td>
	    <td><phrase role="highlight">1 (8.19e-07s)</phrase></td>
	    <td>2.4 (1.96e-06s)</td>
	    <td><phrase role="regex-input">123</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	  <tr>
	    <td>1.11 (8.79e-07s)</td>
	    <td><phrase role="highlight">1 (7.9e-07s)</phrase></td>
	    <td>2.57 (2.03e-06s)</td>
	    <td><phrase role="regex-input">+3.14159</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1.09 (8.94e-07s)</phrase></td>
	    <td><phrase role="highlight">1 (8.19e-07s)</phrase></td>
	    <td>2.47 (2.03e-06s)</td>
	    <td><phrase role="regex-input">-3.14159</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	</tbody>
      </table>
    </section>

    <section>
      <title>比較 2：長い検索</title>
      <para>
	次のテストは長い英文テキストから<emphasis>すべての</emphasis>マッチを見つけるのに要した時間を測定した。<link xlink:href="http://promo.net/pg/">Project Gutenberg</link> の <link xlink:href="http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip">Mark Twain</link> の完全なテキストを使用した。テキストの長さは 19MB である。上と同様に上側の数値は正規化時間であり、下側の数値は実際の時間である。最短時間は緑色にした。
      </para>
      <!-- <xi:include href="../perf/gcc/long_twain_search.xml"/> -->
      <table>
	<caption>長い検索</caption>
	<thead>
	  <tr>
	    <th>静的 xpressive</th>
	    <th>動的 xpressive</th>
	    <th>Boost</th>
	    <th>正規表現</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="highlight">1　(0.0263s)</phrase></td>
	    <td><phrase role="highlight">1　(0.0263s)</phrase></td>
	    <td>1.78　(0.0469s)</td>
	    <td><phrase role="regex-pattern">Twain</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1　(0.0234s)</phrase></td>
	    <td><phrase role="highlight">1　(0.0234s)</phrase></td>
	    <td>1.79　(0.042s)</td>
	    <td><phrase role="regex-pattern">Huck[[:alpha:]]+</phrase></td>
	  </tr>
	  <tr>
	    <td>1.84　(1.26s)</td>
	    <td>2.21　(1.51s)</td>
	    <td><phrase role="highlight">1　(0.687s)</phrase></td>
	    <td><phrase role="regex-pattern">[[:alpha:]]+ing</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1.09　(0.192s)</phrase></td>
	    <td>2　(0.351s)</td>
	    <td><phrase role="highlight">1　(0.176s)</phrase></td>
	    <td><phrase role="regex-pattern">^[^ ]*?Twain</phrase></td>
	  </tr>
	  <tr>
	    <td>1.41　(0.08s)</td>
	    <td>1.21　(0.0684s)</td>
	    <td><phrase role="highlight">1　(0.0566s)</phrase></td>
	    <td><phrase role="regex-pattern">Tom|Sawyer|Huckleberry|Finn</phrase></td>
	  </tr>
	  <tr>
	    <td>1.56 (0.195s)</td>
	    <td>1.12 (0.141s)</td>
	    <td><phrase role="highlight">1 (0.125s)</phrase></td>
	    <td><phrase role="regex-pattern">(Tom|Sawyer|Huckleberry|Finn).{0,30}river|river.{0,30}(Tom|Sawyer|Huckleberry|Finn)</phrase></td>
	  </tr>
	</tbody>
      </table>
    </section>
  </section>

  <section xml:id="perf_msvc">
    <title>xpressive 対 Boost.Regex（Visual C++）</title>
    <itemizedlist>
      <listitem>
	<para>静的 xpressive</para>
      </listitem>
      <listitem>
	<para>動的 xpressive</para>
      </listitem>
      <listitem>
	<para><link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link></para>
      </listitem>
    </itemizedlist>
    <para>
      以上のパフォーマンス比較結果を次に示す。
    </para>
    <variablelist>
      <title>テスト仕様</title>
      <varlistentry>
	<term>ハードウェア：</term>
	<listitem>
	  <para>ハイパースレッディング 3GHz Xeon 1GB RAM</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>オペレーティングシステム：</term>
	<listitem>
	  <para>Windows XP Professional</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>コンパイラ：</term>
	<listitem>
	  <para>Visual C++ .NET 2003（7.1）</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>C++ 標準ライブラリ：</term>
	<listitem>
	  <para>Dinkumware バージョン 313</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> のバージョン：</term>
	<listitem>
	  <para>1.33+ 、BOOST_REGEX_USE_CPP_LOCALE, BOOST_REGEX_RECURSIVE</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>xpressive のバージョン：</term>
	<listitem>
	  <para>0.9.6a</para>
	</listitem>
      </varlistentry>
    </variablelist>

    <section>
      <title>比較 1：短いマッチ</title>
      <para>
	以下のテストでは入力文字列に対する正規表現マッチに要した時間を評価項目とする。各テスト結果の上側の数値は最速時間に対して正規化しており、1.0 が最もよい。下側の（括弧で囲んだ）数値は実際の秒時間である。最良の結果は緑色にしてある。
      </para>
      <!-- <xi:include href="../perf/msvc/short_matches.xml"/> -->
      <table>
	<caption>短いマッチ</caption>
	<thead>
	  <tr>
	    <th>静的 xpressive</th>
	    <th>動的 xpressive</th>
	    <th>Boost</th>
	    <th>テキスト</th>
	    <th>正規表現</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="highlight">1 (3.2e-007s)</phrase></td>
	    <td>1.37 (4.4e-007s)</td>
	    <td>2.38 (7.6e‑007s)</td>
	    <td><phrase role="regex-input">100-</phrase> といった、メッセージ文字列を含む FTP 応答行。</td>
	    <td><phrase role="regex-pattern">^([0-9]+)(\-| |$)(.*)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (6.4e-007s)</phrase></td>
	    <td>1.12 (7.15e-007s)</td>
	    <td>1.72 (1.1e-006s)</td>
	    <td><phrase role="regex-input">1234-5678-1234-456</phrase></td>
	    <td><phrase role="regex-pattern">([[:digit:]]{4}[- ]){3}[[:digit:]]{3,4}</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (9.82e-007s)</phrase></td>
	    <td>1.3 (1.28e-06s)</td>
	    <td>1.61 (1.58e-006s)</td>
	    <td><phrase role="regex-input">john_maddock@compuserve.com</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (8.94e-007s)</phrase></td>
	    <td>1.3 (1.16e-006s)</td>
	    <td>1.7 (1.1e-006s)</td>
	    <td><phrase role="regex-input">foo12@foo.edu</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (9.09e-007s)</phrase></td>
	    <td>1.28 (1.16e-006s)</td>
	    <td>1.67 (1.52e-006s)</td>
	    <td><phrase role="regex-input">bob.smith@foo.tv</phrase></td>
	    <td><phrase role="regex-pattern">^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (3.06e-007s)</phrase></td>
	    <td><phrase role="highlight">1.07 (3.28e-007s)</phrase></td>
	    <td>1.95 (5.96e-007s)</td>
	    <td><phrase role="regex-input">EH10 2QQ</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (3.13e-007s)</phrase></td>
	    <td><phrase role="highlight">1.09 (3.42e-007s)</phrase></td>
	    <td>1.86 (5.81e-007s)</td>
	    <td><phrase role="regex-input">G1 1AA</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (3.2e-007s)</phrase></td>
	    <td><phrase role="highlight">1.09 (3.5e-007s)</phrase></td>
	    <td>1.86 (5.96e-007s)</td>
	    <td><phrase role="regex-input">SW1 1ZZ</phrase></td>
	    <td><phrase role="regex-pattern">^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (2.68e-007s)</phrase></td>
	    <td>1.22 (3.28e-007s)</td>
	    <td>2 (5.36e-007s)</td>
	    <td><phrase role="regex-input">4/1/2001</phrase></td>
	    <td><phrase role="regex-pattern">^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (2.76e-007s)</phrase></td>
	    <td>1.16 (3.2e-007s)</td>
	    <td>1.94 (5.36e-007s)</td>
	    <td><phrase role="regex-input">12/12/2001</phrase></td>
	    <td><phrase role="regex-pattern">^[[:digit:]]{1,2}/[[:digit:]]{1,2}/[[:digit:]]{4}$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (2.98e-007s)</phrase></td>
	    <td><phrase role="highlight">1 (3.06e-007s)</phrase></td>
	    <td>1.85 (5.51e-007s)</td>
	    <td><phrase role="regex-input">123</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (3.2e-007s)</phrase></td>
	    <td>1.12 (3.58e-007s)</td>
	    <td>1.81 (5.81e-007s)</td>
	    <td><phrase role="regex-input">+3.14159</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1 (3.28e-007s)</phrase></td>
	    <td>1.11 (3.65e-007s)</td>
	    <td>1.77 (5.81e-007s)</td>
	    <td><phrase role="regex-input">-3.14159</phrase></td>
	    <td><phrase role="regex-pattern">^[-+]?[[:digit:]]*\.?[[:digit:]]*$</phrase></td>
	  </tr>
	</tbody>
      </table>
    </section>

    <section>
      <title>比較 2：長い検索</title>
      <para>
	次のテストは長い英文テキストから<emphasis>すべての</emphasis>マッチを見つけるのに要した時間を測定した。<link xlink:href="http://promo.net/pg/">Project Gutenberg</link> の <link xlink:href="http://www.gutenberg.org/dirs/3/2/0/3200/3200.zip">Mark Twain</link> の完全なテキストを使用した。テキストの長さは 19MB である。上と同様に上側の数値は正規化時間であり、下側の数値は実際の時間である。最短時間は緑色にした。
      </para>
      <!-- <xi:include href="../perf/msvc/long_twain_search.xml"/> -->
      <table>
	<caption>長い検索</caption>
	<thead>
	  <tr>
	    <th>静的 xpressive</th>
	    <th>動的 xpressive</th>
	    <th>Boost</th>
	    <th>正規表現</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="highlight">1　(0.019s)</phrase></td>
	    <td><phrase role="highlight">1　(0.019s)</phrase></td>
	    <td>2.98　(0.0566s)</td>
	    <td><phrase role="regex-pattern">Twain</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1　(0.0176s)</phrase></td>
	    <td><phrase role="highlight">1　(0.0176s)</phrase></td>
	    <td>3.17　(0.0556s)</td>
	    <td><phrase role="regex-pattern">Huck[[:alpha:]]+</phrase></td>
	  </tr>
	  <tr>
	    <td>3.62　(1.78s)</td>
	    <td>3.97　(1.95s)</td>
	    <td><phrase role="highlight">1　(0.492s)</phrase></td>
	    <td><phrase role="regex-pattern">[[:alpha:]]+ing</phrase></td>
	  </tr>
	  <tr>
	    <td>2.32　(0.344s)</td>
	    <td>3.06　(0.453s)</td>
	    <td><phrase role="highlight">1　(0.148s)</phrase></td>
	    <td><phrase role="regex-pattern">^[^ ]*?Twain</phrase></td>
	  </tr>
	  <tr>
	    <td><phrase role="highlight">1　(0.0576s)</phrase></td>
	    <td><phrase role="highlight">1.05　(0.0606s)</phrase></td>
	    <td>1.15　(0.0664s)</td>
	    <td><phrase role="regex-pattern">Tom|Sawyer|Huckleberry|Finn</phrase></td>
	  </tr>
	  <tr>
	    <td>1.24 (0.164s)</td>
	    <td>1.44 (0.191s)</td>
	    <td><phrase role="highlight">1 (0.133s)</phrase></td>
	    <td><phrase role="regex-pattern">(Tom|Sawyer|Huckleberry|Finn).{0,30}river|river.{0,30}(Tom|Sawyer|Huckleberry|Finn)</phrase></td>
	  </tr>
	</tbody>
      </table>
    </section>
  </section>
</section>
