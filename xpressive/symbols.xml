<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>記号表と属性</title>

  <section>
    <title>概要</title>
    <para>
      xpressive の正規表現で記号表を構築するには、<classname>std::map&lt;&gt;</classname> を使うだけでよい。辞書のキーはマッチした文字列であり、辞書の値は意味アクションが返すデータである。xpressive の 属性 <constant>a1</constant> 、<constant>a2</constant> 、…、<constant>a9</constant> はマッチしたキーに相当する値を保持し、意味アクション内で使用する。記号が見つからなかった場合の属性の既定値を指定することも可能である。
    </para>
  </section>

  <section>
    <title>記号表</title>
    <para>
      xpressive の記号表は単純に <classname>std::map&lt;&gt;</classname> であり、キーは文字列型、値は何でもよい。例えば以下の正規表現は、<varname>map1</varname> のキーにマッチし対応する値を属性 <constant>a1</constant> に代入する。次に意味アクションにおいて、属性 <constant>a1</constant> に格納した値を結果の整数に代入する。
    </para>
    <programlisting language="C++">int result;
std::map&lt;std::string, int&gt; map1;
// ...（辞書を埋める）
sregex rx = ( a1 = map1 ) [ ref(result) = a1 ];</programlisting>
    <para>
      次のコード例は数値の名前を整数に変換する。説明は以下に示す。
    </para>
    <programlisting language="C++">#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;
#include &lt;boost/xpressive/regex_actions.hpp&gt;
using namespace boost::xpressive;

int main()
{
    std::map&lt;std::string, int&gt; number_map;
    number_map["one"] = 1;
    number_map["two"] = 2;
    number_map["three"] = 3;
    // number_map の文字列でマッチを行い
    // 整数値を 'result' に格納する
    // 見つからなければ -1 を 'result' に格納する
    int result = 0;
    cregex rx = ((a1 = number_map ) | *_)
        [ ref(result) = (a1 | -1)];

    regex_match("three", rx);
    std::cout &lt;&lt; result &lt;&lt; '\n';
    regex_match("two", rx);
    std::cout &lt;&lt; result &lt;&lt; '\n';
    regex_match("stuff", rx);
    std::cout &lt;&lt; result &lt;&lt; '\n';
    return 0;
}</programlisting>
    <para>
      このプログラムは以下を印字する。
    </para>
    <screen>3
2
-1</screen>
    <para>
      このプログラムは始めに、数の名前をキー文字列とし対応する整数を値とする数値の辞書を構築している。次に記号表の探索結果を表す属性 <constant>a1</constant> を使って静的正規表現を構築している。意味アクション内では属性を整数変数 <varname>result</varname> に代入している。記号が見つからなければ既定値の <literal>-1</literal> を <varname>result</varname> に代入する。記号が見つからなくてもマッチが成功するために、ワイルドカード <code language="C++">*_</code> を使っている。
    </para>
    <para>
      この例のより完全版は <filename>libs/xpressive/example/numbers.cpp</filename> にある。
      <footnote>
	<para>
	  この例を寄贈してくれた <personname>David Jenkins</personname> に感謝する。
	</para>
      </footnote>
      このコードは「999,999,999」以下の数の名前（「ダース」のような特殊な数の名前が混ざっていてもよい）を数値に変換する。
    </para>
    <para>
      記号表のマッチは既定では大文字小文字を区別するが、式を <function>icase()</function> で囲むことにより大文字小文字を区別しないようにできる。
    </para>
  </section>

  <section>
    <title>属性</title>
    <para>
      1 つの正規表現内で使用できる属性は最大 9 つであり、<constant>a1</constant> 、<constant>a2</constant> 、…、<constant>a9</constant> という名前で <phrase role="namespace">boost::xpressive</phrase> 名前空間内にある。属性の型は代入元の辞書の 2 番目の要素と同じである。属性の既定値は意味アクション内で <code language="C++">(a1 | <replaceable>default-value</replaceable>)</code> のような構文で指定する。
    </para>
    <para>
      属性のスコープは適切に設定されるため、<code language="C++">( (a1=sym1) >> (a1=sym2)[ref(x)=a1] )[ref(y)=a1]</code> のようなとてつもないこともできる。内側の意味アクションは内側の <constant>a1</constant> を参照し、外側の意味アクションは外側の属性を参照する。これらは型が異なっていてもよい。
    </para>
    <note>
      <para>
	xpressive は検索を高速化するために、辞書から不可視の 3 分探索木を構築する。BOOST_DISABLE_THREADS を定義した場合、この不可視の 3 分木は検索後に「毎回自身を再構築」し、前回の検索頻度に基づいて次回の検索効率を向上する。
      </para>
    </note>
  </section>
</section>
