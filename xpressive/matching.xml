<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="user_s_guide.matching_and_searching">
  <title>マッチと検索</title>

  <section xml:id="user_s_guide.matching_and_searching.overview">
    <title>概要</title>
    <para>
      正規表現オブジェクトの作成が終わったら、<function linkend="regex_match">regex_match()</function> および <function linkend="regex_search">regex_search()</function> アルゴリズムで文字列からパターンを検索する。本節では正規表現のマッチと検索の基本について述べる。<link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> ライブラリの <function linkend="regex_match">regex_match()</function> および <function linkend="regex_search">regex_search()</function> の振る舞いについて理解しているなら、xpressive 版でも同様の動作をすると考えてよい。
    </para>
  </section>

  <section xml:id="user_s_guide.matching_and_searching.seeing_if_a_string_matches_a_regex">
    <title>文字列が正規表現にマッチするか調べる</title>
    <para>
      <function linkend="regex_match">regex_match()</function> アルゴリズムは正規表現が与えられた入力にマッチするか調べる。
    </para>
    <warning>
      <para>
	<function linkend="regex_match">regex_match()</function> アルゴリズムは、正規表現が入力全体の先頭から終端までマッチした場合のみ成功する。正規表現が入力の一部分だけにマッチする場合は <function linkend="regex_match">regex_match()</function> は偽を返す。文字列から正規表現にマッチする部分文字列を探す場合は、<function linkend="regex_search">regex_search()</function> アルゴリズムを使うとよい。
      </para>
    </warning>
    <para>
      入力は <type>std::string</type>、C 形式の null 終端文字列、イテレータの組といった双方向範囲である。いずれの場合でも、入力シーケンスを走査するイテレータ型は正規表現オブジェクトの宣言に使用したイテレータ型と一致していなければならない（イテレータに対する正しい正規表現の型は、<link linkend="user_s_guide.quick_start.know_your_iterator_type">クイックスタート</link>の表を見れば分かる）。
    </para>
    <programlisting language="C++">cregex cre = +_w;  // C 形式の文字列にマッチ
sregex sre = +_w;  // std::string にマッチ

if( regex_match( "hello", cre ) )              // OK
    { /*...*/ }

if( regex_match( std::string("hello"), sre ) ) // OK
    { /*...*/ }

if( regex_match( "hello", sre ) )              // エラー！ イテレータが一致していない！
    { /*...*/ }</programlisting>
    <para>
      <function linkend="regex_match">regex_match()</function> アルゴリズムは省略可能な出力引数として <classname linkend="match_results">match_results&lt;&gt;</classname> 構造体を受け付ける。この引数が与えられると、<function linkend="regex_match">regex_match()</function> アルゴリズムは正規表現のどの部分が入力のどの部分にマッチしたかの情報を <classname linkend="match_results">match_results&lt;&gt;</classname> 構造体に書き込む。
    </para>
    <programlisting language="C++">cmatch what;
cregex cre = +(s1= _w);

// regex_match の結果を "what" に格納する
if( regex_match( "hello", what, cre ) )
{
    std::cout &lt;&lt; what[1] &lt;&lt; '\n'; // "o" を印字する
}</programlisting>
    <para>
      <function linkend="regex_match">regex_match()</function> アルゴリズムはさらに省略可能な引数として <type role="enum">match_flag_type</type> ビットマスクを受け付ける。<type role="enum">match_flag_type</type> を与えると、マッチをどのように行うかある程度制御できる。このフラグの完全なリストと意味については <type role="enum">match_flag_type</type> のリファレンスを見よ。
    </para>
    <programlisting language="C++">std::string str("hello");
sregex sre = bol >> +_w;

// match_not_bol の意味は、「"bol"（行頭）は [begin,begin) にマッチしない」
if( regex_match( str.begin(), str.end(), sre, regex_constants::match_not_bol ) )
{
    // ここには絶対にこない！
}</programlisting>
    <para>
      <function linkend="regex_match">regex_match()</function> の使い方に関する完全なプログラム例は<link linkend="user_s_guide.examples.see_if_a_whole_string_matches_a_regex">ここ</link>にある。利用可能な多重定義の完全なリストは <function linkend="regex_match">regex_match()</function> のリファレンスを見よ。
    </para>
  </section>

  <section xml:id="user_s_guide.matching_and_searching.searching_for_matching_sub_strings">
    <title>部分文字列のマッチを検索する</title>
    <para>
      入力シーケンスに正規表現にマッチする部分シーケンスが含まれているか調べるには <function linkend="regex_search">regex_search()</function> を使用する。<function linkend="regex_search">regex_search()</function> は入力シーケンスの先頭で正規表現マッチを試行し、マッチを見つけるかシーケンスの終端に到達するまでシーケンスを走査する。
    </para>
    <para>
      その他のすべての面で <function linkend="regex_search">regex_search()</function> の動作は <function linkend="regex_match">regex_match()</function> と似たようなものである（上を見よ）。<type role="typedef">std::string</type> 、C 形式の null 終端文字列、イテレータの範囲といった双方向範囲を取り扱うという点が特にそうである。正規表現のイテレータ型と入力シーケンスの型を一致させなければならない、ということについても同様の注意が必要である。<function linkend="regex_match">regex_match()</function> と同様、<classname linkend="match_results">match_results&lt;&gt;</classname> 構造体を与えて検索結果を受け取ったり、<type role="typedef">match_flag_type</type> ビットマスクを使ってマッチをどのように行うかを制御できる。
    </para>
    <para>
      <function linkend="regex_search">regex_search()</function> の使い方に関する完全なプログラム例は<link linkend="user_s_guide.examples.see_if_a_string_contains_a_sub_string_that_matches_a_regex">ここ</link>にある。利用可能な多重定義の完全なリストは <function linkend="regex_search">regex_search()</function> のリファレンスを見よ。
    </para>
  </section>
</section>
