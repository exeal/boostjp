<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>地域化と正規表現特性</title>

  <section>
    <title>概要</title>
    <para>
      文字列に対する正規表現マッチにおいて、ロカール依存の情報が必要になる場合がよくある。例えば、大文字小文字を区別しない比較はどのように行うのか？ ロカール依存の振る舞いは特性（<foreignphrase xml:lang="en">traits</foreignphrase>）クラスが取り扱う。xpressive は <classname>cpp_regex_traits&lt;&gt;</classname> 、 <classname>c_regex_traits&lt;&gt;</classname> および <classname>null_regex_traits&lt;&gt;</classname>の 3 つの特性クラステンプレートを提供する。1 番目のものは <classname>std::locale</classname> をラップし、2 番目のものはグローバルな C ロカールをラップする。3 番目は非文字データを検索するのに使用する控えの特性型である。すべての特性テンプレートは<link xlink:href="concepts.traits_requirements">正規表現特性のコンセプト</link>に適合する。
    </para>
  </section>

  <section>
    <title>既定の正規表現特性を設定する</title>
    <para>
      既定では xpressive はすべてにパターンに対して <classname>cpp_regex_traits&lt;&gt;</classname> を使用する。これにより、すべての正規表現オブジェクトはグローバルな <classname>std::locale</classname> を使用する。<symbol>BOOST_XPRESSIVE_USE_C_TRAITS</symbol> を定義してコンパイルすると、xpressive の既定は <classname>c_regex_traits&lt;&gt;</classname> になる。
    </para>
  </section>

  <section>
    <title>動的正規表現でカスタムの特性を使用する</title>
    <para>
      カスタムの特性オブジェクトを使う動的正規表現を作成するには、<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を使わなければならない。基本的な方法を以下の例に示す。
    </para>
    <programlisting language="C++">// グローバルな C ロカールを使う regex_compiler を宣言する
regex_compiler&lt;char const *, c_regex_traits&lt;char&gt; &gt; crxcomp;
cregex crx = crxcomp.compile( "\\w+" );

// カスタムの std::locale を使う regex_compiler を宣言する
std::locale loc = /* ... ここでロカールを作成する ... */;
regex_compiler&lt;char const *, cpp_regex_traits&lt;char&gt; &gt; cpprxcomp(loc);
cregex cpprx = cpprxcomp.compile( "\\w+" );</programlisting>
    <para>
      <classname>regex_compiler</classname> オブジェクトは正規表現のファクトリとして動作する。これらは一度ロカールを与えておくと、以降作成する正規表現はそのロカールを使用するようになる。
    </para>
  </section>

  <section>
    <title>静的正規表現でカスタムの特性を使用する</title>
    <para>
      個々の静的正規表現に異なる特性群を使用したい場合は、<function>imbue()</function> 特殊パターン修飾子を使用する。例えば、
    </para>
    <programlisting language="C++">// グローバルな C ロカールを使う正規表現を定義する
c_regex_traits&lt;char&gt; ctraits;
sregex crx = imbue(ctraits)( +_w );

// カスタムの std::locale を使う正規表現を定義する
std::locale loc = /* ... ここでロカールを作成する ... */;
cpp_regex_traits&lt;char&gt; cpptraits(loc);
sregex cpprx1 = imbue(cpptraits)( +_w );

// 上記の短縮形
sregex cpprx2 = imbue(loc)( +_w );</programlisting>
    <para>
      <function>imbue()</function> パターン修飾子はパターン全体を囲まなければならない。静的正規表現の一部だけを <function>imbue</function> するとエラーになる。例えば、
    </para>
    <programlisting language="C++">// エラー！ 正規表現の一部だけを imbue() することはできない
sregex error = _w &gt;&gt; imbue(loc)( _w );</programlisting>
  </section>

  <section>
    <title><classname>null_regex_traits</classname> で非文字データを検索する</title>
    <para>
      xpressive の静的正規表現では、パターンの検索は文字シーケンス内に限定されない。生のバイト、整数、その他<link linkend="concepts.chart_requirements">文字のコンセプト</link>に適合するものであれば何でも検索できる。このような場合、<classname>null_regex_traits&lt;&gt;</classname> を使うと簡単である。<link linkend="concepts.traits_requirements">正規表現特性のコンセプト</link>の控えの実装であり、文字クラスを無視し、大文字小文字に関する変換を一切行わない。
    </para>
    <para>
      例えば整数列からパターンを検索する静的正規表現は、<classname>null_regex_traits&lt;&gt;</classname> を使って以下のように記述できる。
    </para>
    <programlisting language="C++">// 検索する整数データ
int const data[] = {0, 1, 2, 3, 4, 5, 6};

// 整数を検索する null_regex_traits&lt;&gt; オブジェクトを作成する...
null_regex_traits&lt;int&gt; nul;

// 正規表現オブジェクトに null_regex_traits を指示する...
basic_regex&lt;int const *&gt; rex = imbue(nul)(1 &gt;&gt; +((set= 2,3) | 4) &gt;&gt; 5);
match_results&lt;int const *&gt; what;

// 整数の配列からパターンを検索する...
regex_search(data, data + 7, what, rex);

assert(what[0].matched);
assert(*what[0].first == 1);
assert(*what[0].second == 6);</programlisting>
  </section>
</section>
