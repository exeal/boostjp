<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>意味アクションとユーザー定義表明</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>
  <section>
    <title>概要</title>
    <para>
      入力文字列を解析し、そこから <classname>std::map&lt;&gt;</classname> を構築したいとする。このような場合、正規表現では不十分である。正規表現マッチの部分で<emphasis>何か</emphasis>をしたい。xpressive は、静的正規表現の部分に意味アクションを結びつける方法を提供する。本節ではその方法を説明する。
    </para>
  </section>

  <section>
    <title>意味アクション（<foreignphrase xml:lang="en">Semantic Actions</foreignphrase>）</title>
    <para>
      以下のコードを考える。xpressive の意味アクションを使って単語と整数の組からなる文字列を解析し、<classname>std::map&lt;&gt;</classname> に詰め込んでいる。
    </para>
    <programlisting language="C++">#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;
#include &lt;boost/xpressive/regex_actions.hpp&gt;
using namespace boost::xpressive;

int main()
{
    std::map&lt;std::string, int&gt; result;
    std::string str("aaa=&gt;1 bbb=&gt;23 ccc=&gt;456");

    // =&gt; で区切られた単語と整数にマッチし、
    // 結果を std::map&lt;&gt; に詰め込む
    sregex pair = ( (s1= +_w) &gt;&gt; "=&gt;" &gt;&gt; (s2= +_d) )
        [ ref(result)[s1] = as&lt;int&gt;(s2) ];

    // 空白で区切られた 1 つ以上の単語・整数の組にマッチする。
    sregex rx = pair &gt;&gt; *(+_s &gt;&gt; pair);

    if(regex_match(str, rx))
    {
        std::cout &lt;&lt; result["aaa"] &lt;&lt; '\n';
        std::cout &lt;&lt; result["bbb"] &lt;&lt; '\n';
        std::cout &lt;&lt; result["ccc"] &lt;&lt; '\n';
    }

    return 0;
}</programlisting>
    <para>
      このプログラムは以下を印字する。
    </para>
    <screen>1
23
456</screen>
    <para>
      正規表現 <varname>pair</varname> は、パターンとアクションの 2 つの部分からなる。単語のマッチを 1 番目の部分マッチで捕捉し、<phrase role="regex-input">=&gt;</phrase> で区切られた整数のマッチを 2 番目の部分マッチで捕捉するというのがパターンが表現するところである。アクションは角括弧 <code language="C++">[ ref(result)[s1] = as&lt;int&gt;(s2) ]</code> の内側である。これは 1 番目の部分マッチを <varname>results</varname> 辞書の添字に使用し、そこに2番目の部分マッチを整数に変換した結果を代入するという意味である。
    </para>
    <note>
      <para>
	静的正規表現で意味アクションを使用するには、<filename class="headerfile">&lt;boost/xpressive/regex_actions.hpp&gt;</filename> をインクルードしなければならない。
      </para>
    </note>
    <para>
      このコードはどのように動作するのだろう？ 静的正規表現の残りの部分だけ見ると括弧の間は式テンプレートになっている。これでアクションがコード化され、後で実行される。式 <code language="C++">ref(result)</code> は <varname>result</varname> への遅延参照を作成する。より大きな式である <code language="C++">ref(result)[s1]</code> は辞書に対する添字操作の遅延である。後でこのアクションを実行すると <constant>s1</constant> は 1 番目の <classname linkend="sub_match">sub_match&lt;&gt;</classname> で置換される。同様に <code language="C++">as&lt;int&gt;(s2)</code> を実行すると <constant>s2</constant> は 2 番目の <classname linkend="sub_match">sub_match&lt;&gt;</classname> で置換される。<function>as&lt;&gt;</function> アクションは引数を Boost.Lexical_cast を使って要求の型に変換する。アクション全体の効果としては、新しい単語・整数の組を辞書に挿入する、となる。
    </para>
    <note>
      <para>
	<filename class="headerfile">&lt;boost/ref.hpp&gt;</filename> の関数 <function>boost::ref()</function> と <filename class="headerfile">&lt;boost/xpressive/regex_actions.hpp&gt;</filename> の <function>boost::xpressive::ref()</function> には重大な違いがある。前者は通常の参照とほぼ同様の振る舞いをする素の <classname>reference_wrapper&lt;&gt;</classname> を返す。一方 <function>boost::xpressive::ref()</function> が返すのは、遅延実行する式内で使用する遅延参照である。これが、<varname>result</varname> が <constant>s1</constant> を受け取る <methodname>operator[]</methodname> をもたないにも関わらず <code language="C++">ref(result)[s1]</code> とする理由である。
      </para>
    </note>
    <para>
      部分マッチのプレースホルダ <constant>s1</constant> 、<constant>s2</constant> に加えて、アクションが結び付けられている部分式にマッチした文字列を後方参照するのにアクション内で使用するプレースホルダー <constant>_</constant> がある。例えば以下の正規表現は数字列にマッチし、それらを整数として解釈して結果をローカル変数に代入する。
    </para>
    <programlisting language="C++">int i = 0;
// ここで _ は (+_d) にマッチしたすべての文字を後方参照する
sregex rex = (+_d)[ ref(i) = as&lt;int&gt;(_) ];</programlisting>
  </section>

  <section>
    <title>アクションの遅延実行</title>
    <para>
      アクションを正規表現のある部分に結び付けてマッチを行うとは、実際にはどういう意味なのか？ アクションが実行されるのはいつなのか？ アクションが繰り返し部分式の一部である場合は、アクションが実行される回数は1度なのか複数回なのか？ また部分式が最初はマッチしていたが正規表現の残りの部分がマッチせず最終的に失敗した場合は、アクションはまったく実行されないのか？
    </para>
    <para>
      答えは既定では、アクションは<emphasis>遅延</emphasis>実行される、である。部分式が文字列にマッチすると、そのアクションはアクションが参照する部分マッチの現在の値とともに待ち行列に置かれる。マッチアルゴリズムがバックトラックしなければならなくなると、アクションは必要に応じて待ち行列から取り出される。アクションが実際に実行されるのは、正規表現全体のマッチが成功した後だけである。<function linkend="regex_match">regex_match()</function> が制御を返す直前の段階で、これらは待ち行列に追加した順番で一度にすべて実行される。
    </para>
    <para>
      例として、以下の数字を見つけるたびにカウンタを増やす正規表現を考える。
    </para>
    <programlisting language="C++">int i = 0;
std::string str("1!2!3?");
// 感嘆符の付いた数字は数えるが、疑問符付きのものは数えない。
sregex rex = +( _d [ ++ref(i) ] &gt;&gt; '!' );
regex_search(str, rex);
assert( i == 2 );</programlisting>
    <para>
      アクション <code language="C++">++ref(i)</code> は 3 回（数字が見つかるたびに 1 回ずつ）待ち行列に入る。しかし<emphasis>実行</emphasis>されるのは 2 回だけ（後ろに <phrase role="regex-input">!</phrase> 文字がある数字 1 字について 1 回ずつ）である。<phrase role="regex-input">?</phrase> 文字に遭遇するとマッチアルゴリズムはバックトラックを行い、待ち行列から最後のアクションを削除する。
    </para>
  </section>

  <section>
    <title>アクションの即時実行</title>
    <para>
      意味アクションを即時実行したい場合は、そのアクションを含む部分式を <function linkend="keep">keep()</function> で包む。<function>keep()</function> は当該部分式についてバックトラックを無効にし、その部分式の待ち行列に入っているあらゆるアクションを <function>keep()</function> の終了とともに実行する。これにより、あたかも <function>keep()</function> 内の部分式が別の正規表現オブジェクトにコンパイルされ、<function>keep()</function> のマッチングが <function>regex_search()</function> を個別に呼び出して実行されたかのようになる。結果この部分式は文字にマッチしアクションを実行するが、バックトラックも巻き戻しもしない。例えば上の例を以下のように書き換えたとする。
    </para>
    <programlisting language="C++">int i = 0;
std::string str("1!2!3?");
// 数字をすべて数える。
sregex rex = +( keep( _d [ ++ref(i) ] ) &gt;&gt; '!' );
regex_search(str, rex);
assert( i == 3 );</programlisting>
    <para>
      部分式 <code language="C++">_d [++ref(i) ]</code> を <function>keep()</function> で包んだ。こうすることでこの正規表現が数字にマッチするとアクションが待ち行列に入り、<phrase role="regex-input">!</phrase> 文字のマッチを試行する前に即時実行されるようになる。この場合、アクションは 3 回実行される。
    </para>
    <note>
      <para>
	<function>keep()</function> と同様、<function linkend="before">before()</function> と <function linkend="after">after()</function> 内のアクションも、その部分式がマッチしたときに早期実行される。
      </para>
    </note>
  </section>

  <section>
    <title>遅延関数</title>
    <para>
      ここまで変数と演算子からなる意味アクションの記述方法について見てきたが、意味アクションから関数を呼び出す方法についてはどうだろう？ xpressive にはそのための機構がある。
    </para>
    <para>
      まず関数オブジェクト型を定義する。以下の例は引数に対して <methodname>push()</methodname> を呼び出す関数オブジェクトである。
    </para>
    <programlisting language="C++">struct push_impl
{
    // 戻り値の型（tr1::result_of のために必要）
    typedef void result_type;

    template&lt;typename Sequence, typename Value&gt;
    void operator()(Sequence &amp;seq, Value const &amp;val) const
    {
        seq.push(val);
    }
};</programlisting>
    <para>
      次に xpressive の <classname>function&lt;&gt;</classname> テンプレートを使って <varname>push</varname> という名前の関数オブジェクトを定義する。
    </para>
    <programlisting language="C++">// グローバルな "push" 関数オブジェクト。
function&lt;push_impl&gt;::type const push = {{}};</programlisting>
    <para>
      初期化はいささか奇妙に見えるが、<varname>push</varname> を静的に初期化するためである。これは実行時に構築する必要はないということを意味する。以下のように <varname>push</varname> を意味アクション内で使用する。
    </para>
    <programlisting language="C++">std::stack&lt;int&gt; ints;
// 数字がマッチしたら int へキャストし、スタックに積む。
sregex rex = (+_d)[push(ref(ints), as&lt;int&gt;(_))];</programlisting>
    <para>
      この方法だとメンバ関数の呼び出しがただの関数呼び出しに見えてしまうことに気付くと思う。意味アクションを、よりメンバ関数呼び出しらしく見えるように記述する方法がある。
    </para>
    <programlisting language="C++">sregex rex = (+_d)[ref(ints)-&gt;*push(as&lt;int&gt;(_))];</programlisting>
    <para>
      xpressive は <methodname>-&gt;*</methodname> を認識し、この式を上のコードとまったく同等に扱う。
    </para>
    <para>
      関数オブジェクトが引数によって戻り値の型を変えなければならない場合は、<type>result_type</type> 型定義の代わりに <classname>result&lt;&gt;</classname> メンバテンプレートを使用するとよい。<classname>std::pair&lt;&gt;</classname> か <classname linkend="sub_match">sub_match&lt;&gt;</classname> の <varname>first</varname> メンバを返す <varname>first</varname> 関数オブジェクトの例である。
    </para>
    <programlisting language="C++">// 組の第 1 要素を返す関数オブジェクト。
struct first_impl
{
    template&lt;typename Sig&gt; struct result {};

    template&lt;typename This, typename Pair&gt;
    struct result&lt;This(Pair)&gt;
    {
        typedef typename remove_reference&lt;Pair&gt;
            ::type::first_type type;
    };

    template&lt;typename Pair&gt;
    typename Pair::first_type
    operator()(Pair const &amp;p) const
    {
        return p.first;
    }
};

// OK、first(s1) により s1 が参照する部分マッチの先頭を指すイテレータを得る。
function&lt;first_impl&gt;::type const first = {{}};</programlisting>
  </section>

  <section>
    <title>ローカル変数を参照する</title>
    <para>
      上の例で見たように、<function>xpressive::ref()</function> を使用するとアクション内からローカル変数を参照できる。この変数は正規表現による参照に保持されるが、これらの参照が懸垂しないよう注意が必要である。例えば以下のコードでは、<function>bad_voodoo()</function> が制御を返すと <varname>i</varname> に対する参照が懸垂する。
    </para>
    <programlisting language="C++">sregex bad_voodoo()
{
    int i = 0;
    sregex rex = +( _d [ ++ref(i) ] &gt;&gt; '!' );
    // エラー！ rex はローカル変数を参照により参照しており、
    // bad_voodoo() が制御を返した後に懸垂する。
    return rex;
}</programlisting>
    <para>
      意味アクションを記述するときは、すべての参照が懸垂しないよう注意を払わなければならない。1 つの方法は変数を、正規表現が値により保持する共有ポインタにすることである。
    </para>
    <programlisting language="C++">sregex good_voodoo(boost::shared_ptr&lt;int&gt; pi)
{
    // val() を使って shared_ptr を値で保持する:
    sregex rex = +( _d [ ++*val(pi) ] &gt;&gt; '!' );
    // OK、rex は整数への参照カウントを保持する。
    return rex;
}</programlisting>
    <para>
      上のコードでは、<function>xpressive::val()</function> を使って共有ポインタを値で保持している。アクション内のローカル変数は既定では値で保持されるため、通常この処理は必要ないが、この場合は必要である。アクションを <code language="C++">++*pi</code> と記述してしまうと即時実行されてしまう。これは <code language="C++">++*pi</code> が式テンプレートでないためである（<code language="C++">++*val(pi)</code> は式テンプレートである）。
    </para>
    <para>
      アクション内の変数をすべて <function>ref()</function> と <function>val()</function> で包むのはうんざりするかもしれない。これを容易にするために xpressive は <classname>reference&lt;&gt;</classname> および <classname>value&lt;&gt;</classname> テンプレートを提供している。対応を以下の表に示す。
    </para>
    <table>
      <caption>reference&lt;&gt; と value&lt;&gt;</caption>
      <thead>
	<tr>
	  <td>これは…</td>
	  <td>…以下と等価である</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>
	    <programlisting language="C++">int i = 0;

sregex rex = +( _d [ ++ref(i) ] &gt;&gt; '!' );</programlisting>
	  </td>
	  <td>
	    <programlisting language="C++">int i = 0;
reference&lt;int&gt; ri(i);
sregex rex = +( _d [ ++ri ] &gt;&gt; '!' );</programlisting>
	  </td>
	</tr>
	<tr>
	  <td>
	    <programlisting language="C++">boost::shared_ptr&lt;int&gt; pi(new int(0));

sregex rex = +( _d [ ++*val(pi) ] &gt;&gt; '!' );</programlisting>
	  </td>
	  <td>
	    <programlisting language="C++">boost::shared_ptr&lt;int&gt; pi(new int(0));
value&lt;boost::shared_ptr&lt;int&gt; &gt; vpi(pi);
sregex rex = +( _d [ ++*vpi ] &gt;&gt; '!' );</programlisting>
	  </td>
	</tr>
      </tbody>
    </table>
    <para>
      上で見たように <classname>reference&lt;&gt;</classname> を使用する場合、始めにローカル変数を宣言してから <classname>reference&lt;&gt;</classname> する。<classname>local&lt;&gt;</classname> を使用するとこの 2 段階を 1 つにまとめられる。
    </para>
    <table>
      <caption>local&lt;&gt; 対 reference&lt;&gt;</caption>
      <thead>
	<tr>
	  <td>これは…</td>
	  <td>…以下と等価である</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>
	    <programlisting language="C++">local&lt;int&gt; i(0);

sregex rex = +( _d [ ++i ] &gt;&gt; '!' );</programlisting>
	  </td>
	  <td>
	    <programlisting language="C++">int i = 0;
reference&lt;int&gt; ri(i);
sregex rex = +( _d [ ++ri ] &gt;&gt; '!' );</programlisting>
	  </td>
	</tr>
      </tbody>
    </table>
    <para>
      上の例を <classname>local&lt;&gt;</classname> を使用して書き直すと以下のようになる。
    </para>
    <programlisting language="C++">local&lt;int&gt; i(0);
std::string str("1!2!3?");
// 感嘆符の付いた数字は数えるが、疑問符付きのものは数えない。
sregex rex = +( _d [ ++i ] &gt;&gt; '!' );
regex_search(str, rex);
assert( i.get() == 2 );</programlisting>
    <para>
      <methodname>local&lt;&gt;::get()</methodname> を使ってローカル変数の値にアクセスしていることに注意していただきたい。また <classname>reference&lt;&gt;</classname> 同様、<classname>local&lt;&gt;</classname> が懸垂参照を作成する可能性があることに注意が必要である。
    </para>
  </section>

  <section>
    <title>非ローカル変数を参照する</title>
    <para>
      この節の最初で、正規表現を使って単語・整数の組からなる文字列を解析して <classname>std::map&lt;&gt;</classname> に詰め込む例を見た。この例では辞書と正規表現を定義しておき、いずれかがスコープから出る前にそれらを使う必要があった。正規表現を先に定義しておき、異なる複数の辞書に書き込みたい場合はどうすればよいだろうか？ 正規表現オブジェクトに辞書に対する参照を直接組み込むのではなく、<function linkend="regex_match">regex_match()</function> アルゴリズムに辞書を渡すようにしてはどうか。プレースホルダを定義し、意味アクション内で辞書そのものの代わりに使用する。後でいずれかの正規表現アルゴリズムを呼び出すときに実際の辞書オブジェクトへ参照を束縛できる。以下のようにする。
    </para>
    <programlisting language="C++">// 辞書オブジェクトのプレースホルダを定義する:
placeholder&lt;std::map&lt;std::string, int&gt; &gt; _map;

// =&gt; で区切られた単語と整数にマッチし、
// 結果を std::map&lt;&gt; に詰め込む
sregex pair = ( (s1= +_w) &gt;&gt; "=&gt;" &gt;&gt; (s2= +_d) )
    [ _map[s1] = as&lt;int&gt;(s2) ];

// 空白で区切られた 1 つ以上の単語・整数の組にマッチする。
sregex rx = pair &gt;&gt; *(+_s &gt;&gt; pair);

// 解析する文字列
std::string str("aaa=&gt;1 bbb=&gt;23 ccc=&gt;456");

// 結果を書き込む実際の辞書:
std::map&lt;std::string, int&gt; result;

// _map プレースホルダを実際の辞書に束縛する
smatch what;
what.let( _map = result );

// マッチを実行し結果の辞書に書き込む
if(regex_match(str, what, rx))
{
    std::cout &lt;&lt; result["aaa"] &lt;&lt; '\n';
    std::cout &lt;&lt; result["bbb"] &lt;&lt; '\n';
    std::cout &lt;&lt; result["ccc"] &lt;&lt; '\n';
}</programlisting>
    <para>
      このプログラムは以下を表示する。
    </para>
    <screen>1
23
456</screen>
    <para>
      <classname>placeholder&lt;&gt;</classname> を使って <varname>_map</varname> を定義しており、これが <classname>std::map&lt;&gt;</classname> 変数の代理となる。意味アクション内でこのプレースホルダを辞書として使用できる。次に <classname linkend="match_results">match_results&lt;&gt;</classname> 構造体を定義して <code language="C++">what.let( _map = result );</code> で実際の辞書をプレースホルダに束縛する。<function linkend="regex_match">regex_match()</function> 呼び出しは、意味アクション内のプレースホルダを <varname>result</varname> への参照で置換したかのように振舞う。
    </para>
    <note>
      <para>
	意味アクション内のプレースホルダは<emphasis>実際には</emphasis>実行時に変数への参照で置換されない。正規表現オブジェクトはいずれの正規表現アルゴリズムでも変更されることはないので、複数のスレッドで使用しても安全である。
      </para>
    </note>
    <para>
      <classname linkend="regex_iterator">regex_iterator&lt;&gt;</classname> か <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を使用する場合は、遅延束縛されたアクションの引数は少し異なる。正規表現イテレータのコンストラクタは、引数の束縛を指定する引数を受け付ける。変数をそのプレースホルダに束縛するのに使用する <function>let()</function> 関数がある。以下のコードに方法を示す。
    </para>
    <programlisting language="C++">// 辞書オブジェクトのプレースホルダを定義する:
placeholder&lt;std::map&lt;std::string, int&gt; &gt; _map;

// =&gt; で区切られた単語と整数にマッチ
sregex pair = ( (s1= +_w) &gt;&gt; "=&gt;" &gt;&gt; (s2= +_d) )
    [ _map[s1] = as&lt;int&gt;(s2) ];

// 解析する文字列
std::string str("aaa=&gt;1 bbb=&gt;23 ccc=&gt;456");

// 結果を書き込む実際の辞書:
std::map&lt;std::string, int&gt; result;

// regex_iterator を作成し、すべてのマッチを検索する
sregex_iterator it(str.begin(), str.end(), pair, let(_map=result));
sregex_iterator end;

// すべてのマッチについて結果の辞書に書き込む
while(it != end)
    ++it;

std::cout &lt;&lt; result["aaa"] &lt;&lt; '\n';
std::cout &lt;&lt; result["bbb"] &lt;&lt; '\n';
std::cout &lt;&lt; result["ccc"] &lt;&lt; '\n';</programlisting>
    <para>
      このプログラムは以下を出力する。
    </para>
    <screen>1
23
456</screen>
  </section>

  <section>
    <title>ユーザー定義表明</title>
    <para>
      正規表現の<emphasis>表明</emphasis>については慣れたものだろう。Perlだと表明の例として <phrase role="regex-pattern">^</phrase> や <phrase role="regex-pattern">$</phrase> があり、それぞれ文字列の先頭・終端にマッチする。xpressive では新たに表明を定義できる。カスタム表明は、マッチの成否を判断する時点で真でなければならない条件である。カスタム表明をチェックするには xpressive の <function linkend="check">check()</function>関数を使用する。
    </para>
    <para>
      カスタム表明を定義する方法はいくつかある。一番簡単なのは関数オブジェクトを使うことである。長さが 3 文字か 6 文字のいずれかである部分文字列にマッチする部分式が必要であるとする。そのような述語を以下の構造体で定義する。
    </para>
    <programlisting language="C++">// 部分マッチが長さ 3 文字か 6 文字であれば真となる述語。
struct three_or_six
{
    bool operator()(sub_match const &amp;sub) const
    {
        return sub.length() == 3 || sub.length() == 6;
    }
};</programlisting>
    <para>
      この述語を正規表現で使うには以下のようにする。
    </para>
    <programlisting language="C++">// 3 文字か 6 文字の単語にマッチする。
sregex rx = (bow &gt;&gt; +_w &gt;&gt; eow)[ check(three_or_six()) ] ;</programlisting>
    <para>
      上の正規表現は長さが 3 文字か 6 文字の単語全体にマッチする。述語 <classname>three_or_six</classname> は、カスタム表明が結び付けられた部分式にマッチした部分を後方参照する <classname linkend="sub_match">sub_match&lt;&gt;</classname> を受け取る。
    </para>
    <note>
      <para>
	カスタム表明はマッチの成否に関与する。遅延実行されるアクションとは異なり、カスタム表明は正規表現エンジンがマッチを検索するときに即時実行される。
      </para>
    </note>
    <para>
      カスタム表明は意味アクションと同じ構文を用いてインライン定義することもできる。以下は同じカスタム表明をインラインで書き直したものである。
    </para>
    <programlisting language="C++">// 3 文字か 6 文字の単語にマッチする。
sregex rx = (bow &gt;&gt; +_w &gt;&gt; eow)[ check(length(_)==3 || length(_)==6) ] ;</programlisting>
    <para>
      上記において、<function>length()</function> は引数の <methodname>length()</methodname> メンバ関数を呼び出す遅延関数であり、<constant>_</constant> は <classname>sub_match</classname> を受け取るプレースホルダである。
    </para>
    <para>
      カスタム表明のインライン記述は、コツが分かってしまえば非常に強力である。（あまり厳密でない意味での）正しい日付にのみマッチする正規表現を書いてみよう。
    </para>
    <programlisting language="C++">int const days_per_month[] =
    {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

mark_tag month(1), day(2);
// 「月/日/年」形式の正しい日付を検索する。
sregex date =
    (
        // 月は 1 以上 12 以下でなければならない
        (month= _d &gt;&gt; !_d)     [ check(as&lt;int&gt;(_) &gt;= 1
                                    &amp;&amp; as&lt;int&gt;(_) &lt;= 12) ]
    &gt;&gt;  '/'
        // 日は 1 以上 31 以下でなければならない
    &gt;&gt;  (day=   _d &gt;&gt; !_d)     [ check(as&lt;int&gt;(_) &gt;= 1
                                    &amp;&amp; as&lt;int&gt;(_) &lt;= 31) ]
    &gt;&gt;  '/'
        // 年は 1970 以上 2038 以下とする
    &gt;&gt;  (_d &gt;&gt; _d &gt;&gt; _d &gt;&gt; _d) [ check(as&lt;int&gt;(_) &gt;= 1970
                                    &amp;&amp; as&lt;int&gt;(_) &lt;= 2038) ]
    )
    // 月ごとの実際の日数を確認する！
    [ check( ref(days_per_month)[as&lt;int&gt;(month)-1] >= as&lt;int&gt;(day) ) ]
;

smatch what;
std::string str("99/99/9999 2/30/2006 2/28/2006");

if(regex_search(str, what, date))
{
    std::cout &lt;&lt; what[0] &lt;&lt; std::endl;
}</programlisting>
    <para>
      このプログラムは以下を印字する。
    </para>
    <screen>2/28/2006</screen>
    <para>
      インラインのカスタム表明を使って年・月・日の値の範囲チェックを行っていることに注意していただきたい。<phrase role="regex-input">99/99/9999</phrase> や <phrase role="regex-input">2/30/2006</phrase> は正しい日付ではないため、この正規表現はマッチしない（99 の月は存在しないし、2 月には 30 日はない）。
    </para>
  </section>
</article>
