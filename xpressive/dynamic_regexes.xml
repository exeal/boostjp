<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>動的正規表現</title>

  <section>
    <title>概要</title>
    <para>
      静的正規表現は一級品だが、ときにはもっと別の…、つまり動的正規表現が必要な場合もある。正規表現検索・置換機能を備えたテキストエディタを開発中だとしよう。正規表現は、実行時にエンドユーザーからの入力として受け付けなければならない。文字列を正規表現に解析する方法が必要であり、xpressive の動的正規表現がそれに相当する。これらは静的正規表現と同じコアコンポーネントから構築するが、遅延束縛のため実行時にパターンを指定できる。
    </para>
  </section>

  <section>
    <title>構築と代入</title>
    <para>
      動的正規表現を作成する方法は2つある。<methodname linkend="basic_regex.compile">basic_regex&lt;&gt;::compile()</methodname> 関数によるものと <classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> クラステンプレートによるものである。既定のロカールでよければ <methodname linkend="basic_regex.compile">basic_regex&lt;&gt;::compile()</methodname>を使うとよい。別のロカールを指定する必要がある場合は、<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を使用する。<link linkend="user_s_guide.grammars_and_nested_matches">正規表現文法</link>の節で、<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> の他の使用について述べる。
    </para>
    <para>
      以下は <methodname linkend="basic_regex.compile">basic_regex&lt;&gt;::compile()</methodname> の使用例である。
    </para>
    <programlisting language="C++">sregex re = sregex::compile( "this|that", regex_constants::icase );</programlisting>
    <para>
      以下は <classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を使った同じ例である。
    </para>
    <programlisting language="C++">sregex_compiler compiler;
sregex re = compiler.compile( "this|that", regex_constants::icase );</programlisting>
    <para>
      <methodname linkend="basic_regex.compile">basic_regex&lt;&gt;::compile()</methodname> は <classname linkend="regex_compiler">regex_compiler</classname> を使って実装している。
    </para>
  </section>

  <section>
    <title>動的 xpressive の構文</title>
    <para>
      動的構文は合法な C++ の式規則による制約を受けないので、動的正規表現については慣れ親しんだ構文が使える。そういうわけで動的正規表現については xpressive は、正規表現を標準ライブラリに追加することになった <person><personname>John Maddock</personname></person> の<link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm">草案</link>に従った。本質的には <link xlink:href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf">ECMAScript</link> により標準化された構文であり、国際化のための細かい変更を加えてある。
    </para>
    <para>
      構文の網羅的な文書は他にあるので、ここでは仕様の複製はせず、既存の標準を参照するにとどめる。
    </para>
  </section>

  <section>
    <title>国際化</title>
    <para>
      静的正規表現と同様、動的正規表現の国際化サポートは別の <classname>std::locale</classname> を指定することによる。これを行うには <classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を使用しなければならない。<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> クラスは <methodname>imbue()</methodname> 関数をもつ。<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> オブジェクトに対してカスタムの <classname>std::locale</classname> を使って <methodname>imbue()</methodname> を呼び出すと、それ以降に <classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> でコンパイルした正規表現オブジェクトはそのロカールを使用するようになる。例えば、
    </para>
    <programlisting language="C++">std::locale my_locale = /* ここでロカールオブジェクトを初期化する */;
sregex_compiler compiler;
compiler.imbue( my_locale );
sregex re = compiler.compile( "\\w+|\\d+" );</programlisting>
    <para>
      この正規表現は、組み込みの文字集合 <phrase role="regex-pattern">\w</phrase> および <phrase role="regex-pattern">\d</phrase> を処理するのに <varname>my_locale</varname> を使用する。
    </para>
  </section>
</section>
