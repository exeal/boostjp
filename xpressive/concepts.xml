<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>コンセプト</title>

  <section>
    <title>CharT の要件</title>
    <para>
      型 <type>BidiIterT</type> を <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> のテンプレート引数とすると、<type>iterator_traits&lt;BidiIterT&gt;::value_type</type> が <type>CharT</type> である。型 <type>CharT</type> は自明な（<phrase xml:lang="en">trivial</phrase>）既定コンストラクタ、コピーコンストラクタ、代入演算子、およびデストラクタをもたなければならない。さらにオブジェクトに関しては以下の要件を満たさなければならない。<varname>c</varname> は <type>CharT</type> 型、<varname>c1</varname> と <varname>c2</varname> は <type>CharT const</type> 型、<varname>i</varname> は <type>int</type> 型である。
    </para>

    <table>
      <caption>CharT の要件</caption>
      <thead>
	<tr>
	  <td>式</td>
	  <td>戻り値の型</td>
	  <td>表明、備考、事前・事後条件</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">CharT c</code></td>
	  <td><type>CharT</type></td>
	  <td>既定のコンストラクタ（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">CharT c(c1)</code></td>
	  <td><type>CharT</type></td>
	  <td>コピーコンストラクタ（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 = c2</code></td>
	  <td><type>CharT</type></td>
	  <td>代入演算子（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 == c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> の値が <varname>c2</varname> と同じであれば <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 != c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> と <varname>c2</varname> が等値でなければ <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &lt; c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> の値が <varname>c2</varname> より小さければ <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &gt; c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> の値が <varname>c2</varname> より大きければ <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &lt;= c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> が <varname>c2</varname> より小さいか等値であれば <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &gt;= c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> が <varname>c2</varname> より大きいか等値であれば <constant>true</constant>。</td>
	</tr>
	<tr>
	  <td><code language="C++">intmax_t i = c1</code></td>
	  <td><type>int</type></td>
	  <td><type>CharT</type> は整数型に変換可能でなければならない。</td>
	</tr>
	<tr>
	  <td><code language="C++">CharT c(i);</code></td>
	  <td><type>CharT</type></td>
	  <td><type>CharT</type> は整数型から構築可能でなければならない。</td>
	</tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>特性の要件</title>
    <para>
      以下の表において <classname>X</classname> は <type>CharT</type> 型の文字コンテナについて型と関数を定義する特性クラスである。<varname>u</varname> は <classname>X</classname> 型のオブジェクト、<varname>v</varname> は <type>const X</type> 型のオブジェクト、<varname>p</varname> は <type>const CharT*</type> 型の値、<type>I1</type> と <type>I2</type> は <code>Input Iterator</code>、<varname>c</varname> は <type>const CharT</type> 型の値、<varname>s</varname> は <type>X::string_type</type> 型のオブジェクト、<varname>cs</varname> は <type>const X::string_type</type> 型のオブジェクト、<varname>b</varname> は <type>bool</type> 型の値、<varname>i</varname> は <type>int</type> 型の値、<varname>F1</varname> と <varname>F2</varname>は <type>const CharT*</type> 型の値、<varname>loc</varname> は <type>X::locale_type</type> 型のオブジェクト、<varname>ch</varname> は <type>const char</type> のオブジェクトである。
    </para>

    <table>
      <caption>特性の要件</caption>
      <thead>
	<tr>
	  <td>式</td>
	  <td>戻り値の型</td>
	  <td>表明、備考、事前・事後条件</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">X::char_type</code></td>
	  <td><type>CharT</type></td>
	  <td><classname linkend="basic_regex">basic_regex&lt;&gt;</classname> クラステンプレートを実装する文字コンテナ型。</td>
	</tr>
	<tr>
	  <td><code language="C++">X::string_type</code></td>
	  <td><type>std::basic_string&lt;CharT&gt;</type> か <type>std::vector&lt;CharT&gt;</type></td>
	  <td>なし。</td>
	</tr>
	<tr>
	  <td><code language="C++">X::locale_type</code></td>
	  <td><type>（実装定義）</type></td>
	  <td>特性クラスが使用するロカールを表現する、コピー構築可能な型。</td>
	</tr>
	<tr>
	  <td><code language="C++">X::char_class_type</code></td>
	  <td><type>（実装定義）</type></td>
	  <td>個々の文字分類（文字クラス）を表現するビットマスク型。この型の複数の値をビット和すると別の有効な値を得る。</td>
	</tr>
	<tr>
	  <td><code language="C++">X::hash(c)</code></td>
	  <td><type>unsigned char</type></td>
	  <td><literal>0</literal> 以上 <constant>UCHAR_MAX</constant> 以下の値を生成する。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.widen(ch)</code></td>
	  <td><type>CharT</type></td>
	  <td>指定した <type>char</type> のワイド版を <type>CharT</type> で返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.in_range(r1, r2, c)</code></td>
	  <td><type>bool</type></td>
	  <td>任意の文字 <varname>r1</varname> と <varname>r2</varname> について、<code>r1 &lt;= c &amp;&amp; c &lt;= r2</code> であれば <constant>true</constant> を返す。<code>r1 &lt;= r2</code> でなければならない。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.in_range_nocase(r1, r2, c)</code></td>
	  <td><type>bool</type></td>
	  <td>任意の文字 <varname>r1</varname> と <varname>r2</varname> について、<code>v.translate_nocase(d) == v.translate_case(c)</code> かつ <code>r1 &lt;= d &amp;&amp; d &lt;= r2</code> となる文字 <varname>d</varname> が存在すれば <constant>true</constant> を返す。<code> r1 &lt;= r2</code> でなければならない。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.translate(c)</code></td>
	  <td><type>X::char_type</type></td>
	  <td><varname>c</varname> と等価、つまり <code>v.translate(c) == v.translate(d)</code> となるような文字 <varname>d</varname> を返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.translate_nocase(c)</code></td>
	  <td><type>X::char_type</type></td>
	  <td>大文字小文字を区別せずに比較したとき <varname>c</varname> と等価、つまり <code>v.translate_nocase(c) == v.translate_nocase(C)</code> となるような文字 <varname>C</varname>。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.transform(F1, F2)</code></td>
	  <td><type>X::string_type</type></td>
	  <td>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスのソートキーを返す。文字シーケンス <code>[G1, G2)</code> が文字シーケンス <code>[H1, H2)</code> の前にソートされる場合に <code>v.transform(G1, G2) &lt; v.transform(H1, H2)</code> とならなければならない。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.transform_primary(F1, F2)</code></td>
	  <td><type>X::string_type</type></td>
	  <td>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスのソートキーを返す。大文字小文字を区別せずにソートして文字シーケンス <code>[G1, G2)</code> が文字シーケンス <code>[H1, H2)</code> の前に現れる場合に <code>v.transform_primary(G1, G2) &lt; v.transform_primary(H1, H2)</code> とならなければならない。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.lookup_classname(F1, F2)</code></td>
	  <td><type>X::char_class_type</type></td>
	  <td>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスを、<function>isctype</function> に渡せるビットマスク型に変換する。<methodname>lookup_classname</methodname> が返した値同士でビット和を取っても安全である。文字シーケンスがXが解釈できる文字クラス名でなければ <literal>0</literal> を返す。文字シーケンス内の大文字小文字の違いで戻り値が変化することはない。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.lookup_collatename(F1, F2)</code></td>
	  <td><type>X::string_type</type></td>
	  <td>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスが構成する照合要素を表す文字シーケンスを返す。文字シーケンスが正しい照合要素でなければ空文字列を返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.isctype(c, v.lookup_classname(F1, F2))</code></td>
	  <td><type>bool</type></td>
	  <td>文字 <varname>c</varname> が、イテレータ範囲 <code>[F1, F2)</code> が示す文字クラスのメンバであれば真を返す。それ以外は偽を返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.value(c, i)</code></td>
	  <td><type>int</type></td>
	  <td>文字 <varname>c</varname> が基数 <varname>i</varname> で有効な数字であれば、数字 <varname>c</varname> の基数 <varname>i</varname> での数値を返す。
	  <footnote>
	    <para><varname>i</varname>の値は8、10、16のいずれかである。</para>
	  </footnote>
	  それ以外の場合は <literal>-1</literal> を返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">u.imbue(loc)</code></td>
	  <td><type>X::locale_type</type></td>
	  <td>ロカール <varname>loc</varname> を <varname>u</varname> に指示する。<varname>u</varname> が直前まで使用していたロカールを返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">v.getloc()</code></td>
	  <td><type>X::locale_type</type></td>
	  <td><varname>v</varname> が使用中のロカールを返す。</td>
	</tr>
      </tbody>
    </table>
  </section>

  <acknowledgements>
    <title>謝辞</title>
    <para>
      この節は <link xlink:href="http://www.boost.org/libs/regex/">Boost.Regex</link> ドキュメントの同じページと、正規表現を標準ライブラリに追加することになった<link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm">草案</link>をもとに作成した。
    </para>
  </acknowledgements>
</section>
