<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>名前付き捕捉</title>

  <section>
    <title>概要</title>
    <para>
      正規表現が複雑になると、番号付き捕捉を取り扱うのが苦痛になる場合がある。左括弧の数を数えてどの捕捉に対応しているのか調べるのはつまらない仕事である。さらに面白くないのは、正規表現を編集するだけで捕捉に新しい番号が割り振られて古い番号を使っていた後方参照が無効になることである。
    </para>
    <para>
      他の正規表現エンジンでは、<emphasis>名前付き捕捉</emphasis>という機能でこの問題を解決している。この機能を使うと捕捉に名前を付けることができ、番号ではなく名前で捕捉を後方参照できる。xpressive も動的・静的正規表現の両方で名前付き捕捉をサポートする。
    </para>
  </section>

  <section>
    <title>動的名前付き捕捉</title>
    <para>
      動的正規表現については、xpressive は他の一般的な正規表現エンジンの名前付き捕捉の構文に従う。<phrase role="regex-pattern">(?P&lt;xxx&gt;...)</phrase> で名前つき捕捉を作成し、<phrase role="regex-pattern">(?P=xxx)</phrase> でこの捕捉を後方参照する。名前付き後方参照を作成し後方参照する例を以下に示す。
    </para>
    <programlisting language="C++">// 1 文字にマッチする "char" という名前付き捕捉を作成し、名前により後方参照する。
sregex rx = sregex::compile("(?P&lt;char&gt;.)(?P=char)");</programlisting>
    <para>
      上の正規表現は同じ文字が 2 つ続いた部分を検索する。
    </para>
    <para>
      名前付き捕捉を使ってマッチか検索を行った後、捕捉の名前を使って <classname linkend="match_results">match_results&lt;&gt;</classname> により名前付き捕捉にアクセスする。
    </para>
    <programlisting language="C++">std::string str("tweet");
sregex rx = sregex::compile("(?P&lt;char&gt;.)(?P=char)");
smatch what;
if(regex_search(str, what, rx))
{
    std::cout &lt;&lt; "char = " &lt;&lt; what["char"] &lt;&lt; std::endl;
}</programlisting>
    <para>
      上のコードは以下を表示する。
    </para>
    <screen>char = e</screen>
    <para>
      名前付き捕捉を置換文字列から後方参照することも可能である。<phrase role="regex-pattern">\g&lt;xxx&gt;</phrase> という構文である。文字列置換において名前付き捕捉を使用する例を以下に示す。
    </para>
    <programlisting language="C++">std::string str("tweet");
sregex rx = sregex::compile("(?P&lt;char&gt;.)(?P=char)");
str = regex_replace(str, rx, "**\\g&lt;char&gt;**", regex_constants::format_perl);
std::cout &lt;&lt; str &lt;&lt; std::endl;</programlisting>
    <para>
      名前付き捕捉を使用するには <constant>format_perl</constant> を指定しなければならないことに注意していただきたい。<phrase role="regex-pattern">\g&lt;xxx&gt;</phrase> 構文を解釈するのは Perl の構文だけである。上のコードは以下を表示する。
    </para>
    <screen>tw**e**t</screen>
  </section>

  <section>
    <title>静的名前付き捕捉</title>
    <para>
      静的正規表現を使う場合は、名前付き捕捉の作成と使用はより簡単である。<classname linkend="mark_tag">mark_tag</classname> 型を使って <constant>s1</constant> 、<constant>s2</constant> のような変数を作成するが、より意味のある名前を与えることができる。静的表現を使うと上の例は以下のようになる。
      <footnote>
	<para>
	  訳注　リファレンスの項にあるとおり、<classname>mark_tag</classname> の初期化に使用する整数は正規表現内で一意でなければなりません。
	</para>
      </footnote>
    </para>
    <programlisting language="C++">mark_tag char_(1); // char_ は s1 の別名となる
sregex rx = (char_= _) &gt;&gt; char_;</programlisting>
    <para>
      マッチを行った後、<classname>mark_tag</classname> を <classname role="match_results">match_results&lt;&gt;</classname> の添字にして名前付き捕捉にアクセスする。
    </para>
    <programlisting language="C++">std::string str("tweet");
mark_tag char_(1);
sregex rx = (char_= _) &gt;&gt; char_;
smatch what;
if(regex_search(str, what, rx))
{
    std::cout &lt;&lt; what[char_] &lt;&lt; std::endl;
}</programlisting>
    <para>
      上のコードは以下を表示する。
    </para>
    <screen>char = e</screen>
    <para>
      <function role="regex_replace">regex_replace()</function> を使って文字列置換を行う場合、以下のように名前付き捕捉を使用して<emphasis>書式化式</emphasis>を作成できる。
    </para>
    <programlisting language="C++">std::string str("tweet");
mark_tag char_(1);
sregex rx = (char_= _) &gt;&gt; char_;
str = regex_replace(str, rx, "**" + char_ + "**");
std::cout &lt;&lt; str &lt;&lt; std::endl;</programlisting>
    <para>
      上のコードは以下を表示する。
    </para>
    <screen>tw**e**t</screen>
    <note>
      <para>
	書式化式を使用するには <filename>&lt;boost/xpressive/regex_actions.hpp&gt;</filename> をインクルードしなければならない。
      </para>
    </note>
  </section>
</section>
