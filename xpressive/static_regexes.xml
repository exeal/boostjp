<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>静的正規表現</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>
  <section>
    <title>概要</title>
    <para>
      xpressive が他の C/C++ 正規表現ライブラリと一線を画すのは、C++ の式を用いて正規表現を記述する機能による。xpressive は演算子の多重定義と<emphasis>式テンプレート</emphasis>という技術を使って、パターンマッチのための小言語を C++ に組み込むことでこれを実現している。これら「静的正規表現」には文字列ベースのものに比較して多くの利点がある。特に以下の点を挙げておく。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  コンパイル時に構文がチェックされる。実行時に構文エラーで失敗することがない。
	</para>
      </listitem>
      <listitem>
	<para>
	  他の C++ データ、コード、他の正規表現を自然に参照できる。正規表現の外部での文法構築、および正規表現マッチの一部として実行されるユーザー定義アクションの束縛が簡単になる。
	</para>
      </listitem>
      <listitem>
	<para>
	  静的束縛され、インライン化と最適化が促進される。静的正規表現は状態表、仮想関数、バイトコード、関数ポインタによる呼び出しといったコンパイル時に解決できないものを必要としない。
	</para>
      </listitem>
      <listitem>
	<para>
	  検索対象が文字列に限定されない。例えば、数値配列からパターンを探索する静的正規表現を宣言できる。
	</para>
      </listitem>
    </itemizedlist>
    <para>
      静的正規表現の組み立ては C++ の式を使うので、合法な C++ の式規則の制約を受ける。残念ながら、「伝統的な」正規表現構文をすべてきれいに C++ に対応させられるわけではない。そういうわけで、無理な対応は試みず C++ として合法な構文を用意する。
    </para>
  </section>

  <section>
    <title>構築と代入</title>
    <para>
      静的正規表現の作成は、<classname linkend="basic_regex">basic_regex&lt;&gt;</classname> 型のオブジェクトへの代入により行う。例えば、以下は <classname>std::string</classname> 型のオブジェクトに対してパターンを探索する正規表現を定義する。
    </para>
    <programlisting language="C++">sregex re = '$' &gt;&gt; +_d &gt;&gt; '.' &gt;&gt; _d &gt;&gt; _d;</programlisting>
    <para>
      代入の動作も似たようなものである。
    </para>
  </section>

  <section>
    <title>文字と文字列リテラル</title>
    <para>
      静的正規表現において、文字と文字列リテラルはそれ自身にマッチする。例えば上の正規表現において <code language="C++">'$'</code> と <code language="C++">'.'</code> は、それぞれ文字 <phrase role="regex-input">'$'</phrase> 、<phrase role="regex-input">'.'</phrase> にマッチする。Perlにおいて <phrase role="regex-pattern">$</phrase> と <phrase role="regex-pattern">.</phrase> がメタ文字であるからといって混乱しないでいただきたい。xpressive ではリテラルは常にそれ自身を表す。
    </para>
    <para>
      静的正規表現でリテラルを使用する場合は、少なくとも片方のオペランドはリテラル以外であることに注意しなければならない。例えば以下は正しい正規表現では<emphasis>ない</emphasis>。
    </para>
    <programlisting language="C++">sregex re1 = 'a' &gt;&gt; 'b';         // エラー！
sregex re2 = +'a';               // エラー！</programlisting>
    <para>
      二項 <code language="C++">&gt;&gt;</code> 演算子の2つのオペランドが両方ともリテラル、また単項 <code language="C++">+</code> 演算子のオペランドもリテラルになっている。よってこれらの文は組み込みの C++ 二項右シフト、単項プラス演算子をそれぞれ呼び出す。これは期待した動作ではない。演算子の多重定義が機能するには、少なくとも 1 つのオペランドがユーザー定義型でなければならない。xpressive の <function>as_xpr()</function> ヘルパ関数を使うと式を正規表現の世界に「引き込み」、演算子の多重定義に正しい演算子を見つけるよう強制できる。上の 2 つは次のように書くべきだ。
    </para>
    <programlisting language="C++">sregex re1 = as_xpr('a') &gt;&gt; 'b'; // OK
sregex re2 = +as_xpr('a');       // OK</programlisting>
  </section>

  <section>
    <title>結合と選択</title>
    <para>
      すでに見てきたように、静的正規表現における部分式は結合演算子 <code language="C++">&gt;&gt;</code> で分離されていなければならない。この演算子は「～の後に」などと読み替えるとよい。
      <footnote>
	<para>
	  訳注　原文は <foreignphrase xml:lang="ja">“followed by”</foreignphrase>。無理に日本語にしないほうがいいかもしれません…。
	</para>
      </footnote>
    </para>
    <programlisting language="C++">// 後ろに数字が続く 'a' にマッチ
sregex re = 'a' &gt;&gt; _d;</programlisting>
    <para>
      選択（分岐）は <code language="C++">|</code> 演算子を使用する。Perl と同様の動作をする。この演算子は「または」などと読み替えるとよい。例えば、
    </para>
    <programlisting language="C++">// 1 文字以上の数字、または単語構成文字にマッチ
sregex re = +( _d | _w );</programlisting>
  </section>

  <section>
    <title>グループ化と捕捉</title>
    <para>Perl では括弧 <code language="Perl">()</code> は特別な意味をもつ。これらはグループ化を行うが、<code language="C++">$1</code> や <code language="C++">$2</code> といった後方参照を作成するという副作用がある。C++ では括弧を多重定義して副作用を与えることはできない。そこで同じ効果を得るために <constant>s1</constant> や <constant>s2</constant> という特殊なトークンを使用する。これらに代入を行うことで後方参照を作成する。後方参照は Perl の <code language="Perl">\1</code> や <code language="Perl">\2</code> のような使い方で式中で使用できる。例えば以下の HTML タグのマッチを探索する正規表現を考えよう。</para>
    <programlisting language="C++">"&lt;(\\w+)&gt;.*?&lt;/\\1&gt;"</programlisting>
    <para>
      静的正規表現では、次のようになる。
    </para>
    <programlisting language="C++">'&lt;' &gt;&gt; (s1= +_w) &gt;&gt; '&gt;' &gt;&gt; -*_ &gt;&gt; "&lt;/" &gt;&gt; s1 &gt;&gt; '&gt;'</programlisting>
    <para>
      <constant>s1</constant> への代入により後方参照を捕捉し、パターンの後ろのほうでマッチする終了タグを探索するのにs1を使っていることに注意していただきたい。
    </para>
    <tip>
      <title>後方参照を捕捉せずにグループ化けを行う</title>
      <para>
	xpressive では、後方参照を捕捉せずにグループ化を行うには <constant>s1</constant> なしで <code language="C++">()</code> を使うだけでよい。これは Perl の捕捉なしのグループ化構造 <phrase role="regex-pattern">(?:)</phrase> と等価である。
      </para>
    </tip>
  </section>

  <section>
    <title>大文字小文字の区別と国際化</title>
    <para>
      Perl ではパターン修飾子 <phrase role="regex-pattern">(?i:)</phrase> を使用することで正規表現が大文字小文字を区別しなくなる。xpressive でも <function>icase</function> という大文字小文字を区別しないパターン修飾子がある。以下のように使用する。
    </para>
    <programlisting language="C++">sregex re = "this" &gt;&gt; icase( "that" );</programlisting>
    <para>
      この正規表現では、<phrase role="regex-pattern">this</phrase> は大文字小文字を区別するが <phrase role="regex-pattern">that</phrase> は大文字小文字を無視してマッチを行う。
    </para>
    <para>
      大文字小文字を区別しない正規表現で問題になるのが国際化である。大文字小文字を区別しない文字の比較をどのように行うべきだろうか？ また、多くの文字クラスはロカール（<foreignphrase xml:lang="ja">locale</foreignphrase>）依存である。どの文字が <constant>digit</constant> にマッチし、どの文字が <constant>alpha</constant> にマッチするだろうか？ その答えは正規表現オブジェクトが使用する <classname>std::locale</classname> オブジェクトに依存する。既定ではすべての正規表現オブジェクトはグローバルなロカールを使用する。既定をオーバーライドするには、以下のように <function>imbue()</function> パターン修飾子を使用する。
    </para>
    <programlisting language="C++">std::locale my_locale = /* std::locale オブジェクトを初期化する */;
sregex re = imbue( my_locale )( +alpha &gt;&gt; +digit );</programlisting>
    <para>
      この正規表現は <constant>alpha</constant> と <constant>digit</constant> を <varname>my_locale</varname> にしたがって処理する。正規表現の振る舞いをカスタマイズする方法については<link linkend="localization_and_regex_traits">地域化と正規表現の特性</link>の節を見よ。
    </para>
  </section>

  <section>
    <title>静的 xpressive 構文のカンニングペーパー</title>
    <para>
      一般的な正規表現の構造と静的 xpressive の対応を以下の表に示す。
    </para>
    <table>
      <caption>Perl の構文と静的 xpressive の構文</caption>
      <thead>
	<tr>
	  <td>Perl</td>
	  <td>静的 xpressive</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-pattern">.</phrase></td>
	  <td><code language="C++">_</code></td>
	  <td>任意の 1 文字（Perl の <code language="Perl">/s</code> 修飾子が使われているとして）。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">ab</phrase></td>
	  <td><code language="C++">a &gt;&gt; b</code></td>
	  <td><phrase role="regex-pattern">a</phrase> および <phrase role="regex-pattern">b</phrase> 部分式の結合。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a|b</phrase></td>
	  <td><code language="C++">a | b</code></td>
	  <td><phrase role="regex-pattern">a</phrase> および <phrase role="regex-pattern">b</phrase> 部分式の選択。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(a)</phrase></td>
	  <td><code language="C++">(s1 = a)</code></td>
	  <td>後方参照のグループ化と捕捉。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?:a)</phrase></td>
	  <td><code language="C++">(a)</code></td>
	  <td>後方参照の捕捉を伴わないグループ化。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\1</phrase></td>
	  <td><code language="C++">s1</code></td>
	  <td>以前捕捉した後方参照。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a*</phrase></td>
	  <td><code language="C++">*a</code></td>
	  <td>0 回以上の貪欲な繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a+</phrase></td>
	  <td><code language="C++">+a</code></td>
	  <td>1 回以上の貪欲な繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a?</phrase></td>
	  <td><code language="C++">!a</code></td>
	  <td>0 回か 1 回の貪欲な繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a{n,m}</phrase></td>
	  <td><code language="C++">repeat&lt;n,m&gt;(a)</code></td>
	  <td><varname>n</varname> 回以上 <varname>m</varname> 回以下の貪欲な繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a*?</phrase></td>
	  <td><code language="C++">-*a</code></td>
	  <td>0 回以上の貪欲でない繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a+?</phrase></td>
	  <td><code language="C++">-+a</code></td>
	  <td>1 回以上の貪欲でない繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a??</phrase></td>
	  <td><code language="C++">-!a</code></td>
	  <td>0 回か 1 回の貪欲でない繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">a{n,m}?</phrase></td>
	  <td><code language="C++">-repeat&lt;n,m&gt;(a)</code></td>
	  <td><varname>n</varname> 回以上 <varname>m</varname> 回以下の貪欲でない繰り返し。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">^</phrase></td>
	  <td><code language="C++">bos</code></td>
	  <td>シーケンスの先頭を表す表明。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$</phrase></td>
	  <td><code language="C++">eos</code></td>
	  <td>シーケンスの終端を表す表明。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\b</phrase></td>
	  <td><code language="C++">_b</code></td>
	  <td>単語境界の表明。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\B</phrase></td>
	  <td><code language="C++">~_b</code></td>
	  <td>単語境界以外の表明。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\n</phrase></td>
	  <td><code language="C++">_n</code></td>
	  <td>リテラルの改行。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">.</phrase></td>
	  <td><code language="C++">~_n</code></td>
	  <td>リテラルの改行以外の任意の 1 文字（Perl の <code language="Perl">/s</code> 修飾子が使われていないとして）。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\r?\n|\r</phrase></td>
	  <td><code language="C++">_ln</code></td>
	  <td>論理改行。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[^\r\n]</phrase></td>
	  <td><code language="C++">~_ln</code></td>
	  <td>論理改行以外の任意の 1 文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\w</phrase></td>
	  <td><code language="C++">_w</code></td>
	  <td>単語構成文字。<code language="C++">set[alnum | '_']</code> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\W</phrase></td>
	  <td><code language="C++">~_w</code></td>
	  <td>単語構成文字以外。<code language="C++">~set[alnum | '_']</code> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\d</phrase></td>
	  <td><code language="C++">_d</code></td>
	  <td>数字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\D</phrase></td>
	  <td><code language="C++">~_d</code></td>
	  <td>数字以外。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\s</phrase></td>
	  <td><code language="C++">_s</code></td>
	  <td>空白類文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">\S</phrase></td>
	  <td><code language="C++">~_s</code></td>
	  <td>空白類文字以外。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:alnum:]</phrase></td>
	  <td><code language="C++">alnum</code></td>
	  <td>アルファベットおよび数値文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:alpha:]</phrase></td>
	  <td><code language="C++">alpha</code></td>
	  <td>アルファベット文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:blank:]</phrase></td>
	  <td><code language="C++">blank</code></td>
	  <td>水平空白文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:cntrl:]</phrase></td>
	  <td><code language="C++">cntrl</code></td>
	  <td>制御文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:digit:]</phrase></td>
	  <td><code language="C++">digit</code></td>
	  <td>数字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:graph:]</phrase></td>
	  <td><code language="C++">graph</code></td>
	  <td>グラフィカルな文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:lower:]</phrase></td>
	  <td><code language="C++">lower</code></td>
	  <td>小文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:print:]</phrase></td>
	  <td><code language="C++">print</code></td>
	  <td>印字可能な文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:punct:]</phrase></td>
	  <td><code language="C++">punct</code></td>
	  <td>区切り文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:space:]</phrase></td>
	  <td><code language="C++">space</code></td>
	  <td>空白類文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:upper:]</phrase></td>
	  <td><code language="C++">upper</code></td>
	  <td>大文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[:xdigit:]</phrase></td>
	  <td><code language="C++">xdigit</code></td>
	  <td>16 進数字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[0-9]</phrase></td>
	  <td><code language="C++">range('0','9')</code></td>
	  <td><code>'0'</code> から <code>'9'</code> の範囲の文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[abc]</phrase></td>
	  <td><code language="C++">as_xpr('a') | 'b' | 'c'</code></td>
	  <td><code>'a'</code>、<code>'b'</code>、または <code>'c'</code> のいずれかの文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[abc]</phrase></td>
	  <td><code language="C++">(set= 'a','b','c')</code></td>
	  <td>同上。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[0-9abc]</phrase></td>
	  <td><code language="C++">set[ range('0','9') | 'a' | 'b' | 'c' ]</code></td>
	  <td><code>'a'</code>、<code>'b'</code>、または <code>'c'</code> のいずれか、または <code>'0'</code> から <code>'9'</code> の範囲の文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[0-9abc]</phrase></td>
	  <td><code language="C++">set[ range('0','9') | (set= 'a','b','c') ]</code></td>
	  <td>同上。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">[^abc]</phrase></td>
	  <td><code language="C++">~(set= 'a','b','c')</code></td>
	  <td><code>'a'</code>、<code>'b'</code>、または <code>'c'</code> のいずれでもない文字。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?i:<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">icase(<replaceable>stuff</replaceable>)</code></td>
	  <td><replaceable>stuff</replaceable> の大文字小文字を区別しないマッチを行う。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?&gt;<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">keep(<replaceable>stuff</replaceable>)</code></td>
	  <td>独立部分式。<replaceable>stuff</replaceable> のマッチを行いバックトラックを切る。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?=<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">before(<replaceable>stuff</replaceable>)</code></td>
	  <td>肯定先読み表明。<replaceable>stuff</replaceable> の前にマッチするが <replaceable>stuff</replaceable> 自身はマッチに含まない。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?!<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">~before(<replaceable>stuff</replaceable>)</code></td>
	  <td>否定先読み表明。<replaceable>stuff</replaceable> の前以外にマッチ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?&lt;=<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">after(<replaceable>stuff</replaceable>)</code></td>
	  <td>肯定後読み表明。<replaceable>stuff</replaceable> の後にマッチするが <replaceable>stuff</replaceable> 自身はマッチに含まない（<replaceable>stuff</replaceable> は固定長でなければならない）。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?&lt;!<replaceable>stuff</replaceable>)</phrase></td>
	  <td><code language="C++">~after(<replaceable>stuff</replaceable>)</code></td>
	  <td>否定後読み表明。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?P&lt;<replaceable>name</replaceable>&gt;<replaceable>stuff</replaceable>)</phrase></td>
	  <td>
	    <programlisting language="C++">mark_tag <replaceable>name</replaceable>(<replaceable>n</replaceable>);
…
(<replaceable>name</replaceable>= <replaceable>stuff</replaceable>)</programlisting>
	  </td>
	  <td>名前付き捕捉を作成。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?P=<replaceable>name</replaceable>)</phrase></td>
	  <td>
	    <programlisting language="C++">mark_tag <replaceable>name</replaceable>(<replaceable>n</replaceable>);
…
<replaceable>name</replaceable></programlisting>
	  </td>
	  <td>作成した名前付き捕捉への後方参照。</td>
	</tr>
      </tbody>
    </table>
  </section>
</article>
