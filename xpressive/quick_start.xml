<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>クイックスタート</title>

  <para>
    xpressive で何かするのに知っておくべきことはそう多くない。xpressive が提供する型とアルゴリズムの 5 セント旅行に出かけよう。
  </para>

  <table>
    <caption>xpressive のツールボックス</caption>
    <thead>
      <tr>
	<td>ツール</td>
	<td>説明</td>
      </tr>
    </thead>
    <tbody>
      <tr>
	<td><classname linkend="basic_regex">basic_regex&lt;&gt;</classname></td>
	<td>コンパイル済みの正規表現を保持する。<classname linkend="basic_regex">basic_regex&lt;&gt;</classname> は xpressive で最も重要な型である。xpressive で何かする場合は <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> 型のオブジェクトを作成することから始める。</td>
      </tr>
      <tr>
	<td><classname linkend="match_results">match_results&lt;&gt;</classname> 、<classname linkend="sub_match">sub_match&lt;&gt;</classname></td>
	<td><classname linkend="match_results">match_results&lt;&gt;</classname> は、<function linkend="regex_match">regex_match()</function> や <function linkend="regex_search">regex_search()</function> 操作の結果を保持する。<classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトのベクタのように振舞う。個別の <classname linkend="sub_match">sub_match</classname> オブジェクトはマーク済み部分式（Perlにおける後方参照）を保持する。基本的にはマーク済み部分式の開始と終了を表すイテレータの組にすぎない。</td>
      </tr>
      <tr>
	<td><function linkend="regex_match">regex_match()</function></td>
	<td>文字列が正規表現にマッチするか調べる。<function linkend="regex_match">regex_match()</function> が成功するのは、文字列全体の先頭から終端までが正規表現にマッチする場合である。<function linkend="regex_match">regex_match()</function> に <classname linkend="match_results">match_results&lt;&gt;</classname> を与えると、見つかったマーク済み部分式が書き込まれる。</td>
      </tr>
      <tr>
	<td><function linkend="regex_search">regex_search()</function></td>
	<td>正規表現にマッチする部分文字列を文字列内で検索する。<function linkend="regex_search">regex_search()</function> は文字列内のあらゆる位置でマッチを検索する。文字列の先頭から開始し、マッチを見つけるか文字列内をすべて走査すると終了する。<function linkend="regex_match">regex_match()</function> と同様、<function linkend="regex_search">regex_search()</function> に <classname linkend="match_results">match_results&lt;&gt;</classname> を与えると、見つかったマーク済み部分式が書き込まれる。</td>
      </tr>
      <tr>
	<td><function linkend="regex_replace">regex_replace()</function></td>
	<td>入力文字列、正規表現、置換文字列を与えると、<function linkend="regex_replace">regex_replace()</function> は入力文字列内の正規表現にマッチした部分を置換文字列で置換した新しい文字列を構築する。置換文字列にはマーク済み部分式への参照を含めることができる。</td>
      </tr>
      <tr>
	<td><classname linkend="regex_iterator">regex_iterator&lt;&gt;</classname></td>
	<td>文字列内の正規表現にマッチする位置を見つける STL 互換のイテレータ。<classname linkend="regex_iterator">regex_iterator&lt;&gt;</classname> を参照はがしすると <classname linkend="match_results">match_results&lt;&gt;</classname> が返る。<classname linkend="regex_iterator">regex_iterator&lt;&gt;</classname> をインクリメントすると次のマッチを検索する。</td>
      </tr>
      <tr>
	<td><classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname></td>
	<td><classname linkend="regex_iterator">regex_iterator&lt;&gt;</classname> と似ているが、<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を参照はがしすると文字列が返る。既定では正規表現にマッチした部分文字列全体が返るが、一度にいずれかあるいはすべてのマーク済み部分式を 1 つずつ返すように設定することもできる。また、文字列の正規表現にマッチ<emphasis>しなかった</emphasis>部分を返すよう設定することもできる。</td>
      </tr>
      <tr>
	<td><classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname></td>
	<td><classname linkend="basic_regex">basic_regex&lt;&gt;</classname> オブジェクトのファクトリ。文字列を正規表現に「コンパイル」する。<classname linkend="basic_regex">basic_regex&lt;&gt;</classname> クラスは内部で <classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を使用するファクトリメソッドをもっているので、大抵の場合<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を直接取り扱う必要はない。しかし、<classname linkend="basic_regex">basic_regex&lt;&gt;</classname> オブジェクトを異なる <classname>std::locale</classname> で作成するなど変わったことをする必要がある場合は、<classname linkend="regex_compiler">regex_compiler&lt;&gt;</classname> を明示的に使用しなければならない。</td>
      </tr>
    </tbody>
  </table>

  <para>
    xpressive が提供するツール群について少しは分かったと思う。次の 2 つの質問に答えれば正しいツールを選択できるだろう。
  </para>

  <orderedlist>
    <listitem>
      <para>
	データを走査するのに使う<emphasis>イテレータ</emphasis>の型は何か。
      </para>
    </listitem>
    <listitem>
      <para>
	データを使って何を<emphasis>したい</emphasis>のか。
      </para>
    </listitem>
  </orderedlist>

  <section>
    <title>イテレータの型</title>
    <para>
      xpressive において、ほとんどのクラスはイテレータ型を引数にもつテンプレートである。正しい型を簡単に選択できるように xpressive は共通の typedef をいくつか定義している。以下の表を見ればイテレータ型から正しい型が分かる。
    </para>

    <table>
      <caption>xpressive の typedef とイテレータ型の対応</caption>
      <thead>
	<tr>
	  <td></td>
	  <td>std::string::const_iterator</td>
	  <td>char const *</td>
	  <td>std::wstring::const_iterator</td>
	  <td>wchar_t const *</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><classname linkend="basic_regex">basic_regex</classname></td>
	  <td><type>sregex</type></td>
	  <td><type>cregex</type></td>
	  <td><type>wsregex</type></td>
	  <td><type>wcregex</type></td>
	</tr>
	<tr>
	  <td><classname linkend="match_results">match_results</classname></td>
	  <td><type>smatch</type></td>
	  <td><type>cmatch</type></td>
	  <td><type>wsmatch</type></td>
	  <td><type>wcmatch</type></td>
	</tr>
	<tr>
	  <td><classname linkend="regex_compiler">regex_compiler</classname></td>
	  <td><type>sregex_compiler</type></td>
	  <td><type>cregex_compiler</type></td>
	  <td><type>wsregex_compiler</type></td>
	  <td><type>wcregex_compiler</type></td>
	</tr>
	<tr>
	  <td><classname linkend="regex_iterator">regex_iterator</classname></td>
	  <td><type>sregex_iterator</type></td>
	  <td><type>cregex_iterator</type></td>
	  <td><type>wsregex_iterator</type></td>
	  <td><type>wcregex_iterator</type></td>
	</tr>
	<tr>
	  <td><classname linkend="regex_token_iterator">regex_token_iterator</classname></td>
	  <td><type>sregex_token_iterator</type></td>
	  <td><type>cregex_token_iterator</type></td>
	  <td><type>wsregex_token_iterator</type></td>
	  <td><type>wcregex_token_iterator</type></td>
	</tr>
      </tbody>
    </table>

    <para>
      機械的な名前付け規約に注意していただきたい。これらの型の多くは一緒に使用するため、名前付け規約は一貫性という点で助けになる。例えば <type>sregex</type> があれば一緒に使うのは <type>smatch</type> という具合である。
    </para>
    <para>
      これら 4 つのイテレータ型以外については、テンプレートを直接使用しイテレータ型を指定するとよい。
    </para>
  </section>

  <section>
    <title>タスク</title>
    <para>
      パターンを使うのは 1 度か、複数回か。検索か置換か。xpressive はこれらをすべてカバーし、他にも多くの機能がある。以下が早見表である。
    </para>

    <table>
      <caption>処理とツール</caption>
      <thead>
	<tr>
	  <td>次を行うには…</td>
	  <td>以下を使用せよ</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="see_if_a_whole_string_matches_a_regex">文字列全体が正規表現にマッチするか調べる</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_match">regex_match()</function> アルゴリズム</td>
	</tr>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="see_if_a_string_contains_a_sub_string_that_matches_a_regex">文字列が正規表現にマッチする部分文字列を含むか調べる</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_search">regex_search()</function> アルゴリズム</td>
	</tr>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="replace_all_sub_strings_that_match_a_regex">正規表現にマッチする部分文字列をすべて置換する</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_replace">regex_replace()</function> アルゴリズム</td>
	</tr>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="find_all_the_sub_strings_that_match_a_regex_and_step_through_them_one_at_a_time">正規表現にマッチする部分文字列をすべて検索し、1 つずつたどる</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_iterator">regex_iterator&lt;&gt;</function> クラス</td>
	</tr>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="split_a_string_into_tokens_that_each_match_a_regex">それぞれが正規表現にマッチするトークンに文字列を分割する</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</function> クラス</td>
	</tr>
	<tr>
	  <td>
	    <tip>
	      <para>
		<link linkend="split_a_string_using_a_regex_as_a_delimiter">正規表現を区切りとして文字列を分割する</link>
	      </para>
	    </tip>
	  </td>
	  <td><function linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</function> クラス</td>
	</tr>
      </tbody>
    </table>

    <para>
      これらのアルゴリズムとクラスの厄介な詳細はリファレンスの節で述べる。
    </para>

    <tip>
      <para>
	上の表の各処理をクリックすると、xpressive を使った完全なプログラム例が表示される。
      </para>
    </tip>
  </section>
</section>
