<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>文字列の置換</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>
  <para>
    正規表現が威力を発揮するのはテキスト検索のときだけではない。テキストの<emphasis>操作</emphasis>においても有効である。最もありふれたテキスト操作の 1 つが、「検索して置換」である。xpressive は検索と置換のために <function linkend="regex_replace">regex_replace()</function> アルゴリズムを提供する。
  </para>

  <section>
    <title>regex_replace()</title>
    <para>
      <function linkend="regex_replace">regex_replace()</function> を用いた「検索して置換」処理は簡単である。必要なのは入力シーケンス、正規表現オブジェクト、および書式化文字列か書式化オブジェクトだけである。<function linkend="regex_replace">regex_replace()</function> には複数のバージョンがあり、入力シーケンスを <classname>std::string</classname> のような双方向コンテナとして受け付けて結果を同じ型の新しいコンテナで返すものや、入力を null 終端文字列で受け付けて <classname>std::string</classname> を返すもの、イテレータの組で受け付けて結果を出力イテレータに書き込むものがある。置換は書式化シーケンスを含む文字列か書式化オブジェクトで指定する。文字列ベースの置換について、単純な使用例を以下に示す。
    </para>
    <programlisting language="C++">std::string input("This is his face");
sregex re = as_xpr("his");                // "his" をすべて検索し、...
std::string format("her");                // ... "her" で置換する

// regex_replace() の対文字列版を使用
std::string output = regex_replace( input, re, format );
std::cout &lt;&lt; output &lt;&lt; '\n';

// regex_replace() の対イテレータ版を使用
std::ostream_iterator&lt; char &gt; out_iter( std::cout );
regex_replace( out_iter, input.begin(), input.end(), re, format );</programlisting>
    <para>
      上のプログラムは以下を印字する。
    </para>
    <screen>Ther is her face
Ther is her face</screen>
    <para>
      <code language="C++">"his"</code> が<emphasis>すべて</emphasis> <code language="C++">"her"</code> に置換されることに注意していただきたい。
    </para>
    <para>
      <function linkend="regex_replace">regex_replace()</function> の使い方に関する完全なプログラム例は<link linkend="examples.replace_all_sub_strings_that_match_a_regex">ここ</link>にある。利用可能な多重定義の完全なリストは <function linkend="regex_replace">regex_replace()</function> のリファレンスを見よ。
    </para>
  </section>

  <section>
    <title>置換のオプション</title>
    <para>
      <function linkend="regex_replace">regex_replace()</function> アルゴリズムは、省略可能なビットマスク引数により書式化を制御する。使用可能なビットマスク値を以下に示す。
    </para>
    <table>
      <caption>書式化フラグ</caption>
      <thead>
	<tr>
	  <td>フラグ</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>format_default</constant></td>
	  <td>ECMA-262 の書式化シーケンスを使用する（後述）。</td>
	</tr>
	<tr>
	  <td><constant>format_first_only</constant></td>
	  <td>すべてのマッチの中で最初のものだけを置換する。</td>
	</tr>
	<tr>
	  <td><constant>format_no_copy</constant></td>
	  <td>入力シーケンス内の、正規表現にマッチしなかった部分を出力シーケンスにコピーしない。</td>
	</tr>
	<tr>
	  <td><constant>format_literal</constant></td>
	  <td>書式化文字列をリテラル（即値）として扱う。エスケープシーケンスを一切解釈しなくなる。</td>
	</tr>
	<tr>
	  <td><constant>format_perl</constant></td>
	  <td>Perl の書式化シーケンスを使用する（後述）。</td>
	</tr>
	<tr>
	  <td><constant>format_sed</constant></td>
	  <td>sed の書式化シーケンスを使用する（後述）。</td>
	</tr>
	<tr>
	  <td><constant>format_all</constant></td>
	  <td>Perl の書式化シーケンス、および Boost 固有の書式化シーケンスを使用する。</td>
	</tr>
      </tbody>
    </table>
    <para>
      これらのフラグは <code role="namespace">xpressive::regex_constants</code> 名前空間内にある。置換の引数が文字列ではなく関数オブジェクトである場合は、<constant>format_literal</constant> 、<constant>format_perl</constant> 、<constant>format_sed</constant> および <constant>format_all</constant> は無視される。
    </para>
  </section>

  <section>
    <title>ECMA-262 書式化シーケンス</title>
    <para>
      上記のフラグを指定せずに書式化文字列を渡した場合は、ECMAScript の標準である ECMA-262 の定義が使われる。ECMA-262 モードで使用するエスケープシーケンスを以下に示す。
    </para>
    <table>
      <caption>書式化エスケープシーケンス</caption>
      <thead>
	<tr>
	  <td>エスケープシーケンス</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-substitution">$1</phrase> 、<phrase role="regex-substitution">$2</phrase> 、…</td>
	  <td>部分マッチ</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$&amp;</phrase></td>
	  <td>マッチ全体</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$`</phrase></td>
	  <td>マッチの前</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$'</phrase></td>
	  <td>マッチの後</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$$</phrase></td>
	  <td>リテラルの文字 <code language="C++">'$'</code></td>
	</tr>
      </tbody>
    </table>
    <para>
      その他、<phrase role="regex-substitution">$</phrase> で始まるシーケンスは、単純にそれ自身を表す。例えば書式化文字列が <phrase role="regex-substitution">$a</phrase> であれば、出力シーケンスに「$a」が挿入される。
    </para>
  </section>

  <section>
    <title>sed 書式化シーケンス</title>
    <para>
      <function linkend="regex_replace">regex_replace()</function> に <constant>format_sed</constant> フラグを指定した場合に使用するエスケープシーケンスを以下に示す。
    </para>
    <table>
      <caption>sed 書式化エスケープシーケンス</caption>
      <thead>
	<tr>
	  <td>エスケープシーケンス</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-substitution">\1</phrase> 、<phrase role="regex-substitution">\2</phrase> 、…</td>
	  <td>部分マッチ</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">&amp;</phrase></td>
	  <td>マッチ全体</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\a</phrase></td>
	  <td>リテラルの <code language="C++">'\a'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\e</phrase></td>
	  <td>リテラルの <code language="C++">char_type(27)</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\f</phrase></td>
	  <td>リテラルの <code language="C++">'\f'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\n</phrase></td>
	  <td>リテラルの <code language="C++">'\n'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\r</phrase></td>
	  <td>リテラルの <code language="C++">'\r'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\t</phrase></td>
	  <td>リテラルの <code language="C++">'\t'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\v</phrase></td>
	  <td>リテラルの <code language="C++">'\v'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\x<replaceable>FF</replaceable></phrase></td>
	  <td>リテラルの <code language="C++">char_type(0x<replaceable>FF</replaceable>)</code>。<code language="C++"><replaceable>F</replaceable></code> は 16 進数字</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\x{FFFF}</phrase></td>
	  <td>リテラルの <code language="C++">char_type(0x<replaceable>FFFF</replaceable>)</code>。<code language="C++"><replaceable>F</replaceable></code> は 16 進数字</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\c<replaceable>X</replaceable></phrase></td>
	  <td>制御文字 <code language="C++"><replaceable>X</replaceable></code></td>
	</tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>Perl 書式化シーケンス</title>
    <para>
      <function linkend="regex_replace">regex_replace()</function> に <constant>format_perl</constant> フラグを指定した場合に使用するエスケープシーケンスを以下に示す。
    </para>
    <table>
      <caption>Perl 書式化エスケープシーケンス</caption>
      <thead>
	<tr>
	  <td>エスケープシーケンス</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-substitution">$1</phrase> 、<phrase role="regex-substitution">$2</phrase> 、…</td>
	  <td>部分マッチ</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$&amp;</phrase></td>
	  <td>マッチ全体</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$`</phrase></td>
	  <td>マッチの前</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$'</phrase></td>
	  <td>マッチの後</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">$$</phrase></td>
	  <td>リテラルの <code language="C++">'$'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\a</phrase></td>
	  <td>リテラルの <code language="C++">'\a'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\e</phrase></td>
	  <td>リテラルの <code language="C++">char_type(27)</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\f</phrase></td>
	  <td>リテラルの <code language="C++">'\f'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\n</phrase></td>
	  <td>リテラルの <code language="C++">'\n'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\r</phrase></td>
	  <td>リテラルの <code language="C++">'\r'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\t</phrase></td>
	  <td>リテラルの <code language="C++">'\t'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\v</phrase></td>
	  <td>リテラルの <code language="C++">'\v'</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\x<replaceable>FF</replaceable></phrase></td>
	  <td>リテラルの <code language="C++">char_type(0x<replaceable>FF</replaceable>)</code>。<code language="C++"><replaceable>F</replaceable></code> は 16 進数字</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\x{FFFF}</phrase></td>
	  <td>リテラルの <code language="C++">char_type(0x<replaceable>FFFF</replaceable>)</code>。<code language="C++"><replaceable>F</replaceable></code> は 16 進数字</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\c<replaceable>X</replaceable></phrase></td>
	  <td>制御文字 <code language="C++"><replaceable>X</replaceable></code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\l</phrase></td>
	  <td>次の文字を小文字にする</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\L</phrase></td>
	  <td>次に <code language="C++">\E</code> が現れるまで残りの置換を小文字にする</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\u</phrase></td>
	  <td>次の文字を大文字にする</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\U</phrase></td>
	  <td>次に <code language="C++">\E</code> が現れるまで残りの置換を大文字にする</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\E</phrase></td>
	  <td><code language="C++">\L</code> 、<code language="C++">\U</code> の効果を終了する</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\1</phrase> 、<phrase role="regex-substitution">\2</phrase> 、…</td>
	  <td>部分マッチ</td>
	</tr>
	<tr>
	  <td><phrase role="regex-substitution">\g&lt;<replaceable>name</replaceable>&gt;</phrase></td>
	  <td>名前付き後方参照 <replaceable>name</replaceable></td>
	</tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>Boost 固有の書式化シーケンス</title>
    <para>
      <function linkend="regex_replace">regex_replace()</function> に <constant>format_all</constant> を指定した場合に使用するエスケープシーケンスは上に挙げた <constant>format_perl</constant> と同じである。さらに以下の形式の条件式を使用する。
    </para>
    <programlisting language="C++">?Ntrue-expression:false-expression</programlisting>
    <para>
      <replaceable>N</replaceable> は部分マッチを表す 10 進数字である。この部分マッチがマッチ全体に含まれる場合は置換は <replaceable>true-expression</replaceable> となり、それ以外の場合は <replaceable>false-expression</replaceable> となる。このモードでは括弧 <phrase role="regex-pattern">()</phrase> でグループ化を行う。リテラルの括弧は <phrase role="regex-pattern">\(</phrase> のようにエスケープが必要である。
    </para>
  </section>

  <section>
    <title>書式化オブジェクト</title>
    <para>
      テキスト置換において、書式化文字列の表現能力が常に十分とは限らない。入力文字列を環境変数で置換して出力文字列にコピーする単純な例を考えよう。こういう場合は、書式化<emphasis>文字列</emphasis>ではなく書式化<emphasis>オブジェクト</emphasis>を使ったほうがよい。次のコードを考えよう。<phrase role="regex-input">$(xyz)</phrase> の形式で埋め込まれた環境変数を検索し、辞書に照らし合わせて見つかった置換文字列を算出する。
    </para>
    <programlisting language="C++">#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;
using namespace boost;
using namespace xpressive;

std::map&lt;std::string, std::string&gt; env;

std::string const &amp;format_fun(smatch const &amp;what)
{
    return env[what[1].str()];
}

int main()
{
    env["X"] = "this";
    env["Y"] = "that";

    std::string input("\"$(X)\" has the value \"$(Y)\"");

    // "$(XYZ)" のような文字列を検索し、env["XYZ"] の結果で置換する
    sregex envar = "$(" &gt;&gt; (s1 = +_w) &gt;&gt; ')';
    std::string output = regex_replace(input, envar, format_fun);
    std::cout &lt;&lt; output &lt;&lt; std::endl;

    return 0;
}</programlisting>
    <para>
      この場合、関数 <function>format_fun()</function> を使って置換文字列をその場で算出している。この関数は現在のマッチ結果が入った <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトを受け取る。<function>format_fun()</function> は「1 番目の部分マッチ」をグローバルな <varname>env</varname> 辞書のキーに使っている。上記コードは次を表示する。
    </para>
    <screen>"this" has the value "that"</screen>
    <para>
      書式化オブジェクトは単純な関数である必要はなく、クラス型のオブジェクトでもよい。また文字列を返す以外に、出力イテレータに置換結果を書き込んでもよい。以下は上記と機能的に等価なコードである。
    </para>
    <programlisting language="C++"></programlisting>
    <para>
      書式化オブジェクトは、シグニチャが以下の表に示す 3 種類のどれか 1 つである呼び出し可能オブジェクト（関数か関数オブジェクト）でなければならない。表中の <replaceable>fmt</replaceable> は関数ポインタか関数オブジェクト、<replaceable>what</replaceable> は <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクト、<replaceable>out</replaceable> は OutputIterator 、<replaceable>flags</replaceable> は <type role="enum">regex_constants::match_flag_type</type> の値である。
    </para>
    <table>
      <caption>書式化オブジェクトのシグニチャ</caption>
      <thead>
	<tr>
	  <td>書式化オブジェクトの呼び出し</td>
	  <td>戻り値の型</td>
	  <td>意味</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">fmt(what)</code></td>
	  <td>文字の範囲（<classname>std::string</classname> など）か null 終端文字列</td>
	  <td>正規表現にマッチした文字列を書式化オブジェクトが返した文字列で置換する。</td>
	</tr>
	<tr>
	  <td><code language="C++">fmt(what, out)</code></td>
	  <td>OutputIterator</td>
	  <td>書式化オブジェクトは置換文字列を <varname>out</varname> に書き込み、<varname>out</varname> を返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">fmt(what, out, flags)</code></td>
	  <td>OutputIterator</td>
	  <td>書式化オブジェクトは置換文字列を <varname>out</varname> に書き込み、<varname>out</varname> を返す。<varname>flags</varname> 引数は <function linkend="regex_replace">regex_replace()</function> アルゴリズムに渡したマッチフラグの値。</td>
	</tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>書式化列</title>
    <para>
      書式化<emphasis>文字列</emphasis>、書式化<emphasis>オブジェクト</emphasis>に加えて、<function linkend="regex_replace">regex_replace()</function> は書式化<emphasis>式</emphasis>も受け付ける。書式化式は文字列を生成するラムダ式である。使用する構文は後述する<link linkend="semantic_actions_and_user_defined_assertions">意味アクション</link>と同じである。文字列を <function linkend="regex_replace">regex_replace()</function> を用いて環境変数で置換する上の例を書式化式を使って書き直すと、次のようになる。
    </para>
    <programlisting language="C++">#include &lt;map&gt;
#include &lt;string&gt;
#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;
#include &lt;boost/xpressive/regex_actions.hpp&gt;
using namespace boost::xpressive;
int main()
{
    std::map&lt;std::string, std::string&gt; env;
    env["X"] = "this";
    env["Y"] = "that";

    std::string input("\"$(X)\" has the value \"$(Y)\"");

    sregex envar = "$(" &gt;&gt; (s1 = +_w) &gt;&gt; ')';
    std::string output = regex_replace(input, envar, ref(env)[s1]);
    std::cout &lt;&lt; output &lt;&lt; std::endl;

    return 0;
}</programlisting>
    <para>
      上のコードの <code language="C++">ref(env)[s1]</code> が書式化式で、1 番目の部分マッチの値 <constant>s1</constant> を辞書 <varname>env</varname> のキーとするという意味となる。ここで <function>xpressive::ref()</function> を使っているのは、ローカル変数 <varname>env</varname> への参照を<emphasis>遅延</emphasis>して <constant>s1</constant> の置換対象が判明するまで添字演算を遅らせるためである。
    </para>
  </section>
</article>
