<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___">
  <title><classname>tracking_ptr&lt;&gt;</classname> による循環型コレクション</title>

  <para>
    xpressive では正規表現オブジェクトがお互いや自分自身を値や参照で参照する場合がある。また参照先の正規表現が生存するために参照カウントを使っている。これにより循環参照が生じ、メモリリークが起きる可能性がある。xpressive は <classname>tracking_ptr&lt;&gt;</classname> という型を使ってリークを回避している。本ドキュメントでは <classname>tracking_ptr&lt;&gt;</classname> の、高水準な観点からの振る舞いについて述べる。
  </para>
  
  <section xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___.constraints">
    <title>制限</title>
    <para>
      以下に挙げる設計上の制限を満たす解法でなければならない。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  懸垂参照が発生しない：直接・間接的に参照しているオブジェクトはすべて参照が必要な限りは生存しなければならない。
	</para>
      </listitem>
      <listitem>
	<para>
	  メモリリークが発生しない：オブジェクトは、最終的にはすべて確実に解放しなければならない。
	</para>
      </listitem>
      <listitem>
	<para>
	  ユーザーの介入がない：ユーザーによる明示的な循環回収ルーチン呼び出しを必要としてはならない。
	</para>
      </listitem>
      <listitem>
	<para>
	  クリーンアップ処理が例外を送出しない：回収処理はデストラクタから呼び出される可能性が高いため、どのような事情があろうとも例外を送出してはならない。
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___.handle_body_idiom">
    <title>ハンドル・ボディイディオム</title>
    <para>
      <classname>tracking_ptr&lt;&gt;</classname> を使うには、型をハンドルとボディに分離しなければならない。xpressive の場合、ハンドル型は <classname>basic_regex&lt;&gt;</classname> でありボディは <classname>regex_impl&lt;&gt;</classname> である。ハンドルがボディへの <classname>tracking_ptr&lt;&gt;</classname> をもつ。
    </para>
    <para>
      ボディ型は <classname>enable_reference_tracking&lt;&gt;</classname> を継承しなければならない。これで <classname>tracking_ptr&lt;&gt;</classname> が使用する帳簿（<foreignphrase xml:lang="en">bookkeeping</foreignphrase>）となるデータ構造がボディに与えられる。
    </para>
    <orderedlist>
      <listitem>
	<para>
	  <code language="C++">std::set&lt;shared_ptr&lt;body&gt; &gt; refs_</code>：このボディが参照するボディのコレクション。
	</para>
      </listitem>
      <listitem>
	<para>
	  <code language="C++">std::set&lt;weak_ptr&lt;body&gt; &gt; refs_</code>：このボディを参照するボディのコレクション。
	</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___.references_and_dependencies">
    <title>参照と依存</title>
    <para>
      上記 1. を「参照」、2. を「依存」と呼ぶことにする。<classname>tracking_ptr&lt;&gt;</classname> は直接参照されるオブジェクトと（他の参照を介して）間接的に参照されるオブジェクトの両方を参照の集合として扱う、ということは理解しておかなければならない。依存の集合についても同じことが当てはまる。言い換えると、各ボディはそのボディが必要とする他のあらゆるボディに対する直接の参照カウンタをもつ。
    </para>
    <para>
      なぜこれが重要なのか？あるボディを参照するハンドルがなくなった時点で、そのすべての参照を懸垂参照を心配せずに即座に解放可能だからである。
    </para>
    <para>
      参照と依存は相互交流の関係である。動作を以下に示す。
    </para>
    <orderedlist>
      <listitem>
	<para>
	  オブジェクトが他のオブジェクトを参照として得ると、参照先のオブジェクトは参照元のオブジェクトを依存として得る。
	</para>
      </listitem>
      <listitem>
	<para>
	  これに加えて参照元のオブジェクトは参照先のオブジェクトがもつ参照をすべて得、参照先のオブジェクトは参照元のオブジェクトがもつ依存をすべて得る。
	</para>
      </listitem>
      <listitem>
	<para>
	  オブジェクトが新たな参照を獲得すると、その参照はすべての依存オブジェクトにも追加される。
	</para>
      </listitem>
      <listitem>
	<para>
	  オブジェクトが新たな依存を獲得すると、その依存はすべての参照オブジェクトにも追加される。
	</para>
      </listitem>
      <listitem>
	<para>
	  オブジェクトが自分自身の依存をもつことは認められない。オブジェクトが自分自身を参照することは可能であり、よくある。
	</para>
      </listitem>
    </orderedlist>
    <para>
      次のコードを考える。
    </para>
    <programlisting language="C++">sregex expr;
{
    sregex group  = '(' &gt;&gt; by_ref(expr) &gt;&gt; ')';                 // (1)
    sregex fact   = +_d | group;                                // (2)
    sregex term   = fact &gt;&gt; *(('*' &gt;&gt; fact) | ('/' &gt;&gt; fact));   // (3)
    expr          = term &gt;&gt; *(('+' &gt;&gt; term) | ('-' &gt;&gt; term));   // (4)
}                                                               // (5)</programlisting>
    <para>
      参照と依存がどのように伝播するか 1 行ずつ見ていく。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <td>式</td>
	  <td>効果</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>1）<code language="C++">sregex group = '(' &gt;&gt; by_ref(expr) &gt;&gt; ')';</code></td>
	  <td>
	    <literallayout class="monospaced">group: cnt1 refs{expr} deps={}
expr: cnt2 refs{} deps={group}</literallayout>
	  </td>
	</tr>
	<tr>
	  <td>2）<code language="C++">sregex fact = +_d | group;</code></td>
	  <td>
	    <literallayout class="monospaced">group: cnt2 refs{expr} deps={fact}
expr: cnt3 refs{} deps={group,fact}
fact: cnt1 refs{expr,group} deps={}</literallayout>
	  </td>
	</tr>
	<tr>
	  <td>3）<code language="C++">sregex term = fact &gt;&gt; *(('*' &gt;&gt; fact) | ('/' &gt;&gt; fact));</code></td>
	  <td>
	    <literallayout class="monospaced">group: cnt3 refs{expr} deps={fact,term}
expr: cnt4 refs{} deps={group,fact,term}
fact: cnt2 refs{expr,group} deps={term}
term: cnt1 refs{expr,group,fact} deps={}</literallayout>
	  </td>
	</tr>
	<tr>
	  <td>4）<code language="C++">expr = term &gt;&gt; *(('+' &gt;&gt; term) | ('-' &gt;&gt; term));</code></td>
	  <td>
	    <literallayout class="monospaced">group: cnt5 refs{expr,group,fact,term} deps={expr,fact,term}
expr: cnt5 refs{expr,group,fact,term} deps={group,fact,term}
fact: cnt5 refs{expr,group,fact,term} deps={expr,group,term}
term: cnt5 refs{expr,group,fact,term} deps={expr,group,fact}</literallayout>
	  </td>
	</tr>
	<tr>
	  <td>5）<code language="C++">}</code></td>
	  <td>
	    <literallayout class="monospaced">expr: cnt2 refs{expr,group,fact,term} deps={group,fact,term}</literallayout>
	  </td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      オブジェクトの循環が発生したときに参照と依存がどのように伝播するかを示している。（4）の行で循環が閉じられ、以降、各オブジェクトは他のオブジェクトに対して参照カウントをもつ。これでなぜリークしないのか？ 先を続けよう。
    </para>
  </section>

  <section xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___.cycle_breaking">
    <title>循環を破る（循環ブレーカ）</title>
    <para>
      ボディは参照と依存の集合をもつ、というところまでは分かった。循環をいつどこで破るかがまだ決まっていない。これはハンドルの一部になっている <classname>tracking_ptr&lt;&gt;</classname> の仕事である。<classname>tracking_ptr&lt;&gt;</classname> は 2 つの <classname>shared_ptr</classname> をもつ。1 つ目は明らかなように <classname>shared_ptr&lt;body&gt;</classname> であり、このハンドルが参照するボディへの参照である。2 つ目の <classname>shared_ptr</classname> は循環を破るのに使用し、ボディへのハンドルがすべてスコープから出たときに、ボディがもつ参照の集合を解放する。
    </para>
    <para>
      このことから分かるように 1 つのボディに対するハンドルは2つ以上になる可能性がある。実際、<classname>tracking_ptr&lt;&gt;</classname> は「書き込み時コピー」セマンティクスを用いており、ハンドルをコピーするとボディは共有される。あるボディへのハンドルは、そのうちすべてスコープの外に出る。このとき、他のボディ（当該ボディそのものかもしれない）が参照を保持していてボディへの参照カウントは0より大きいかもしれない。しかし循環ブレーカはハンドル内にしか存在しないので、循環ブレーカの参照カウントは間違いなく 0 である。ハンドルが存在しなければ循環ブレーカも存在しない。
    </para>
    <para>
      循環ブレーカが行うことは何だろう？ ボディが <classname>std::set&lt;shared_ptr&lt;body&gt; &gt;</classname> 型の参照の集合をもつことを思い出していただきたい。この型を「<type>references_type</type>」と呼ぶことにする。循環ブレーカは <classname>shared_ptr&lt;references_type&gt;</classname> であり、以下に示すカスタムの削除オブジェクトを使う。
    </para>
    <programlisting language="C++">template&lt;typename DerivedT&gt;
struct reference_deleter
{
    void operator ()(std::set&lt;shared_ptr&lt;DerivedT&gt; &gt; *refs) const
    {
        refs->clear();
    }
};</programlisting>
    <para>
      循環ブレーカの役割は、ボディへの最後のハンドルがなくなったときにボディがもつ参照の集合を解放すること、それだけである。
    </para>
    <para>
      すべてのボディが最終的に解放されることが保証されるのは明らかである。ハンドルがすべてスコープから出ると、ボディがもつすべての参照が解放され、後には何も（非 0 の参照カウントも）残らない。リークが起こらないことが保証される。
    </para>
    <para>
      以上のことから懸垂参照が発生しないことが保証される、と言うのは少し難しい。A 、B 、C の 3 つのボディがあるとしよう。A は B を参照し、B は C を参照する。B へのハンドルがすべてスコープから出ると、B がもつ参照の集合が解放される。A が（間接的に）使用しているにも関わらず、これでは C が削除されてしまうのではないか？ そうはならない。A は B だけでなく C も直接参照し続けるように、上記のように参照と依存を伝播しているため、このような状況は起こらない。B がもつ参照の集合が解放されても、各ボディは A が使用中のため削除されない。
    </para>
  </section>

  <section xml:id="appendices.appendix_5__implementation_notes.cycle_collection_with___tracking_ptr___.future_work">
    <title>将来</title>
    <para>
      <classname>std::set</classname> 、<classname>shared_ptr</classname> 、<classname>weak_ptr</classname> を使っているが、軒並み効率が悪い。手ごろなので使っているだけなのだが。改善できると思う。
    </para>
    <para>
      また、オブジェクトが必要以上に長い時間生存する場合がある。
    </para>
    <programlisting language="C++">sregex b;
{
    sregex a = _;
    b = by_ref(a);
    b = _;
}
// a がこの時点でまだ生存している！</programlisting>
    <para>
      参照と依存を伝播する手法であるため、<classname>std::set</classname> は拡大するのみである。参照が不要になった場合でも縮小しない。xpressive ではこれは問題にならない。参照オブジェクトのグラフは大きくならず、それぞれ孤立したままである。汎用の参照カウント式循環コレクション機構として <classname>tracking_ptr&lt;&gt;</classname> を使おうとすると、この問題に焦点が当てられることになるだろう。
    </para>
  </section>
</section>
