<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>文字列の分割とトークン分割</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> はテキスト操作の世界における GINSU
    <footnote>
      <para>
	訳注　刃物メーカー（<link xlink:href="http://www.genuineginsu.com/">http://www.genuineginsu.com/</link>）。GINSU のナイフはよく切れると評判らしいです。Wikipedia によるとテレビ CM が画期的なものだったとか。
      </para>
    </footnote>
    のナイフである。薄切りもさいの目切りも思いのまま！ 本節では高度に設定可能な <classname linkend="regex_token_iterator">regex_token_iterator</classname> で入力シーケンスを分割する方法を述べる。
  </para>

  <section>
    <title>概要</title>
    <para>
      <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> は入力シーケンス、正規表現、省略可能な設定引数で初期化する。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> は <function linkend="regex_search">regex_search()</function> を使って、シーケンス内で最初に正規表現にマッチする位置を見つける。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を参照はがしすると、<classname>std::basic_string</classname> 形式で<emphasis>トークン</emphasis>を返す。どの文字列を返すかは設定引数による。既定ではマッチ全体に相当する文字列を返すが、マーク済み部分式のみならずシーケンス内のマッチ<emphasis>しなかった</emphasis>部分を返すことも可能である。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> をインクリメントすると次のトークンに移動する。次がどのトークンかは設定引数による。単純に現在のマッチにおける異なるマーク済み部分式の場合もあれば、次のマッチの全体か一部分である場合、マッチ<emphasis>しなかった</emphasis>部分である場合もある。
    </para>
    <para>
      以上のことからわかるように、<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> には多くの機能がある。すべてを説明するのは難しいが、いくつか例を見れば理解できるだろう。
    </para>
  </section>

  <section>
    <title>例 1：単純なトークン分割</title>
    <para>
      この例では <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を使ってシーケンスを単語のトークンに切っている。
    </para>
    <programlisting language="C++">std::string input("This is his face");
sregex re = +_w;                      // 単語を検索する

// 入力中の単語をすべて走査する
sregex_token_iterator begin( input.begin(), input.end(), re ), end;

// すべての単語を std::cout に出力する
std::ostream_iterator&lt; std::string &gt; out_iter( std::cout, "\n" );
std::copy( begin, end, out_iter );</programlisting>
    <para>
      このプログラムは以下を表示する。
    </para>
    <screen>This
is
his
face</screen>
  </section>

  <section>
    <title>例 2：単純なトークン分割・リローデッド</title>
    <para>
      この例も <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を使ってシーケンスを単語トークンに切っているが、正規表現を区切りとして使っている。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> コンストラクタの最後の引数に <literal>-1</literal> を渡すと、入力内の正規表現にマッチ<emphasis>しなかった</emphasis>部分がトークンとなる。
    </para>
    <programlisting language="C++">std::string input("This is his face");
sregex re = +_s;                      // 空白を検索する

// 入力中の非空白をすべて走査する。-1 に注意
sregex_token_iterator begin( input.begin(), input.end(), re, -1 ), end;

// すべての単語を std::cout に出力する
std::ostream_iterator&lt; std::string &gt; out_iter( std::cout, "\n" );
std::copy( begin, end, out_iter );</programlisting>
    <para>
      このプログラムは以下を出力する。
    </para>
    <screen>This
is
his
face</screen>
  </section>

  <section>
    <title>
      例 3：単純なトークン分割・レボリューションズ
      <footnote>
	<para>
	  訳注　マトリックスですね。
	</para>
      </footnote>
    </title>
    <para>
      この例も <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を使って日付の束が入ったシーケンスを年だけのトークンに切っている。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> コンストラクタの最後の引数に正の整数 <replaceable>N</replaceable> を渡すと、各マッチの <replaceable>N</replaceable> 番目のマーク済み部分式のみがトークンとなる。
    </para>
    <programlisting language="C++">std::string input("01/02/2003 blahblah 04/23/1999 blahblah 11/13/1981");
sregex re = sregex::compile("(\\d{2})/(\\d{2})/(\\d{4})"); // 日付を検索する

// 入力中のすべての年を走査をする。3（3 番目の部分式）に注意
sregex_token_iterator begin( input.begin(), input.end(), re, 3 ), end;

// すべての単語を std::cout に出力する
std::ostream_iterator&lt; std::string &gt; out_iter( std::cout, "\n" );
std::copy( begin, end, out_iter );</programlisting>
    <para>
      このプログラムは以下を出力する。
    </para>
    <screen>2003
1999
1981</screen>
  </section>

  <section>
    <title>例 4：あまり単純でないトークン分割</title>
    <para>
      この例は 1 つ前のものと似ているが、年だけでなく月と日をトークンに入れている点が異なる。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> コンストラクタの最後の引数に整数の配列 <code>{I,J,...}</code> を渡すと、各マッチの <replaceable>I</replaceable> 番目、<replaceable>J</replaceable> 番目、…のマーク済み部分式がトークンとなる。
    </para>
    <programlisting language="C++">std::string input("01/02/2003 blahblah 04/23/1999 blahblah 11/13/1981");
sregex re = sregex::compile("(\\d{2})/(\\d{2})/(\\d{4})"); // 日付を検索する

// 入力中の年月日を走査する
int const sub_matches[] = { 2, 1, 3 }; // 日、月、年
sregex_token_iterator begin( input.begin(), input.end(), re, sub_matches ), end;

// すべての単語を std::cout に出力する
std::ostream_iterator&lt; std::string &gt; out_iter( std::cout, "\n" );
std::copy( begin, end, out_iter );</programlisting>
    <para>
      このプログラムは以下を出力する。
    </para>
    <screen>02
01
2003
23
04
1999
13
11
1981</screen>
    <para>
      <varname>sub_matches</varname> 配列により、<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> は最初に 2 番目の部分マッチ、次に 1 番目の部分マッチ、最後に 3 番目の部分マッチの値を取る。イテレータをインクリメントすると <function linkend="regex_search">regex_search()</function> を使って次のマッチを検索する。ここで処理が繰り返され、イテレータは 2 番目の部分マッチを取り、次に 1 番目…となる。
    </para>
  </section>
</article>
