<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>ヒント集</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    以下のヒント集に従うと、xpressive の効率を最大限に引き出せる。
  </para>

  <section>
    <title>パターンのコンパイルは一度とし、再利用せよ</title>
    <para>
      正規表現のコンパイル（動的、静的によらない）は、マッチや検索の実行より<emphasis>何倍もの</emphasis>コストを要する。可能であれば <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> のコンパイルは一度だけにし、あとは再利用せよ（事あるごとに再作成してはならない）。
    </para>
    <para>
      <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> オブジェクトはいかなる正規表現アルゴリズムによっても変更されないので、正規表現（と所属するすべての文法）の初期化が完了しさえすれば完全にスレッド安全である。パターンの再利用で一番簡単な方法は、<classname linkend="basic_regex">basic_regex&lt;&gt;</classname> オブジェクトを static const にすることである。
    </para>
  </section>

  <section>
    <title>match_results&lt;&gt; オブジェクトを再利用せよ</title>
    <para>
      <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトは動的に確保したメモリをキャッシュする。そのため、正規表現検索を何度も行う場合は同じ <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトを再利用するほうがずっとよい。
    </para>
    <para>
      注意：<classname linkend="match_results">match_result&lt;&gt;</classname> オブジェクトはスレッド安全でないため、スレッドを超えて再利用してはならない。
    </para>
  </section>

  <section>
    <title>match_results&lt;&gt; オブジェクトを引数に取るアルゴリズムを使用せよ</title>
    <para>
      これも同様である。検索を複数回行う場合は、<classname linkend="match_results">match_result&lt;&gt;</classname> オブジェクトを引数に取る正規表現アルゴリズムを使用し、毎回同じ <classname linkend="match_results">match_result&lt;&gt;</classname> オブジェクトを使用すべきだ。<classname linkend="match_results">match_result&lt;&gt;</classname> オブジェクトを与えないと一時オブジェクトが作成され、アルゴリズムが結果を返すときに破棄される。オブジェクトがキャッシュしていたメモリは解放され、次回また再確保されてしまう。
    </para>
  </section>

  <section>
    <title>null 終端文字列に対してはイテレータの範囲を引数に取るアルゴリズムを使用せよ</title>
    <para>
      xpressive は <function linkend="regex_match">regex_match()</function> および <function linkend="regex_search">regex_search()</function> アルゴリズムについて、C 形式の null 終端文字列を操作する多重定義を提供している。イテレータの範囲を引数に取る多重定義を使用すべきだ。null 終端文字列を正規表現アルゴリズムに渡すと、終端のイテレータを計算するために <function>strlen</function> が呼び出されてしまう。文字列の長さが事前に分かっているのであれば、<code>[begin,end)</code> 組を取る正規表現を呼び出してこのオーバーヘッドを回避できる。
    </para>
  </section>

  <section>
    <title>静的正規表現を使用せよ</title>
    <para>
      静的正規表現は同じ内容の動的版に対して、平均で約 10% から 15% 高速である。これだけでも静的版に慣れておく価値がある。
    </para>
  </section>

  <section>
    <title>syntax_option_type::optimize を理解せよ</title>
    <para>
      <constant>optimize</constant> フラグを正規表現コンパイラに渡すと、パターンの解析により多くの時間をかけるようになる。この結果、パターンによっては実行が高速になるが、コンパイル時間が長くなり、しばしばパターンが要するメモリの量が増える。パターンを再利用するのであれば <constant>optimize</constant> は効果があると考えてよい。パターンを一度しか使用しないのであれば、<constant>optimize</constant> は避けるべきだ。
    </para>
  </section>

  <section>
    <title>よくある落とし穴</title>
    <para>
      xpressive の落とし穴に足を踏み入れないように、以下のことを覚えておくとよい。
    </para>

    <section>
      <title>文法は単一のスレッドで作成せよ</title>
      <para>
	静的正規表現では正規表現を入れ子にして文法を構築するが、外側の正規表現をコンパイルすると外側と内側の両方の正規表現オブジェクト、およびそれらが直接・間接的に参照するすべての正規表現オブジェクトが更新される。そのため、グローバルな正規表現オブジェクトが文法に関与すると危険である。単一のスレッドから正規表現文法を構築するのが最善である。一度構築してしまえば、正規表現文法は複数のスレッドから問題なく実行できる。
      </para>
    </section>

    <section>
      <title>入れ子の数量子に注意せよ</title>
      <para>
	これは多くの正規表現エンジンに共通の落とし穴であり、パターンによっては指数的に効率が悪化する。よくあるのは <phrase role="regex-pattern">(a*)*</phrase> のようにパターン内の数量子付きの項が他の数量子に入れ子になっているというものだが、多くの場合発見しにくいのが問題である。数量子が入れ子になっているパターンには注意せよ。
      </para>
    </section>
  </section>
</article>
