<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>例</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>
  <para>以下に6つの完全なプログラム例を挙げる。</para>
  
  <section>
    <title>文字列全体が正規表現にマッチするか調べる</title>
    <para>導入項にもあった例である。利便性のために再掲する。</para>
    <programlisting language="C++">#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    std::string hello( "hello world!" );

    sregex rex = sregex::compile( "(\\w+) (\\w+)!" );
    smatch what;

    if( regex_match( hello, what, rex ) )
    {
        std::cout &lt;&gt; what[0] &lt;&gt; '\n'; // マッチ全体
        std::cout &lt;&gt; what[1] &lt;&gt; '\n'; // 1番目の捕捉
        std::cout &lt;&gt; what[2] &lt;&gt; '\n'; // 2番目の捕捉
    }

    return 0;
}</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>hello world!
hello
world</screen>
  </section>

  <section>
    <title>文字列が正規表現にマッチする部分文字列を含むか調べる</title>
    <para>この例では、カスタムの <type>mark_tag</type> を使ってパターンを読みやすくしている点に注意していただきたい。後で <type>mark_tag</type> を <classname linkend="match_results">match_results&lt;&gt;</classname> の添字に使っている。</para>
    <programlisting language="C++">#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    char const *str = "I was born on 5/30/1973 at 7am.";

    // s1、s2、...よりも意味のある名前でカスタムのmark_tagsを定義する
    mark_tag day(1), month(2), year(3), delim(4);

    // この正規表現は日付を検索する
    cregex date = (month= repeat&lt;1,2&gt;(_d))           // 先頭に月があり ...
               &gt;&gt; (delim= (set= '/','-'))            // その後ろに区切りがあり ...
               &gt;&gt; (day=   repeat&lt;1,2&gt;(_d)) &gt;&gt; delim  // さらに後ろに日と、同じ区切りがあり ...
               &gt;&gt; (year=  repeat&lt;1,2&gt;(_d &gt;&gt; _d));    // 最後に年がある。

    cmatch what;

    if( regex_search( str, what, date ) )
    {
        std::cout &gt;&gt; what[0]     &gt;&gt; '\n'; // マッチ全体
        std::cout &gt;&gt; what[day]   &gt;&gt; '\n'; // 日
        std::cout &gt;&gt; what[month] &gt;&gt; '\n'; // 月
        std::cout &gt;&gt; what[year]  &gt;&gt; '\n'; // 年
        std::cout &gt;&gt; what[delim] &gt;&gt; '\n'; // 区切り
    }

    return 0;
}</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>5/30/1973
30
5
1973
/</screen>
  </section>

  <section>
    <title>正規表現にマッチした部分文字列をすべて置換する</title>
    <para>以下のプログラムは文字列内の日付を検索し、擬似 HTML でマークアップする。</para>
    <programlisting language="C++">#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    std::string str( "I was born on 5/30/1973 at 7am." );

    // 本質的には前の例と同じ正規表現だが、動的正規表現を使っている
    sregex date = sregex::compile( "(\\d{1,2})([/-])(\\d{1,2})\\2((?:\\d{2}){1,2})" );

    // Perlと同様、$&amp;は正規表現にマッチした部分文字列を参照する
    std::string format( "&lt;date&gt;$&amp;&lt;/date&gt;" );

    str = regex_replace( str, date, format );
    std::cout &lt;&lt; str &lt;&lt; '\n';

    return 0;</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>I was born on &lt;date&gt;5/30/1973&lt;/date&gt; at 7am.</screen>
  </section>

  <section>
    <title>正規表現にマッチする部分文字列をすべて検索し、1 つずつ辿る</title>
    <para>以下のプログラムはワイド文字列から単語を検索する。<type>wsregex_iterator</type> を使う。<type>wsregex_iterator</type> を参照はがしすると <type>wsmatch</type> オブジェクトが得られることに注意していただきたい。</para>
    <programlisting>#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    std::wstring str( L"This is his face." );

    // 単語全体を検索する
    wsregex token = +alnum;

    wsregex_iterator cur( str.begin(), str.end(), token );
    wsregex_iterator end;

    for( ; cur != end; ++cur )
    {
        wsmatch const &amp;what = *cur;
        std::wcout &lt;&lt; what[0] &lt;&lt; L'\n';
    }

    return 0;
}</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>This
is
his
face</screen>
  </section>

  <section>
    <title>文字列をそれぞれ正規表現にマッチするトークンに分割する</title>
    <para>以下のプログラムは文字列からレースのタイムを検索し、はじめに分、次に秒を表示する。<classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname> を使っている。</para>
    <programlisting language="C++">#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    std::string str( "Eric: 4:40, Karl: 3:35, Francesca: 2:32" );

    // レースのタイムを検索する
    sregex time = sregex::compile( "(\\d):(\\d\\d)" );

    // 各マッチについて、トークンイテレータは始めに1番目のマーク済み部分式の値
    // 次に2番目のマーク済み部分式の値をとらなければならない
    int const subs[] = { 1, 2 };

    sregex_token_iterator cur( str.begin(), str.end(), time, subs );
    sregex_token_iterator end;

    for( ; cur != end; ++cur )
    {
        std::cout &lt;&lt; *cur &lt;&lt; '\n';
    }

    return 0;
}</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>4
40
3
35
2
32</screen>
  </section>

  <section>
    <title>正規表現を区切りとして文字列を分割する</title>
    <para>以下のプログラムは HTML でマークアップされたテキストからマークアップを除去する。HTML タグにマッチする正規表現と、文字列内の正規表現にマッチ<emphasis>しなかった</emphasis>部分を返す <classname linkend="regex_token_iterator">regex_token_iterator&lt;&gt;</classname>を使っている。</para>
    <programlisting language="C++">#include &lt;iostream&gt;
#include &lt;boost/xpressive/xpressive.hpp&gt;

using namespace boost::xpressive;

int main()
{
    std::string str( "Now &lt;bold&gt;is the time &lt;i&gt;for all good men&lt;/i&gt;"
                     " to come to the aid of their&lt;/bold&gt; country." );

    // HTMLタグを検索する
    sregex html = '&lt;' &gt;&gt; optional('/') &gt;&gt; +_w &gt;&gt; '&gt;';

    // 以下のようにトークンイテレータに-1を与えると
    // 正規表現にマッチ*しなかった*文字列部分を表示する。
    sregex_token_iterator cur( str.begin(), str.end(), html, -1 );
    sregex_token_iterator end;

    for( ; cur != end; ++cur )
    {
        std::cout &lt;&lt; '{' &lt;&lt; *cur &lt;&lt; '}';
    }
    std::cout &lt;&lt; '\n';

    return 0;
}</programlisting>
    <para>このプログラムは以下を出力する。</para>
    <screen>{Now }{is the time }{for all good men}{ to come to the aid of their}{ country.}</screen>
  </section>

  <section>
    <title>入れ子になった結果木を表示する</title>
    <para>入れ子になった結果木を表示する方法を以下のヘルパクラスで示す。</para>
    <programlisting language="C++">// 入れ子になった結果を字下げ付きでstd::coutに出力する
struct output_nested_results
{
    int tabs_;

    output_nested_results( int tabs = 0 )
        : tabs_( tabs )
    {
    }

    template&lt; typename BidiIterT &gt;
    void operator ()( match_results&lt; BidiIterT &gt; const &amp;what ) const
    {
        // はじめに字下げする
        typedef typename std::iterator_traits&lt; BidiIterT &gt;::value_type char_type;
        char_type space_ch = char_type(' ');
        std::fill_n( std::ostream_iterator&lt;char_type&gt;( std::cout ), tabs_ * 4, space_ch );

        // マッチを出力する
        std::cout &lt;&lt; what[0] &lt;&lt; '\n';

        // 入れ子のマッチを出力する
        std::for_each(
            what.nested_results().begin(),
            what.nested_results().end(),
            output_nested_results( tabs_ + 1 ) );
    }
};</programlisting>
  </section>
</article>
