<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_replace">
  <refmeta>
    <refentrytitle>regex_replace 関数</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::replace</refname>
    <refpurpose>与えられた入力シーケンス、正規表現、および書式化文字列、書式化オブジェクト、関数、式に対して出力シーケンスを構築する。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_algorithms_hpp">boost/xpressive/regex_algorithms.hpp</filename>&gt;


template&lt;typename OutIter, typename BidiIter, typename Formatter&gt; 
  OutIter regex_replace(OutIter out, BidiIter begin, BidiIter end, 
                        <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                        Formatter const &amp; format, 
                        regex_constants::match_flag_type flags = regex_constants::match_default, 
                        <replaceable>unspecified</replaceable> = 0);
template&lt;typename OutIter, typename BidiIter&gt; 
  OutIter regex_replace(OutIter out, BidiIter begin, BidiIter end, 
                        <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                        typename iterator_value&lt; BidiIter &gt;::type const * format, 
                        regex_constants::match_flag_type flags = regex_constants::match_default);
template&lt;typename BidiContainer, typename BidiIter, typename Formatter&gt; 
  BidiContainer 
  regex_replace(BidiContainer &amp; str, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                Formatter const &amp; format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                <replaceable>unspecified</replaceable> = 0);
template&lt;typename BidiContainer, typename BidiIter, typename Formatter&gt; 
  BidiContainer 
  regex_replace(BidiContainer const &amp; str, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                Formatter const &amp; format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                <replaceable>unspecified</replaceable> = 0);
template&lt;typename Char, typename Formatter&gt; 
  std::basic_string&lt; typename remove_const&lt; Char &gt;::type &gt; 
  regex_replace(Char * str, <classname linkend="basic_regex">basic_regex</classname>&lt; Char * &gt; const &amp; re, 
                Formatter const &amp; format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                <replaceable>unspecified</replaceable> = 0);
template&lt;typename BidiContainer, typename BidiIter&gt; 
  BidiContainer 
  regex_replace(BidiContainer &amp; str, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                typename iterator_value&lt; BidiIter &gt;::type const * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                <replaceable>unspecified</replaceable> = 0);
template&lt;typename BidiContainer, typename BidiIter&gt; 
  BidiContainer 
  regex_replace(BidiContainer const &amp; str, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                typename iterator_value&lt; BidiIter &gt;::type const * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default, 
                <replaceable>unspecified</replaceable> = 0);
template&lt;typename Char&gt; 
  std::basic_string&lt; typename remove_const&lt; Char &gt;::type &gt; 
  regex_replace(Char * str, <classname linkend="basic_regex">basic_regex</classname>&lt; Char * &gt; const &amp; re, 
                typename add_const&lt; Char &gt;::type * format, 
                regex_constants::match_flag_type flags = regex_constants::match_default);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      <code language="C++">regex_iterator&lt; BidiIter &gt; i(begin, end, re, flags)</code> で <classname linkend="regex_iterator">regex_iterator</classname> オブジェクトを構築し、シーケンス <code>[begin, end)</code> に現れる <type>match_results&lt; BidiIter &gt;</type> 型のマッチ <varname>m</varname> すべてを <varname>i</varname> を使って列挙する。マッチが見つからず、かつ <code language="C++">!(flags &amp; format_no_copy)</code> であれば <code language="C++">std::copy(begin, end, out)</code> を呼び出す。それ以外の場合は、見つかった各マッチについて <code language="C++">!(flags &amp; format_no_copy)</code> であれば <code language="C++">std::copy(m.prefix().first, m.prefix().second, out)</code> を呼び出し、次に <code language="C++">m.format(out, format, flags)</code> を呼び出す。最後に <code language="C++">!(flags &amp; format_no_copy)</code> であれば <code language="C++">std::copy(last_m.suffix().first, last_m.suffix().second, out)</code> を呼び出す（<varname>last_m</varname> は最後に見つかったマッチのコピー）。
    </para>
    <para>
      <code language="C++">flags &amp; format_first_only</code> が非ゼロの場合は、最初に見つかったマッチのみを置換する。
    </para>

    <variablelist spacing="compact">
      <varlistentry>
	<term>引数：</term>
	<listitem>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term><parameter>begin</parameter></term>
	      <listitem>
		<para>入力シーケンスの先頭。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>end</parameter></term>
	      <listitem>
		<para>入力シーケンスの終端。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>flags</parameter></term>
	      <listitem>
		<para>正規表現をシーケンスに対してどのようにマッチさせるか制御する、省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>format</parameter></term>
	      <listitem>
		<para>置換シーケンスを整形する書式化文字列。または書式化関数、オブジェクト、式。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>out</parameter></term>
	      <listitem>
		<para>出力シーケンスを書き込む出力イテレータ。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>re</parameter></term>
	      <listitem>
		<para>使用する正規表現オブジェクト。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para><type>BidiIter</type> が双方向イテレータ（24.1.4）の要件を満たす。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para><type>OutIter</type> が出力イテレータ（24.1.2）の要件を満たす。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para><type>Formatter</type> 型が <type>ForwardRange</type> 、<type>Callable&lt;match_results&lt;BidiIter&gt; &gt;, Callable&lt;match_results&lt;BidiIter&gt;, OutIter&gt;</type> あるいは <type>Callable&lt;match_results&lt;BidiIter&gt;, OutIter, regex_constants::match_flag_type&gt;</type> のいずれか。または null 終端書式化文字列か書式化ラムダ式を表す式テンプレート。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para><code>[begin, end)</code> が有効なイテレータ範囲を表す。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>戻り値：</term>
	<listitem>
	  <para>出力シーケンスを書き込んだ後の出力イテレータ。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>例外：</term>
	<listitem>
	  <para>スタックが枯渇した、または書式化文字列が不正な場合 <exceptionname linkend="regex_error">regex_error</exceptionname>。</para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>
</refentry>
