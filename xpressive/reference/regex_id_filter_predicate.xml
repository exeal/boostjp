<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_id_filter_predicate">
  <refmeta>
    <refentrytitle>regex_id_filter_predicate 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_id_filter_predicate</refname>
    <refpurpose/>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename linkend="header.match_results_hpp">boost/xpressive/match_results.hpp</filename>&gt;

template&lt;typename BidiIter&gt;
struct <classname linkend="regex_id_filter_predicate">regex_id_filter_predicate</classname> {
  // <link linkend="regex_id_filter_predicate.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="regex_id_filter_predicate.regex_id_filter_predicate">regex_id_filter_predicate</methodname>(regex_id_type);

  // <link linkend="regex_id_filter_predicate.public-member-functions">公開メンバ関数</link>
  bool <methodname linkend="regex_id_filter_predicate.operator.0">operator()</methodname>(<classname linkend="match_results">match_results</classname>&lt; BidiIter &gt; const &amp;) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    
    <refsection xml:id="regex_id_filter_predicate.construct-copy-destruct">
      <title>regex_id_filter_predicate 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="regex_id_filter_predicate.regex_id_filter_predicate">
	  <constructorsynopsis language="C++">
	    <methodname>regex_id_filter_predicate</methodname>
	    <methodparam>
	      <type>regex_id_type</type>
	      <parameter>regex_id</parameter>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="regex_id_filter_predicate.public-member-functions">
      <title>regex_id_filter_predicate 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="regex_id_filter_predicate.operator.0">
	  <methodsynopsis language="C++">
	    <type>bool</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>match_results&lt; BidiIter &gt; const &amp;</type>
	      <parameter>res</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
