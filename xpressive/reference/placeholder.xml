<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="placeholder">
  <refmeta>
    <refentrytitle>placeholder 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::placeholder</refname>
    <refpurpose>
      意味アクション内で変数の代役となるプレースホルダを定義する。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename T, int I = 0&gt;
struct <classname linkend="placeholder">placeholder</classname> {
  // <link linkend="placeholder.construct-copy-destruct">構築、コピー、解体</link>
  <replaceable>unspecified</replaceable> <methodname linkend="placeholder.operator.0">operator=</methodname>(T &amp;) const;
  <replaceable>unspecified</replaceable> <methodname linkend="placeholder.operator.1">operator=</methodname>(T const &amp;) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      <classname>placeholder&lt;&gt;</classname> は、意味アクション内で実際のオブジェクトの代わりに使用するプレースホルダを定義するのに使用する。プレースホルダを使用すると、アクション付きの正規表現を一度だけ定義しておき、その正規表現を定義した時点では使用できないオブジェクトの読み書きを行う多くの状況で再利用できるようになる。
    </para>
    <para>
      <classname>placeholder&lt;&gt;</classname> の使用方法は、<classname>placeholder&lt;T&gt;</classname> 型のオブジェクトを作成し、意味アクション内で型 <type>T</type> のオブジェクトと完全に同じように扱うことである。
    </para>
    <programlisting language="C++">placeholder&lt;int&gt; _i;
placeholder&lt;double&gt; _d;

sregex rex = ( some &gt;&gt; regex &gt;&gt; here )
    [ ++_i, _d *= _d ];</programlisting>
    <para>
      次に <function>regex_search()</function> 、<function>regex_match</function> 、<function>regex_replace()</function> のいずれかでパターンマッチを行うには、正規表現オブジェクトの意味アクションで使用するプレースホルダへの束縛を持つ <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトを渡す。
    </para>
    <programlisting language="C++">int i = 0;
double d = 3.14;

smatch what;
what.let(_i = i)
    .let(_d = d);

if(regex_match("何かの文字列", rex, what))
// i と d がここで変化する</programlisting>
    <para>
      意味アクションが未束縛のプレースホルダを持つオブジェクトを評価した場合、<exceptionname linkend="regex_error">regex_error</exceptionname> 型の例外を投げる。
    </para>
    <para>
      <function>xpressive::let()</function> の議論とユーザーガイドの「<link linkend="user_s_guide.semantic_actions_and_user_defined_assertions.referring_to_non_local_variables">非ローカル変数を参照する</link>」の節を見よ。
    </para>

    <refsection>
      <title>使用例：</title>
      <programlisting language="C++">// map オブジェクトに対する placeholder を定義する：
placeholder&lt;std::map&lt;std::string, int&gt; &gt; _map;

// =&gt; で区切られた単語と整数にマッチし
// 結果を std::map&lt;&gt; に詰め込む
sregex pair = ( (s1= +_w) &gt;&gt; "=&gt;" &gt;&gt; (s2= +_d) )
    [ _map[s1] = as&lt;int&gt;(s2) ];

// 空白で区切られた単語、整数の組
// 1 つ以上にマッチする。
sregex rx = pair &gt;&gt; *(+_s &gt;&gt; pair);

// 解析する文字列
std::string str("aaa=&gt;1 bbb=&gt;23 ccc=&gt;456");

// 実際の map：
std::map&lt;std::string, int&gt; result;

// _map プレースホルダを実際の map に束縛する
smatch what;
what.let( _map = result );

// マッチを実行し、結果の map を埋める
if(regex_match(str, what, rx))
{
    std::cout &lt;&lt; result["aaa"] &lt;&lt; '\n';
    std::cout &lt;&lt; result["bbb"] &lt;&lt; '\n';
    std::cout &lt;&lt; result["ccc"] &lt;&lt; '\n';
}</programlisting>
    </refsection>

    <refsection>
      <title>テンプレート引数</title>
      <orderedlist>
	<listitem>
	  <synopsis language="C++">typename T</synopsis>
	  <para>このオブジェクトが代理となるオブジェクトの型。</para>
	</listitem>
	<listitem>
	  <synopsis language="C++">int I = 0</synopsis>
	  <para>このプレースホルダを、同じ意味アクション内で同じ型を持つ他のものと区別するのに使用する省略可能な識別子。</para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="placeholder.construct-copy-destruct">
      <title>placeholder 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="placeholder.operator.0">
	  <methodsynopsis language="C++">
	    <type><replaceable>unspecified</replaceable></type>
	    <methodname>operator=</methodname>
	    <methodparam>
	      <type>T &amp;</type>
	      <parameter>t</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>t</parameter></term>
		    <listitem>
		      <para>このプレースホルダに対応するオブジェクト</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><parameter>t</parameter> と <code language="C++">*this</code> の対応を記録する未規定型のオブジェクト。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="placeholder.operator.1">
	  <methodsynopsis language="C++">
	    <type><replaceable>unspecified</replaceable></type>
	    <methodname>operator=</methodname>
	    <methodparam>
	      <type>T const &amp;</type>
	      <parameter>t</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
