<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="mark_tag">
  <refmeta>
    <refentrytitle>mark_tag 構造体</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::mark_tag</refname>
    <refpurpose>静的正規表現で名前付き捕捉を作成するのに使用する、部分マッチのプレースホルダ型。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_primitives_hpp">boost/xpressive/regex_primitives.hpp</filename>&gt;


struct <classname linkend="mark_tag">mark_tag</classname> {
  // <link linkend="mark_tag.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="mark_tag.mark_tag.0">mark_tag</methodname>(int);

  // <link linkend="mark_tag.private-static-functions">非公開静的メンバ関数</link>
  static <replaceable>unspecified</replaceable> <methodname linkend="mark_tag.mark_tag.1">make_tag</methodname>(int);
};</synopsis>
  </refsynopsisdiv>

  <refsection>
      <title>説明</title>
      <para>
	<classname linkend="mark_tag">mark_tag</classname> は部分マッチのグローバルなプレースホルダ <constant>s0</constant> 、<constant>s1</constant> 、…の型である。<classname linkend="mark_tag">mark_tag</classname> を使用すると、より意味のある名前で部分マッチプレースホルダを作成できる。動的正規表現における「名前付き捕捉」機能とおおよそ等価である。
      </para>
      <para>
	名前付き部分マッチプレースホルダは、一意な整数で初期化して作成する。この整数はプレースホルダを使用する正規表現内で一意でなければならない。静的正規表現内でこれに部分式を代入して部分マッチを作成するか、すでに作成した部分マッチを後方参照できる。
      </para>
      <programlisting language="C++">mark_tag number(1); // number は s1 と等価
// 数字、続いて空白、再び同じ数字にマッチ
sregex rx = (number = +_d) &gt;&gt; ' ' &gt;&gt; number;</programlisting>
      <para>
	<function>regex_match()</function> か <function>regex_search()</function> が成功した後は、部分マッチのプレースホルダを <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトの添字にして、対応する部分マッチを得る。
      </para>

      <refsection xml:id="mark_tag.construct-copy-destruct">
	<title><classname>mark_tag</classname> 構築、コピー、解体の公開演算</title>
	<orderedlist>
	  <listitem xml:id="mark_tag.mark_tag.0">
	    <constructorsynopsis language="C++">
	      <methodname>mark_tag</methodname>
	      <methodparam>
		<type>int</type>
		<parameter>mark_nbr</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <para><classname linkend="mark_tag">mark_tag</classname> プレースホルダを初期化する。</para>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>引数：</term>
		<listitem>
		  <variablelist spacing="compact">
		    <varlistentry>
		      <term><parameter>mark_nbr</parameter></term>
		      <listitem>
			<para>この <classname linkend="mark_tag">mark_tag</classname> を使用する静的正規表現内でこの <classname linkend="mark_tag">mark_tag</classname> を一意に識別する整数。</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><code language="C++">mark_nbr &gt; 0</code></para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </refsection>

      <refsection xml:id="mark_tag.private-static-functions">
	<title><classname>mark_tag</classname> 非公開静的メンバ関数</title>
	<orderedlist>
	  <listitem xml:id="mark_tag.mark_tag.1">
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>make_tag</methodname>
	      <methodparam>
		<type>int</type>
		<parameter>mark_nbr</parameter>
	      </methodparam>
	    </methodsynopsis>
	  </listitem>
	</orderedlist>
      </refsection>
  </refsection>
</refentry>
