<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="let">
  <refmeta>
    <refentrytitle>let 関数テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::let</refname>
    <refpurpose><classname linkend="regex_iterator">regex_iterator</classname> か <classname linkend="regex_token_iterator">regex_token_iterator</classname> の構築時に、意味アクション内でローカル変数をプレースホルダに束縛する。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename... ArgBindings&gt; <replaceable>unspecified</replaceable> <function>let</function>(ArgBindings const &amp;... args);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      <function>xpressive::let()</function> は <methodname>match_results::let()</methodname> と同じ目的で提供している。すなわち、プレースホルダをローカル変数に束縛する。これにより意味アクション付きの正規表現を、その時点で存在していないオブジェクトを参照するよう定義できる。オブジェクトを直接参照するのではなく、意味アクションはプレースホルダを参照でき、プレースホルダの値は後で let 式を用いて指定できる。<function>let()</function> で作成した let 式は、<classname linkend="regex_iterator">regex_iterator</classname> または <classname linkend="regex_token_iterator">regex_token_iterator</classname> のコンストラクタに渡される。
    </para>
    <para>
      さらなる議論については、ユーザーガイドの節<link linkend="user_s_guide.semantic_actions_and_user_defined_assertions.referring_to_non_local_variables">「非ローカル変数を参照する」</link>を見よ。
    </para>
    <para>
      使用例を示す。
    </para>
    <programlisting language="C++">// map オブジェクトに対するプレースホルダを定義する：
placeholder&lt;std::map&lt;std::string, int&gt; &gt; _map;

// =&gt; で区切られた単語と整数の組にマッチし
// 結果を std::map&lt;&gt; に詰め込む
sregex pair = ( (s1= +_w) &gt;&gt; "=&gt;" &gt;&gt; (s2= +_d) )
    [ _map[s1] = as&lt;int&gt;(s2) ];

// 解析する文字列
std::string str("aaa=&gt;1 bbb=&gt;23 ccc=&gt;456");

// 結果を詰め込む実際の map：
std::map&lt;std::string, int&gt; result;

// すべてのマッチを検索するため regex_iterator を作成する
sregex_iterator it(str.begin(), str.end(), pair, let(_map=result));
sregex_iterator end;

// すべてのマッチを素通りし、
// 結果の map を埋める
while(it != end)
    ++it;

std::cout &lt;&lt; result["aaa"] &lt;&lt; '\n';
std::cout &lt;&lt; result["bbb"] &lt;&lt; '\n';
std::cout &lt;&lt; result["ccc"] &lt;&lt; '\n';
</programlisting>
    <para>
      このコードは以下を表示する。
    </para>
    <screen>1
23
456</screen>
    <variablelist spacing="compact">
      <varlistentry>
	<term>引数：</term>
	<listitem>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term><parameter>args</parameter></term>
	      <listitem>
		<para>引数束縛の集合。各引数束縛は代入式であり、その左辺は <classname>placeholder&lt;X&gt;</classname> のインスタンスでなければならず、右辺は型 <type>X</type> の lvalue である。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>
</refentry>
