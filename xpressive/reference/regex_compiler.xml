<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_compiler">
  <refmeta>
    <refentrytitle>regex_compiler 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_compiler</refname>
    <refpurpose><classname linkend="regex_compiler">regex_compiler</classname> クラステンプレートは文字列から <classname linkend="basic_regex">basic_regex</classname> オブジェクトを構築するファクトリである。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_compiler_hpp">boost/xpressive/regex_compiler.hpp</filename>&gt;

template&lt;typename BidiIter, typename RegexTraits, typename CompilerTraits&gt; 
struct <classname linkend="regex_compiler">regex_compiler</classname> {
  // 型
  typedef BidiIter                            iterator_type;  
  typedef iterator_value&lt; BidiIter &gt;::type    char_type;      
  typedef regex_constants::syntax_option_type flag_type;      
  typedef RegexTraits                         traits_type;    
  typedef traits_type::string_type            string_type;    
  typedef traits_type::locale_type            locale_type;    
  typedef traits_type::char_class_type        char_class_type;

  // <link linkend="regex_compiler.construct-copy-destruct">構築、コピー、解体</link>
  explicit <methodname linkend="regex_compiler.regex_compiler">regex_compiler</methodname>(RegexTraits const &amp; = RegexTraits());

  // <link linkend="regex_compiler.public-member-functions">公開メンバ関数</link>
  locale_type <methodname linkend="regex_compiler.imbue">imbue</methodname>(locale_type);
  locale_type <methodname linkend="regex_compiler.getloc">getloc</methodname>() const;
  template&lt;typename InputIter&gt; 
    <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; 
    <methodname linkend="regex_compiler.compile.0">compile</methodname>(InputIter, InputIter, flag_type = regex_constants::ECMAScript);
  template&lt;typename InputRange&gt; 
    disable_if&lt; is_pointer&lt; InputRange &gt;, <class linkend="basic_regex">basic_regex</class>&lt; BidiIter &gt; &gt;::type 
    <methodname linkend="regex_compiler.compile.1">compile</methodname>(InputRange const &amp;, flag_type = regex_constants::ECMAScript);
  <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; 
  <methodname linkend="regex_compiler.compile.2">compile</methodname>(char_type const *, flag_type = regex_constants::ECMAScript);
  <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; <methodname linkend="regex_compiler.compile.3">compile</methodname>(char_type const *, std::size_t, flag_type);
  <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; &amp; <methodname linkend="regex_compiler.operator.0">operator[]</methodname>(string_type const &amp;);
  <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; <methodname linkend="regex_compiler.operator.0">operator[]</methodname>(string_type const &amp;) const;

  // <link linkend="regex_compiler.private-member-functions">非公開メンバ関数</link>
  bool <methodname linkend="regex_compiler.is_upper_">is_upper_</methodname>(char_type) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      <classname linkend="regex_compiler">regex_compiler</classname> クラステンプレートは、文字列から <classname linkend="basic_regex">basic_regex</classname> オブジェクトを構築するのに使用する。文字列は正しい正規表現でなければならない。<classname linkend="regex_compiler">regex_compiler</classname> オブジェクトにロカールを指示すると、以降その <classname linkend="regex_compiler">regex_compiler</classname> オブジェクトが作成する <classname linkend="basic_regex">basic_regex</classname> オブジェクトはすべてそのロカールを使用する。<classname linkend="regex_compiler">regex_compiler</classname> オブジェクト作成後、（必要であればロカールを与え、）正規表現を表す文字列を使って<methodname>compile()</methodname> メソッドを呼び出すことで <classname linkend="basic_regex">basic_regex</classname> オブジェクトを構築する。同じ <classname linkend="regex_compiler">regex_compiler</classname> オブジェクトに対して <methodname>compile()</methodname> は複数回呼び出すことができる。同じ文字列からコンパイルした 2 つの <classname linkend="basic_regex">basic_regex</classname> オブジェクトは異なる <type>regex_id</type> をもつ。
    </para>

    <refsection xml:id="regex_compiler.construct-copy-destruct">
      <title>regex_compiler 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem>
	  <constructorsynopsis language="C++">
	    <methodname>regex_compiler</methodname>
	    <methodparam>
	      <type>RegexTraits const &amp;</type>
	      <parameter>traits</parameter>
	      <initializer>RegexTraits()</initializer>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="regex_compiler.public-member-functions">
      <title>regex_compiler 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="regex_compiler.imbue">
	  <methodsynopsis language="C++">
	    <type>locale_type</type>
	    <methodname>imbue</methodname>
	    <methodparam>
	      <type>locale_type</type>
	      <parameter>loc</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>
	    <classname linkend="regex_compiler">regex_compiler</classname> が使用するロカールを指定する。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>loc</parameter></term>
		    <listitem>
		      <para>この <classname linkend="regex_compiler">regex_compiler</classname> が使用するロカール。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>直前のロカール。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_compiler.getloc">
	  <methodsynopsis language="C++">
	    <type>locale_type</type>
	    <methodname>getloc</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>
	    <classname linkend="regex_compiler">regex_compiler</classname> が使用しているロカールを返す。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>この <classname linkend="regex_compiler">regex_compiler</classname> が使用しているロカール。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_compiler.compile.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename InputIter&gt;</modifier>
	    <type>basic_regex&lt; BidiIter &gt;</type>
	    <methodname>compile</methodname>
	    <methodparam>
	      <type>InputIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>InputIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	    <methodparam>
	      <type>flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>regex_constants::ECMAScript</initializer>
	    </methodparam>
	  </methodsynopsis>
	  <para>
	    文字の範囲から <classname linkend="basic_regex">basic_regex</classname> オブジェクトを構築する。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>begin</parameter></term>
		    <listitem>
		      <para>コンパイルする正規表現を表す文字範囲の先頭。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>end</parameter></term>
		    <listitem>
		      <para>コンパイルする正規表現を表す文字範囲の終端。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>flags</parameter></term>
		    <listitem>
		      <para>パターン文字列をどのように解釈するか決める省略可能なビットマスク（<type role="typedef">syntax_option_type</type> を見よ）。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para><type>InputIter</type> が入力イテレータの要件を満たす。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para><code>[begin, end)</code> が有効な範囲である。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para><code>[begin, end)</code> で指定した文字範囲が正しい正規表現の文字列表現である。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>文字範囲が表す正規表現に相当する <classname linkend="basic_regex">basic_regex</classname> オブジェクト。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>文字範囲に不正な正規表現構文がある場合 <exceptionname linkend="regex_error">regex_error</exceptionname>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_compiler.compile.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename InputRange&gt;</modifier>
	    <type>disable_if&lt; is_pointer&lt; InputRange &gt;, basic_regex&lt; BidiIter &gt; &gt;::type</type>
	    <methodname>compile</methodname>
	    <methodparam>
	      <type>InputRange const &amp;</type>
	      <parameter>pat</parameter>
	    </methodparam>
	    <methodparam>
	      <type>flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>regex_constants::ECMAScript</initializer>
	    </methodparam>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="regex_compiler.compile.2">
	  <methodsynopsis language="C++">
	    <modifier>basic_regex&lt; BidiIter &gt;</modifier>
	    <methodname>compile</methodname>
	    <methodparam>
	      <type>char_type const *</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>regex_constants::ECMAScript</initializer>
	    </methodparam>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="regex_compiler.compile.3">
	  <methodsynopsis language="C++">
	    <modifier>basic_regex&lt; BidiIter &gt;</modifier>
	    <methodname>compile</methodname>
	    <methodparam>
	      <type>char_type const *</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>std::size_t</type>
	      <parameter>size</parameter>
	    </methodparam>
	    <methodparam>
	      <type>flag_type</type>
	      <parameter>flags</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="regex_compiler.operator.0">
	  <methodsynopsis language="C++">
	    <modifier>basic_regex&lt; BidiIter &gt; &amp;</modifier>
	    <methodname>operator[]</methodname>
	    <methodparam>
	      <type>string_type const &amp;</type>
	      <parameter>name</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>
	    名前付き正規表現への参照を返す。指定した名前をもつ正規表現が存在しない場合は、新しい正規表現を作成し参照を返す。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>name</parameter></term>
		    <listitem>
		      <para>正規表現の名前を表す <classname>std::string</classname>。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>文字列が空でない。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>メモリ確保に失敗した場合 <exceptionname>bad_alloc</exceptionname>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_compiler.operator.1">
	  <methodsynopsis language="C++">
	    <type>basic_regex&lt; BidiIter &gt; const &amp;</type>
	    <methodname>operator[]</methodname>
	    <methodparam>
	      <type>string_type const &amp;</type>
	      <parameter>name</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="regex_compiler.private-member-functions">
      <title><classname>regex_compiler</classname> 非公開メンバ関数</title>

      <orderedlist>
	<listitem xml:id="regex_compiler.is_upper_">
	  <methodsynopsis language="C++">
	    <type>bool</type>
	    <methodname>is_upper_</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
