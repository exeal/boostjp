<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_match">
  <refmeta>
    <refentrytitle>regex_match 関数</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_match</refname>
    <refpurpose>正規表現がシーケンスの先頭から終端までにマッチするか調べる。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_algorithms_hpp">boost/xpressive/regex_algorithms.hpp</filename>&gt;


template&lt;typename BidiIter&gt; 
  bool regex_match(BidiIter begin, BidiIter end, 
                   <classname linkend="match_results">match_results</classname>&lt; BidiIter &gt; &amp; what, 
                   <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template&lt;typename BidiIter&gt; 
  bool regex_match(BidiIter begin, BidiIter end, 
                   <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template&lt;typename Char&gt; 
  bool regex_match(Char * begin, <classname linkend="match_results">match_results</classname>&lt; Char * &gt; &amp; what, 
                   <classname linkend="basic_regex">basic_regex</classname>&lt; Char * &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template&lt;typename BidiRange, typename BidiIter&gt; 
  bool regex_match(BidiRange &amp; rng, <classname linkend="match_results">match_results</classname>&lt; BidiIter &gt; &amp; what, 
                   <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   <replaceable>unspecified</replaceable> = 0);
template&lt;typename BidiRange, typename BidiIter&gt; 
  bool regex_match(BidiRange const &amp; rng, <classname linkend="match_results">match_results</classname>&lt; BidiIter &gt; &amp; what, 
                   <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   <replaceable>unspecified</replaceable> = 0);
template&lt;typename Char&gt; 
  bool regex_match(Char * begin, <classname linkend="basic_regex">basic_regex</classname>&lt; Char * &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default);
template&lt;typename BidiRange, typename BidiIter&gt; 
  bool regex_match(BidiRange &amp; rng, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   <replaceable>unspecified</replaceable> = 0);
template&lt;typename BidiRange, typename BidiIter&gt; 
  bool regex_match(BidiRange const &amp; rng, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp; re, 
                   regex_constants::match_flag_type flags = regex_constants::match_default, 
                   <replaceable>unspecified</replaceable> = 0);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
      
    <para>
      正規表現 <parameter class="function">re</parameter> とシーケンス <code>[begin, end)</code> 全体の間に完全なマッチがあるか確定する。
    </para>
      
    <variablelist spacing="compact">
      <varlistentry>
	<term>引数：</term>
	<listitem>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term><parameter>begin</parameter></term>
	      <listitem>
		<para>シーケンスの先頭。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>end</parameter></term>
	      <listitem>
		<para>シーケンスの終端。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>flags</parameter></term>
	      <listitem>
		<para>正規表現をシーケンスに対してどのようにマッチさせるか制御する、省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>re</parameter></term>
	      <listitem>
		<para>使用する正規表現オブジェクト。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term><parameter>what</parameter></term>
	      <listitem>
		<para><classname>sub_match</classname> を書き込む <classname linkend="match_results">match_results</classname> 構造体。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para>型 <parameter>BidiIter</parameter> が双方向イテレータ（24.1.4）の要件を満たす。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para><code>[begin, end)</code> が有効なイテレータ範囲を表す。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>戻り値：</term>
	<listitem>
	  <para>マッチが見つかった場合は <literal>true</literal> 、それ以外の場合は <literal>false</literal>。</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>例外：</term>
	<listitem>
	  <para>スタックが枯渇した場合 <exceptionname linkend="regex_error">regex_error</exceptionname></para>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>
</refentry>
