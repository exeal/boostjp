<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_token_iterator">
  <refmeta>
    <refentrytitle>regex_token_iterator 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_token_iterator</refname>
    <refpurpose/>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_token_iterator_hpp">boost/xpressive/regex_token_iterator.hpp</filename>&gt;

template&lt;typename BidiIter&gt; 
struct <classname linkend="regex_token_iterator">regex_token_iterator</classname> {
  // 型
  typedef basic_regex&lt; BidiIter &gt;          regex_type;       
  typedef iterator_value&lt; BidiIter &gt;::type char_type;        
  typedef sub_match&lt; BidiIter &gt;            value_type;       
  typedef std::ptrdiff_t                   difference_type;  
  typedef value_type const *               pointer;          
  typedef value_type const &amp;               reference;        
  typedef std::forward_iterator_tag        iterator_category;

  // <link linkend="regex_token_iterator.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="regex_token_iterator.regex_token_iterator.0">regex_token_iterator</methodname>();
  <methodname linkend="regex_token_iterator.regex_token_iterator.1">regex_token_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;);
  template&lt;typename LetExpr&gt; 
    <methodname linkend="regex_token_iterator.regex_token_iterator.2">regex_token_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;, 
                         <replaceable>unspecified</replaceable>);
  template&lt;typename Subs&gt; 
    <methodname linkend="regex_token_iterator.regex_token_iterator.3">regex_token_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;, 
                         Subs const &amp;, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  template&lt;typename Subs, typename LetExpr&gt; 
    <methodname linkend="regex_token_iterator.regex_token_iterator.4">regex_token_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;, 
                         Subs const &amp;, <replaceable>unspecified</replaceable>, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  <methodname linkend="regex_token_iterator.regex_token_iterator.5">regex_token_iterator</methodname>(<classname linkend="regex_token_iterator">regex_token_iterator</classname>&lt; BidiIter &gt; const &amp;);
  <classname linkend="regex_token_iterator">regex_token_iterator</classname>&lt; BidiIter &gt;&amp; <methodname linkend="regex_token_iterator.operator.0">operator=</methodname>(<classname linkend="regex_token_iterator">regex_token_iterator</classname>&lt; BidiIter &gt; const &amp;);

  // <link linkend="regex_token_iterator.public-member-functions">公開メンバ関数</link>
  value_type const &amp; <methodname linkend="regex_token_iterator.operator.1">operator*</methodname>() const;
  value_type const * <methodname linkend="regex_token_iterator.operator.2">operator-&gt;</methodname>() const;
  <classname linkend="regex_token_iterator">regex_token_iterator</classname>&lt; BidiIter &gt; &amp; <methodname linkend="regex_token_iterator.operator.3">operator++</methodname>();
  <classname linkend="regex_token_iterator">regex_token_iterator</classname>&lt; BidiIter &gt; <methodname linkend="regex_token_iterator.operator.4">operator++</methodname>(int);
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection xml:id="regex_token_iterator.construct-copy-destruct">
      <title><classname>regex_token_iterator</classname> 構築、コピー、解体の公開演算</title>
	<orderedlist>
	  <listitem xml:id="regex_token_iterator.regex_token_iterator.0">
	    <constructorsynopsis language="C++">
	      <methodname>regex_token_iterator</methodname>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para><code language="C++">*this</code> がシーケンスイテレータの終端。</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.regex_token_iterator.1">
	    <constructorsynopsis language="C++">
	      <methodname>regex_token_iterator</methodname>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>begin</parameter>
	      </methodparam>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>end</parameter>
	      </methodparam>
	      <methodparam>
		<type>basic_regex&lt; BidiIter &gt; const &amp;</type>
		<parameter>rex</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>引数：</term>
		<listitem>
		  <variablelist spacing="compact">
		    <varlistentry>
		      <term><parameter>begin</parameter></term>
		      <listitem>
			<para>検索する文字範囲の先頭。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>end</parameter></term>
		      <listitem>
			<para>検索する文字範囲の終端。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>rex</parameter></term>
		      <listitem>
			<para>検索する正規表現パターン。</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><code>[begin,end)</code> が有効な範囲。</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.regex_token_iterator.2">
	    <constructorsynopsis language="C++">
	      <modifier>template&lt;typename LetExpr&gt;</modifier>
	      <methodname>regex_token_iterator</methodname>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>begin</parameter>
	      </methodparam>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>end</parameter>
	      </methodparam>
	      <methodparam>
		<type>basic_regex&lt; BidiIter &gt; const &amp;</type>
		<parameter>rex</parameter>
	      </methodparam>
	      <methodparam>
		<type><replaceable>unspecified</replaceable></type>
		<parameter>args</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>引数：</term>
		<listitem>
		  <variablelist spacing="compact">
		    <varlistentry>
		      <term><parameter>begin</parameter></term>
		      <listitem>
			<para>検索する文字範囲の先頭。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>end</parameter></term>
		      <listitem>
			<para>検索する文字範囲の終端。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>rex</parameter></term>
		      <listitem>
			<para>検索する正規表現パターン。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>args</parameter></term>
		      <listitem>
			<para>意味アクションに対して引数束縛した <function>let()</function> 式。</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><code>[begin,end)</code> が有効な範囲。</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.regex_token_iterator.3">
	    <constructorsynopsis language="C++">
	      <modifier>template&lt;typename Subs&gt;</modifier>
	      <methodname>regex_token_iterator</methodname>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>begin</parameter>
	      </methodparam>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>end</parameter>
	      </methodparam>
	      <methodparam>
		<type>basic_regex&lt; BidiIter &gt; const &amp;</type>
		<parameter>rex</parameter>
	      </methodparam>
	      <methodparam>
		<type>Subs const &amp;</type>
		<parameter>subs</parameter>
	      </methodparam>
	      <methodparam>
		<type>regex_constants::match_flag_type</type>
		<parameter>flags</parameter>
		<initializer>regex_constants::match_default</initializer>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>引数：</term>
		<listitem>
		  <variablelist spacing="compact">
		    <varlistentry>
		      <term><parameter>begin</parameter></term>
		      <listitem>
			<para>検索する文字範囲の先頭。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>end</parameter></term>
		      <listitem>
			<para>検索する文字範囲の終端。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>rex</parameter></term>
		      <listitem>
			<para>検索する正規表現パターン。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>subs</parameter></term>
		      <listitem>
			<para>トークンとして扱う部分マッチを表す整数範囲。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>flags</parameter></term>
		      <listitem>
			<para>シーケンスに対して正規表現がどのようにマッチするかを制御する省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><code>[begin,end)</code> が有効な範囲。</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><parameter class="function">subs</parameter> が <literal>-1</literal> 以上の整数、あるいは全要素が <literal>-1</literal> 以上の整数である配列か空でない <classname>std::vector&lt;&gt;</classname> のいずれか。</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.regex_token_iterator.4">
	    <constructorsynopsis language="C++">
	      <modifier>template&lt;typename Subs, typename LetExpr&gt;</modifier>
	      <methodname>regex_token_iterator</methodname>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>begin</parameter>
	      </methodparam>
	      <methodparam>
		<type>BidiIter</type>
		<parameter>end</parameter>
	      </methodparam>
	      <methodparam>
		<type>basic_regex&lt; BidiIter &gt; const &amp;</type>
		<parameter>rex</parameter>
	      </methodparam>
	      <methodparam>
		<type>Subs const &amp;</type>
		<parameter>subs</parameter>
	      </methodparam>
	      <methodparam>
		<type><replaceable>unspecified</replaceable></type>
		<parameter>args</parameter>
	      </methodparam>
	      <methodparam>
		<type>regex_constants::match_flag_type</type>
		<parameter>flags</parameter>
		<initializer>regex_constants::match_default</initializer>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>引数：</term>
		<listitem>
		  <variablelist spacing="compact">
		    <varlistentry>
		      <term><parameter>begin</parameter></term>
		      <listitem>
			<para>検索する文字範囲の先頭。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>end</parameter></term>
		      <listitem>
			<para>検索する文字範囲の終端。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>rex</parameter></term>
		      <listitem>
			<para>検索する正規表現パターン。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>subs</parameter></term>
		      <listitem>
			<para>トークンとして扱う部分マッチを表す整数範囲。</para>
		      </listitem>
		    </varlistentry>
		    <varlistentry>
		      <term><parameter>flags</parameter></term>
		      <listitem>
			<para>シーケンスに対して正規表現がどのようにマッチするかを制御する省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</para>
		      </listitem>
		    </varlistentry>
		  </variablelist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><code>[begin,end)</code> が有効な範囲。</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para><parameter>subs</parameter> が <literal>-1</literal> 以上の整数、あるいは全要素が <literal>-1</literal> 以上の整数である配列か空でない <classname>std::vector&lt;&gt;</classname> のいずれか。</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.regex_token_iterator.5">
	    <constructorsynopsis language="C++">
	      <methodname>regex_token_iterator</methodname>
	      <methodparam>
		<type>regex_token_iterator&lt; BidiIter &gt; const &amp;</type>
		<parameter>that</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para><code language="C++">*this == that</code></para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.operator.0">
	    <methodsynopsis language="C++">
	      <type>regex_token_iterator&lt; BidiIter &gt;&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>regex_token_iterator&lt; BidiIter &gt; const &amp;</type>
		<parameter>that</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para><code language="C++">*this == that</code></para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </refsection>

      <refsection xml:id="regex_token_iterator.public-member-functions">
	<title><classname>regex_token_iterator</classname> 公開メンバ関数</title>

	<orderedlist>
	  <listitem xml:id="regex_token_iterator.operator.1">
	    <methodsynopsis language="C++">
	      <type>value_type const &amp;</type>
	      <methodname>operator*</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.operator.2">
	    <methodsynopsis language="C++">
	      <type>value_type const *</type>
	      <methodname>operator-&gt;</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.operator.3">
	    <methodsynopsis language="C++">
	      <type>regex_token_iterator&lt; BidiIter &gt; &amp;</type>
	      <methodname>operator++</methodname>
	      <void/>
	    </methodsynopsis>
	    <para>
	      <code language="C++">N == -1</code> であれば <code language="C++">*this</code> をシーケンスイテレータの終端と同値に設定する。
	      <footnote>
		<para>
		  訳注　<varname>N</varname> の説明は原文にもありませんが、構築直後は 0 である内部変数です。
		</para>
	      </footnote>
	      <code language="C++">N+1 &lt; subs.size()</code> であれば <varname>N</varname> を <literal>1</literal> 増やし、結果を <code language="C++">((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str()))</code> と同値に設定する。それ以外の場合は、<code language="C++">what.prefix().first != what[0].second</code> かつ <constant>match_prev_avail</constant> 要素がフラグに設定されていなければ設定する。次に <code language="C++">regex_search(what[0].second, end, what, *pre, flags)</code> を呼び出したのと同様の振る舞いをする。ただし以下の点については振る舞いが異なる。前回見つかったマッチがゼロ幅（<code language="C++">what[0].length() == 0</code>）の場合、<code language="C++">what[0].second</code> を先頭とする非ゼロ幅マッチを探索する。これが失敗し、かつ <code language="C++">what[0].second != suffix().second</code> である場合に限り <code language="C++">what[0].second + 1</code> を先頭とするマッチ（これもゼロ幅かもしれない）を探索する。そのようなマッチが見つかった場合は <varname>N</varname> を <literal>0</literal> に設定し、結果を <code language="C++">((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str()))</code> と同値に設定する。マッチが見つからなかった場合は <varname>last_end</varname> を最後に見つかったマッチの終端に設定し、<code language="C++">last_end != end</code> かつ <code language="C++">subs[0] == -1</code> であれば <varname>N</varname> を <literal>-1</literal> に、結果を <code language="C++">value_type(last_end, end)</code> と同値に設定する。それ以外の場合は <code language="C++">*this</code> をシーケンスの終端イテレータと等値に設定する。
	    </para>
	  </listitem>

	  <listitem xml:id="regex_token_iterator.operator.4">
	    <methodsynopsis language="C++">
	      <type>regex_token_iterator&lt; BidiIter &gt;</type>
	      <methodname>operator++</methodname>
	      <methodparam>
		<type>int</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	  </listitem>
	</orderedlist>
      </refsection>
  </refsection>
</refentry>
