<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>&lt;boost/xpressive/regex_token_iterator.hpp&gt; ヘッダ</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    <classname>regex_token_iterator</classname> の定義と、正規表現を使って文字列をトークンに分割する STL 互換のイテレータがある。
  </para>

  <synopsis language="C++">namespace boost {
  namespace xpressive {
    template&lt;typename BidiIter&gt; struct regex_token_iterator;
  }
}</synopsis>

  <section>
    <title>regex_token_iterator 構造体テンプレート</title>
    <para>boost::xpressive::regex_token_iterator。</para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_token_iterator.hpp&gt;

template&lt;typename BidiIter&gt; 
struct regex_token_iterator {
  // 型
  typedef basic_regex&lt; BidiIter &gt;          regex_type;       
  typedef iterator_value&lt; BidiIter &gt;::type char_type;        
  typedef sub_match&lt; BidiIter &gt;            value_type;       
  typedef std::ptrdiff_t                   difference_type;  
  typedef value_type const *               pointer;          
  typedef value_type const &amp;               reference;        
  typedef std::forward_iterator_tag        iterator_category;

  // 構築、コピー、解体
  regex_token_iterator();
  regex_token_iterator(BidiIter, BidiIter, basic_regex&lt; BidiIter &gt; const &amp;);
  template&lt;typename LetExpr&gt; 
    regex_token_iterator(BidiIter, BidiIter, basic_regex&lt; BidiIter &gt; const &amp;, 
                         <replaceable>unspecified</replaceable>);
  template&lt;typename Subs&gt; 
    regex_token_iterator(BidiIter, BidiIter, basic_regex&lt; BidiIter &gt; const &amp;, 
                         Subs const &amp;, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  template&lt;typename Subs, typename LetExpr&gt; 
    regex_token_iterator(BidiIter, BidiIter, basic_regex&lt; BidiIter &gt; const &amp;, 
                         Subs const &amp;, <replaceable>unspecified</replaceable>, 
                         regex_constants::match_flag_type = regex_constants::match_default);
  regex_token_iterator(regex_token_iterator&lt; BidiIter &gt; const &amp;);
  regex_token_iterator&lt; BidiIter &gt;&amp; operator=(regex_token_iterator&lt; BidiIter &gt; const &amp;);

  // 公開メンバ関数
  value_type const &amp; operator*() const;
  value_type const * operator-&gt;() const;
  regex_token_iterator&lt; BidiIter &gt; &amp; operator++();
  regex_token_iterator&lt; BidiIter &gt; operator++(int);
};</synopsis>
    </section>

    <section>
      <title>説明</title>

      <section>
	<title>regex_token_iterator 構築、コピー、解体の公開演算</title>
	<orderedlist>
	  <listitem>
	    <synopsis language="C++">regex_token_iterator();</synopsis>
	    <informaltable>
	      <tr>
		<th>事後条件：</th>
		<td><code language="C++">*this</code> がシーケンスイテレータの終端。</td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">regex_token_iterator(BidiIter begin, BidiIter end,
                     basic_regex&lt; BidiIter &gt; const &amp; rex);</synopsis>
	    <informaltable>
	      <tr>
		<th rowspan="3">引数：</th>
		<td><parameter class="function">begin</parameter></td>
		<td>検索する文字範囲の先頭。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">end</parameter></td>
		<td>検索する文字範囲の終端。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">rex</parameter></td>
		<td>検索する正規表現パターン。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><code>[begin,end)</code> が有効な範囲。</td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">template&lt;typename LetExpr&gt;
  regex_token_iterator(BidiIter begin, BidiIter end,
                       basic_regex&lt; BidiIter &gt; const &amp; rex, unspecified args);</synopsis>
	    <informaltable>
	      <tr>
		<th rowspan="4">引数：</th>
		<td><parameter class="function">begin</parameter></td>
		<td>検索する文字範囲の先頭。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">end</parameter></td>
		<td>検索する文字範囲の終端。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">rex</parameter></td>
		<td>検索する正規表現パターン。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">args</parameter></td>
		<td>意味アクションに対して引数束縛した <function>let()</function> 式。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><code>[begin,end)</code> が有効な範囲。</td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">template&lt;typename Subs&gt;
  regex_token_iterator(BidiIter begin, BidiIter end, 
                       basic_regex&lt; BidiIter &gt; const &amp; rex, 
                       Subs const &amp; subs, 
                       regex_constants::match_flag_type flags = regex_constants::match_default);</synopsis>
	    <informaltable>
	      <tr>
		<th rowspan="5">引数：</th>
		<td><parameter class="function">begin</parameter></td>
		<td>検索する文字範囲の先頭。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">end</parameter></td>
		<td>検索する文字範囲の終端。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">rex</parameter></td>
		<td>検索する正規表現パターン。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">subs</parameter></td>
		<td>トークンとして扱う部分マッチを表す整数範囲。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">flags</parameter></td>
		<td>シーケンスに対して正規表現がどのようにマッチするかを制御する省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><code>[begin,end)</code> が有効な範囲。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><parameter class="function">subs</parameter> が <literal>-1</literal> 以上の整数、あるいは全要素が <literal>-1</literal> 以上の整数である配列か空でない <classname>std::vector&lt;&gt;</classname> のいずれか。</td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">template&lt;typename Subs, typename LetExpr&gt;
  regex_token_iterator(BidiIter begin, BidiIter end, 
                       basic_regex&lt; BidiIter &gt; const &amp; rex, 
                       Subs const &amp; subs, <replaceable>unspecified</replaceable> args, 
                       regex_constants::match_flag_type flags = regex_constants::match_default);</synopsis>
	    <informaltable>
	      <tr>
		<th rowspan="5">引数：</th>
		<td><parameter class="function">begin</parameter></td>
		<td>検索する文字範囲の先頭。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">end</parameter></td>
		<td>検索する文字範囲の終端。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">rex</parameter></td>
		<td>検索する正規表現パターン。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">subs</parameter></td>
		<td>トークンとして扱う部分マッチを表す整数範囲。</td>
	      </tr>
	      <tr>
		<td><parameter class="function">flags</parameter></td>
		<td>シーケンスに対して正規表現がどのようにマッチするかを制御する省略可能なマッチフラグ（<type role="enum">match_flag_type</type> を見よ）。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><code>[begin,end)</code> が有効な範囲。</td>
	      </tr>
	      <tr>
		<th>要件：</th>
		<td colspan="2"><parameter class="function">subs</parameter> が <literal>-1</literal> 以上の整数、あるいは全要素が <literal>-1</literal> 以上の整数である配列か空でない <classname>std::vector&lt;&gt;</classname> のいずれか。</td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">regex_token_iterator(regex_token_iterator&lt; BidiIter &gt; const &amp; that);</synopsis>
	    <informaltable>
	      <tr>
		<th>事後条件：</th>
		<td><code language="C++">*this == that</code></td>
	      </tr>
	    </informaltable>
	  </listitem>

	  <listitem>
	    <synopsis language="C++">regex_token_iterator&lt; BidiIter &gt;&amp; operator=(regex_token_iterator&lt; BidiIter &gt; const &amp; that);</synopsis>
	    <informaltable>
	      <tr>
		<th>事後条件：</th>
		<td><code language="C++">*this == that</code></td>
	      </tr>
	    </informaltable>
	  </listitem>
	</orderedlist>
      </section>

      <section>
	<title>regex_token_iterator 公開メンバ関数</title>
	<orderedlist>
	  <listitem>
	    <synopsis language="C++">value_type const &amp; operator*() const;</synopsis>
	  </listitem>
	  <listitem>
	    <synopsis language="C++">value_type const * operator-&gt;() const;</synopsis>
	  </listitem>
	  <listitem>
	    <synopsis language="C++">regex_token_iterator&lt; BidiIter &gt; &amp; operator++();</synopsis>
	    <para>
	      <code language="C++">N == -1</code> であれば <code language="C++">*this</code> をシーケンスイテレータの終端と同値に設定する。
	      <footnote>
		<para>
		  訳注　<varname>N</varname> の説明は原文にもありませんが、構築直後は 0 である内部変数です。
		</para>
	      </footnote>
	      <code language="C++">N+1 &lt; subs.size()</code> であれば <varname>N</varname> を <literal>1</literal> 増やし、結果を <code language="C++">((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str()))</code> と同値に設定する。それ以外の場合は、<code language="C++">what.prefix().first != what[0].second</code> かつ <constant>match_prev_avail</constant> 要素がフラグに設定されていなければ設定する。次に <code language="C++">regex_search(what[0].second, end, what, *pre, flags)</code> を呼び出したのと同様の振る舞いをする。ただし以下の点については振る舞いが異なる。前回見つかったマッチがゼロ幅（<code language="C++">what[0].length() == 0</code>）の場合、<code language="C++">what[0].second</code> を先頭とする非ゼロ幅マッチを探索する。これが失敗し、かつ <code language="C++">what[0].second != suffix().second</code> である場合に限り <code language="C++">what[0].second + 1</code> を先頭とするマッチ（これもゼロ幅かもしれない）を探索する。そのようなマッチが見つかった場合は <varname>N</varname> を <literal>0</literal> に設定し、結果を <code language="C++">((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str()))</code> と同値に設定する。マッチが見つからなかった場合は <varname>last_end</varname> を最後に見つかったマッチの終端に設定し、<code language="C++">last_end != end</code> かつ <code language="C++">subs[0] == -1</code> であれば <varname>N</varname> を <literal>-1</literal> に、結果を <code language="C++">value_type(last_end, end)</code> と同値に設定する。それ以外の場合は <code language="C++">*this</code> をシーケンスの終端イテレータと等値に設定する。
	    </para>
	  </listitem>
	  <listitem>
	    <synopsis language="C++">regex_token_iterator&lt; BidiIter &gt; operator++(int);</synopsis>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>
</article>
