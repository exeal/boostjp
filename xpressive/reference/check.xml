<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="check">
  <refmeta>
    <refentrytitle>check 関数テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::check</refname>
    <refpurpose>正規表現にユーザー定義表明を追加する。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename T&gt; <replaceable>unspecified</replaceable> <function>check</function>(T const &amp; t);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      <link linkend="user_s_guide.semantic_actions_and_user_defined_assertions.user_defined_assertions">ユーザー定義表明</link>は、論理型のラムダを評価する意味アクションの一種である（評価結果が偽であれば、文字列内の当該位置でマッチは失敗となる）。結果的にバックトラッキングが起こり、最終的にはマッチが成功する可能性がある。
    </para>
    <para>
      <function>check()</function> を使用して正規表現内でユーザー定義表明を指定するには、次の構文を使用する。
    </para>
    <programlisting language="C++">sregex s = (_d &gt;&gt; _d)[check( XXX )]; // XXX はカスタムの表明</programlisting>
    <para>
      表明は <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトとともに評価される。このオブジェクトは、表明をアタッチした部分式が文字列のどの部分にマッチしたかを表したものである。
    </para>
    <para>
      次に示すように、<function>check()</function> は <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトを引数にとる通常の述語とともに使用できる。
    </para>
    <programlisting language="C++">// 部分マッチの長さが 3 か 6 のいずれかであれば
// 真となる述語。
struct three_or_six
{
    bool operator()(ssub_match const &amp;sub) const
    {
        return sub.length() == 3 || sub.length() == 6;
    }
};

// 3 文字か 6 文字の単語にマッチする。
sregex rx = (bow &gt;&gt; +_w &gt;&gt; eow)[ check(three_or_six()) ] ;</programlisting>
    <para>
      あるいは <function>check()</function> は、意味アクションを定義する場合と同じ構文でインラインのカスタム表明を定義するのに使用できる。次のコードは 1 つ前のものと等価である。
    </para>
    <programlisting language="C++">// 3 文字か 6 文字の単語にマッチする。
sregex rx = (bow &gt;&gt; +_w &gt;&gt; eow)[ check(length(_)==3 || length(_)==6) ] ;</programlisting>
    <para>
      カスタム表明内では <constant>_</constant> が <classname linkend="sub_match">sub_match&lt;&gt;</classname> のプレースホルダとなり、文字列のどの部分がカスタム表明をアタッチした部分式にマッチしたかを表す。
    </para>
    <variablelist spacing="compact">
      <varlistentry>
	<term>引数：</term>
	<listitem>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term><parameter>t</parameter></term>
	      <listitem>
		<para>UnaryPredicate オブジェクトか論理型の意味アクション</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </varlistentry>
    </variablelist>
  </refsection>
</refentry>
