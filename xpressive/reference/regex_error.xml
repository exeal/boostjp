<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_error">
  <refmeta>
    <refentrytitle>regex_error 構造体</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_error</refname>
    <refpurpose>
      <classname linkend="regex_error">regex_error</classname> クラスは、正規表現を表す文字列を有限状態マシンに変換するときに、エラーを報告するのに送出する例外オブジェクトの型を定義する。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_error_hpp">boost/xpressive/regex_error.hpp</filename>&gt;


struct <classname linkend="regex_error">regex_error</classname> : public std::runtime_error, public exception {
  // <link linkend="regex_error.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="regex_error.regex_error">regex_error</methodname>(regex_constants::error_type, char const * = "");
  <methodname linkend="regex_error.-regex_error">~regex_error</methodname>();

  // <link linkend="regex_error.public-member-functions">公開メンバ関数</link>
  regex_constants::error_type <methodname linkend="regex_error.code">code</methodname>() const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection xml:id="regex_error.construct-copy-destruct">
      <title><classname>regex_error</classname> 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="regex_error.regex_error">
	  <constructorsynopsis language="C++">
	    <modifier>explicit</modifier>
	    <methodname>regex_error</methodname>
	    <methodparam>
	      <type>regex_constants::error_type</type>
	      <parameter>code</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char const *</type>
	      <parameter>str</parameter>
	      <initializer>""</initializer>
	    </methodparam>
	  </constructorsynopsis>
	  <para><classname linkend="regex_error">regex_error</classname> クラスのオブジェクトを構築する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>code</parameter></term>
		    <listitem>
		      <para>この <classname linkend="regex_error">regex_error</classname> が表す <type role="enum">error_type</type>。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>str</parameter></term>
		    <listitem>
		      <para>この <classname linkend="regex_error">regex_error</classname> のメッセージ文字列。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">code() == code</code></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_error.-regex_error">
	  <destructorsynopsis language="C++">
	    <methodname>~regex_error</methodname>
	  </destructorsynopsis>
	  <para><classname linkend="regex_error">regex_error</classname> クラスのデストラクタ。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>例外は送出しない。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="regex_error.public-member-functions">
      <title><classname>regex_error</classname> 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="regex_error.code">
	  <methodsynopsis language="C++">
	    <type>regex_constants::error_type</type>
	    <methodname>code</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para><type role="enum">error_type</type> 値のアクセス子。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>コンストラクタに渡した <type role="enum">error_type</type> コード。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>例外は送出しない。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
