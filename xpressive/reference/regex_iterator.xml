<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="regex_iterator">
  <refmeta>
    <refentrytitle>regex_iterator 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::regex_iterator</refname>
    <refpurpose/>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_iterator_hpp">boost/xpressive/regex_iterator.hpp</filename>&gt;

template&lt;typename BidiIter&gt; 
struct <classname linkend="regex_iterator">regex_iterator</classname> {
  // 型
  typedef <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt;               regex_type;       
  typedef <classname linkend="match_results">match_results</classname>&lt; BidiIter &gt;             value_type;       
  typedef iterator_difference&lt; BidiIter &gt;::type difference_type;  
  typedef value_type const *                    pointer;          
  typedef value_type const &amp;                    reference;        
  typedef std::forward_iterator_tag             iterator_category;

  // <link linkend="regex_iterator.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="regex_iterator.regex_iterator.0">regex_iterator</methodname>();
  <methodname linkend="regex_iterator.regex_iterator.1">regex_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;, 
                 regex_constants::match_flag_type = regex_constants::match_default);
  template&lt;typename LetExpr&gt; 
    <methodname linkend="regex_iterator.regex_iterator.2">regex_iterator</methodname>(BidiIter, BidiIter, <classname linkend="basic_regex">basic_regex</classname>&lt; BidiIter &gt; const &amp;, 
                   <replaceable>unspecified</replaceable>, 
                   regex_constants::match_flag_type = regex_constants::match_default);
  <methodname linkend="regex_iterator.regex_iterator.3">regex_iterator</methodname>(<classname linkend="regex_iterator">regex_iterator</classname>&lt; BidiIter &gt; const &amp;);
  <classname linkend="regex_iterator">regex_iterator</classname>&lt; BidiIter &gt;&amp; <methodname linkend="regex_iterator.operator.0">operator=</methodname>(<classname linkend="regex_iterator">regex_iterator</classname>&lt; BidiIter &gt; const &amp;);

  // 公開メンバ関数
  value_type const &amp; <methodname linkend="regex_iterator.operator.1">operator*</methodname>() const;
  value_type const * <methodname linkend="regex_iterator.operator.2">operator-&gt;</methodname>() const;
  <classname linkend="regex_iterator">regex_iterator</classname>&lt; BidiIter &gt; &amp; <methodname linkend="regex_iterator.operator.3">operator++</methodname>();
  <classname linkend="regex_iterator">regex_iterator</classname>&lt; BidiIter &gt; <methodname linkend="regex_iterator.operator.4">operator++</methodname>(int);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection xml:id="regex_iterator.construct-copy-destruct">
      <title><classname>regex_iterator</classname> 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="regex_iterator.regex_iterator.0">
	  <constructorsynopsis language="C++">
	    <methodname>regex_iterator</methodname>
	  </constructorsynopsis>
	</listitem>
	
	<listitem xml:id="regex_iterator.regex_iterator.1">
	  <constructorsynopsis language="C++">
	    <methodname>regex_iterator</methodname>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	    <methodparam>
	      <type>basic_regex&lt; BidiIter &gt; const &amp;</type>
	      <parameter>rex</parameter>
	    </methodparam>
	    <methodparam>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>

	<listitem xml:id="regex_iterator.regex_iterator.2">
	  <constructorsynopsis language="C++">
	    <modifier>template&lt;typename LetExpr&gt;</modifier>
	    <methodname>regex_iterator</methodname>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	    <methodparam>
	      <type>basic_regex&lt; BidiIter &gt; const &amp;</type>
	      <parameter>rex</parameter>
	    </methodparam>
	    <methodparam>
	      <type><replaceable>unspecified</replaceable></type>
	      <parameter>args</parameter>
	    </methodparam>
	    <methodparam>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>

	<listitem xml:id="regex_iterator.regex_iterator.3">
	  <constructorsynopsis language="C++">
	    <methodname>regex_iterator</methodname>
	    <methodparam>
	      <type>regex_iterator&lt; BidiIter &gt; const &amp;</type>
	      <parameter>that</parameter>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>

	<listitem xml:id="regex_iterator.operator.0">
	  <methodsynopsis language="C++">
	    <type>regex_iterator&lt; BidiIter &gt; &amp;</type>
	    <methodname>operator=</methodname>
	    <methodparam>
	      <type>regex_iterator&lt; BidiIter &gt; const &amp;</type>
	      <parameter>that</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="regex_iterator.public-member-functions">
      <title><classname>regex_iterator</classname> 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="regex_iterator.operator.1">
	  <methodsynopsis language="C++">
	    <type>value_type const &amp;</type>
	    <methodname>operator*</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="regex_iterator.operator.2">
	  <methodsynopsis language="C++">
	    <type>value_type const *</type>
	    <methodname>operator-&gt;</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="regex_iterator.operator.3">
	  <methodsynopsis language="C++">
	    <type>regex_iterator&lt; BidiIter &gt; &amp;</type>
	    <methodname>operator++</methodname>
	    <void/>
	  </methodsynopsis>
	  <para>
	    <code language="C++">what.prefix().first != what[0].second</code> かつ <constant>match_prev_avail</constant> 要素がフラグに設定されていなければ設定する。その上で <code language="C++">regex_search(what[0].second, end, what, *pre, flags)</code> を呼び出したのと同様に振る舞う。ただし以下の点については振る舞いが異なる：前回見つかったマッチがゼロ幅だった（<code language="C++">what[0].length() == 0</code>）場合は開始位置が <code language="C++">what[0].second</code> である非ゼロ幅のマッチを探索し、それが失敗かつ <code language="C++">what[0].second != suffix().second</code> である場合に限り開始位置が <code language="C++">what[0].second + 1</code> であるマッチ（これもゼロ幅である可能性がある）を探索する。それ以上マッチが見つからなければ、<code language="C++">*this</code> をシーケンスの終端を指すイテレータと等値に設定する。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;size() == pre-&gt;mark_count() + 1</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;empty() == false</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;prefix().first == （前回見つかったマッチの終端位置を指すイテレータ）</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;prefix().last == (**this)[0].first</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;prefix().matched == (*this)-&gt;prefix().first != (*this)-&gt;prefix().second</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;suffix().first == (**this)[0].second</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;suffix().last == end</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)-&gt;suffix().matched == (*this)-&gt;suffix().first != (*this)-&gt;suffix().second</code></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(**this)[0].first == </code>（このマッチの開始イテレータ）</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(**this)[0].second == </code>（このマッチの終端イテレータ）</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para>完全マッチが見つかった場合は <code language="C++">(**this)[0].matched == true</code> 、（<constant>match_partial</constant> フラグを設定して見つかった）部分マッチの場合は <code language="C++">(**this)[0].matched == true</code>。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(**this)[n].first == </code>（<code language="C++">n &lt; (*this)-&gt;size()</code> である全ての整数 <replaceable>n</replaceable> について、<replaceable>n</replaceable> 番目の部分式にマッチしたシーケンスの先頭。<replaceable>n</replaceable> 番目の部分式がマッチに関与しなかった場合は <parameter class="function">end</parameter>）</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(**this)[n].second == </code>（<code language="C++">n &lt; (*this)-&gt;size()</code> である全ての整数 <replaceable>n</replaceable> について、<replaceable>n</replaceable> 番目の部分式にマッチしたシーケンスの終端。<replaceable>n</replaceable> 番目の部分式がマッチに関与しなかった場合は <parameter class="function">end</parameter>）</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(**this)[n].matched == </code>（<code language="C++">n &lt; (*this)-&gt;size()</code> である全ての整数 <replaceable>n</replaceable> について、<replaceable>n</replaceable> 番目の部分式がマッチに関与した場合は <literal>true</literal> 、それ意外の場合は <literal>false</literal>）</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>事後条件：</term>
	      <listitem>
		<para><code language="C++">(*this)->position() == </code>（走査対象シーケンスの先頭からこのマッチの先頭までの距離）</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="regex_iterator.operator.4">
	  <methodsynopsis language="C++">
	    <modifier>regex_iterator&lt; BidiIter &gt;</modifier>
	    <methodname>operator++</methodname>
	    <methodparam>
	      <type>int</type>
	      <parameter/>
	    </methodparam>
	  </methodsynopsis>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
