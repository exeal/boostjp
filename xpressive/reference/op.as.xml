<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="op.as">
  <refmeta>
    <refentrytitle>as 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::op::as</refname>
    <refpurpose><classname>as&lt;&gt;</classname> は、引数を異なる型へ字句キャストする PolymorphicFunctionObject である。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename T&gt;
struct <classname linkend="op.as">as</classname> {
  // 型
  typedef T result_type;

  // <link linkend="op.as.public-member-functions">公開メンバ関数</link>
  template&lt;typename Value&gt; T <methodname linkend="op.as.operator.0">operator()</methodname>(Value const &amp;) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection>
      <title>テンプレート引数</title>
      <orderedlist>
	<listitem>
	  <synopsis language="C++">typename T</synopsis>
	  <para>引数の字句キャスト先の型。</para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="op.as.public-member-functions">
      <title>as 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="op.as.operator.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename Value&gt;</modifier>
	    <type>T</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>Value const &amp;</type>
	      <parameter>val</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>val</parameter></term>
		    <listitem>
		      <para>字句キャストする値。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><code language="C++">boost::lexical_cast&lt;T&gt;(val)</code></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
