<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="as_xpr">
  <refmeta>
    <refentrytitle>as_xpr 関数テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::as_xpr</refname>
    <refpurpose>リテラルを正規表現にする。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_primitives_hpp">boost/xpressive/regex_primitives.hpp</filename>&gt;

template&lt;typename Literal&gt; <replaceable>unspecified</replaceable> as_xpr(Literal const &amp; literal);</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      リテラルを正規表現にするには <function>as_xpr()</function> を使用する。例えば <code language="C++">"foo" &gt;&gt; "bar"</code> は右シフト演算子の両方のオペランドが <type>const char*</type> であり、そのような演算子は存在しないためコンパイルできない。<code language="C++">as_xpr("foo") &gt;&gt; "bar"</code> を代わりに使用する。
    </para>
    <para>
      文字列リテラルだけでなく、文字リテラルに対しても <function>as_xpr()</function> を使用できる。例えば <code language="C++">as_xpr('a')</code> は <phrase role="regex-input">a</phrase> にマッチする。また <code language="C++">~as_xpr('a')</code> とすることで文字リテラルの否定が得られる。これは <phrase role="regex-input">a</phrase> 以外の文字にマッチする。
    </para>
  </refsection>
</refentry>
