<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="c_regex_traits">
  <refmeta>
    <refentrytitle>c_regex_traits 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::c_regex_traits</refname>
    <refpurpose>
      <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> クラステンプレートで使用するために標準の C ロカール関数をカプセル化する。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.xpressive_fwd_hpp">boost/xpressive/xpressive_fwd.hpp</filename>&gt;

template&lt;typename Char&gt; 
struct <classname linkend="c_regex_traits">c_regex_traits</classname> {<!--
  // 型
  typedef Char                           char_type;
  typedef std::basic_string&lt; char_type &gt; string_type;
  typedef <replaceable>unspecified</replaceable>                    locale_type;
  typedef <replaceable>unspecified</replaceable>                    char_class_type;
  typedef regex_traits_version_2_tag     version_tag;
  typedef <replaceable>unspecified</replaceable>                    base_type;
-->
  // <link linkend="c_regex_traits.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="c_regex_traits.c_regex_traits">c_regex_traits</methodname>(locale_type const &amp; = locale_type());

  // <link linkend="c_regex_traits.public-member-functions">公開メンバ関数</link>
  bool <methodname linkend="c_regex_traits.operator.0">operator==</methodname>(<classname linkend="c_regex_traits">c_regex_traits</classname>&lt; char_type &gt; const &amp;) const;
  bool <methodname linkend="c_regex_traits.operator.1">operator!=</methodname>(<classname linkend="c_regex_traits">c_regex_traits</classname>&lt; char_type &gt; const &amp;) const;
  string_type <methodname linkend="c_regex_traits.fold_case">fold_case</methodname>(char_type) const;
  locale_type <methodname linkend="c_regex_traits.imbue">imbue</methodname>(locale_type);
  template&lt;&gt; char <methodname linkend="c_regex_traits.widen.0">widen</methodname>(char);
  template&lt;&gt; wchar_t <methodname linkend="c_regex_traits.widen.1">widen</methodname>(char);
  template&lt;&gt; unsigned char <methodname linkend="c_regex_traits.hash.0">hash</methodname>(char);
  template&lt;&gt; unsigned char <methodname linkend="c_regex_traits.hash.1">hash</methodname>(wchar_t);
  template&lt;&gt; int <methodname linkend="c_regex_traits.value.0">value</methodname>(char, int);
  template&lt;&gt; int <methodname linkend="c_regex_traits.value.1">value</methodname>(wchar_t, int);

  // <link linkend="c_regex_traits.public-static-functions">公開静的メンバ関数</link>
  static char_type <methodname linkend="c_regex_traits.widen.2">widen</methodname>(char);
  static unsigned char <methodname linkend="c_regex_traits.hash.2">hash</methodname>(char_type);
  static char_type <methodname linkend="c_regex_traits.translate">translate</methodname>(char_type);
  static char_type <methodname linkend="c_regex_traits.translate_nocase">translate_nocase</methodname>(char_type);
  static char_type <methodname linkend="c_regex_traits.tolower">tolower</methodname>(char_type);
  static char_type <methodname linkend="c_regex_traits.toupper">toupper</methodname>(char_type);
  static bool <methodname linkend="c_regex_traits.in_range">in_range</methodname>(char_type, char_type, char_type);
  static bool <methodname linkend="c_regex_traits.in_range_nocase">in_range_nocase</methodname>(char_type, char_type, char_type);
  template&lt;typename FwdIter&gt; static string_type <methodname linkend="c_regex_traits.transform">transform</methodname>(FwdIter, FwdIter);
  template&lt;typename FwdIter&gt; 
    static string_type <methodname linkend="c_regex_traits.transform_primary">transform_primary</methodname>(FwdIter, FwdIter);
  template&lt;typename FwdIter&gt; 
    static string_type <methodname linkend="c_regex_traits.lookup_collatename">lookup_collatename</methodname>(FwdIter, FwdIter);
  template&lt;typename FwdIter&gt; 
    static char_class_type <methodname linkend="c_regex_traits.lookup_classname">lookup_classname</methodname>(FwdIter, FwdIter, bool);
  static bool <methodname linkend="c_regex_traits.isctype">isctype</methodname>(char_type, char_class_type);
  static int <methodname linkend="c_regex_traits.value.2">value</methodname>(char_type, int);
  static locale_type <methodname linkend="c_regex_traits.getloc">getloc</methodname>();
};
      </synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection xml:id="c_regex_traits.construct-copy-destruct">
      <title><classname>c_regex_traits</classname> 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="c_regex_traits.c_regex_traits">
	  <constructorsynopsis language="C++">
	    <methodname>c_regex_traits</methodname>
	    <methodparam>
	      <type>locale_type const &amp;</type>
	      <parameter>loc</parameter>
	      <initializer>locale_type()</initializer>
	    </methodparam>
	  </constructorsynopsis>
	  <para>
	    グローバルな C ロカールを使用する <classname linkend="c_regex_traits">c_regex_traits</classname> オブジェクトを初期化する。
	  </para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="c_regex_traits.public-member-functions">
      <title><classname>c_regex_traits</classname> 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="c_regex_traits.operator.0">
	  <methodsynopsis language="C++">
	    <type>bool</type>
	    <methodname>operator==</methodname>
	    <methodparam>
	      <type>c_regex_traits&lt; char_type &gt; const &amp;</type>
	      <parameter/>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>
	    2 つの <classname linkend="c_regex_traits">c_regex_traits</classname> オブジェクトが等値か調べる。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>真。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.operator.1">
	  <methodsynopsis language="C++">
	    <type>bool</type>
	    <methodname>operator!=</methodname>
	    <methodparam>
	      <type>c_regex_traits&lt; char_type &gt; const &amp;</type>
	      <parameter/>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>
	    2 つの <classname linkend="c_regex_traits">c_regex_traits</classname> オブジェクトが等値でないか調べる。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>偽。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.fold_case">
	  <methodsynopsis language="C++">
	    <type>string_type</type>
	    <methodname>fold_case</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>
	    渡した文字と大文字小文字を区別せずに比較すると等値となる文字をすべて含む <type role="typedef">string_type</type> を返す。この関数が呼び出されるのは <code language="C++">has_fold_case&lt;c_regex_traits&lt;Char&gt; &gt;</code> が真の場合のみである。
	  </para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><parameter>ch</parameter> と大文字小文字を区別せずに比較すると等値となる文字をすべて含む <type role="typedef">string_type</type></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.imbue">
	  <methodsynopsis language="C++">
	    <type>locale_type</type>
	    <methodname>imbue</methodname>
	    <methodparam>
	      <type>locale_type</type>
	      <parameter>loc</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>何もしない。</para>
	</listitem>

	<listitem xml:id="c_regex_traits.widen.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>char</type>
	    <methodname>widen</methodname>
	    <methodparam>
	      <type>char</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="c_regex_traits.widen.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>wchar_t</type>
	    <methodname>widen</methodname>
	    <methodparam>
	      <type>char</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="c_regex_traits.hash.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>unsigned char</type>
	    <methodname>hash</methodname>
	    <methodparam>
	      <type>char</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="c_regex_traits.hash.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>unsigned char</type>
	    <methodname>hash</methodname>
	    <methodparam>
	      <type>wchar_t</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="c_regex_traits.value.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>int</type>
	    <methodname>value</methodname>
	    <methodparam>
	      <type>char</type>
	      <parameter>ch</parameter>
	    </methodparam>
	    <methodparam>
	      <type>int</type>
	      <parameter>radix</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="c_regex_traits.value.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;&gt;</modifier>
	    <type>int</type>
	    <methodname>value</methodname>
	    <methodparam>
	      <type>wchar_t</type>
	      <parameter>ch</parameter>
	    </methodparam>
	    <methodparam>
	      <type>int</type>
	      <parameter>radix</parameter>
	    </methodparam>
	  </methodsynopsis>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="c_regex_traits.public-static-functions">
      <title><classname>c_regex_traits</classname> 公開静的メンバ関数</title>
      <orderedlist>
	<listitem xml:id="c_regex_traits.widen.2">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>char_type</type>
	    <methodname>widen</methodname>
	    <methodparam>
	      <type>char</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para><type>char</type> 型の値を <type>Char</type> 型に変換する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><type>Char</type> が <type>char</type> であれば <parameter>ch</parameter> 、<type>Char</type> が <type>wchar_t</type> であれば <code language="C++">std::btowc(ch)</code>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.hash.2">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>unsigned char</type>
	    <methodname>hash</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para><code>[0, UCHAR_MAX]</code> の範囲で <type>Char</type> のハッシュ値を返す。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><literal>0</literal> 以上 <constant>UCHAR_MAX</constant> 以下の値。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.translate">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>char_type</type>
	    <methodname>translate</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>何もしない。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><parameter>ch</parameter></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.translate_nocase">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>char_type</type>
	    <methodname>translate_nocase</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>現在のグローバルな C ロカールを使用して、文字を小文字に変換する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><type>Char</type> が <type>char</type> であれば <code language="C++">std::tolower(ch)</code> 、<type>Char</type> が <type>wchar_t</type> であれば <code language="C++">std::towlower(ch)</code>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.tolower">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>char_type</type>
	    <methodname>tolower</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>現在のグローバルな C ロカールを使用して、文字を小文字に変換する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><type>Char</type> が <type>char</type> であれば <code language="C++">std::tolower(ch)</code> 、<type>Char</type> が <type>wchar_t</type> であれば <code language="C++">std::towlower(ch)</code>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.toupper">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>char_type</type>
	    <methodname>toupper</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>現在のグローバルな C ロカールを使用して、文字を大文字に変換する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><type>Char</type> が <type>char</type> であれば <code language="C++">std::toupper(ch)</code> 、<type>Char</type> が <type>wchar_t</type> であれば <code language="C++">std::towupper(ch)</code>。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.in_range">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>bool</type>
	    <methodname>in_range</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>first</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>last</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>文字が文字範囲に含まれるか調べる。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>first</parameter></term>
		    <listitem>
		      <para>範囲の下限。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>last</parameter></term>
		    <listitem>
		      <para>範囲の上限。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><code language="C++">first &lt;= ch &amp;&amp; ch &lt;= last</code></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.in_range_nocase">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>bool</type>
	    <methodname>in_range_nocase</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>first</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>last</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>文字が文字範囲に含まれるか調べる。大文字小文字を区別しない。</para>
	  <note>
	    <para>
	      既定の実装は適正な Unicode ケースフォールディングを行わないが、標準 C ロカールではこれが最善である。
	    </para>
	  </note>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>元の文字。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>first</parameter></term>
		    <listitem>
		      <para>範囲の下限。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>last</parameter></term>
		    <listitem>
		      <para>範囲の上限。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><code language="C++">in_range(first, last, ch) || in_range(first, last, tolower(ch)) || in_range(first, last, toupper(ch))</code></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.transform">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename FwdIter&gt; static</modifier>
	    <type>string_type</type>
	    <methodname>transform</methodname>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスのソートキーを返す。文字シーケンス <code>[G1, G2)</code> が文字シーケンス <code>[H1, H2)</code> の前にソートされる場合に <code language="C++">v.transform(G1, G2) &lt; v.transform(H1, H2)</code> とならなければならない。</para>
	  <note>
	    <para>現在使用していない。</para>
	  </note>
	</listitem>

	<listitem xml:id="c_regex_traits.transform_primary">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename FwdIter&gt; static</modifier>
	    <type>string_type</type>
	    <methodname>transform_primary</methodname>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスのソートキーを返す。大文字小文字を区別せずにソートして文字シーケンス <code>[G1, G2)</code> が文字シーケンス <code>[H1, H2)</code> の前に現れる場合に <code language="C++">v.transform(G1, G2) &lt; v.transform(H1, H2)</code> とならなければならない。</para>
	  <note>
	    <para>現在使用していない。</para>
	  </note>
	</listitem>

	<listitem xml:id="c_regex_traits.lookup_collatename">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename FwdIter&gt; static</modifier>
	    <type>string_type</type>
	    <methodname>lookup_collatename</methodname>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>イテレータ範囲 <code>[F1, F2)</code> が示す文字シーケンスが構成する照合要素を表す文字シーケンスを返す。文字シーケンスが正しい照合要素でなければ空文字列を返す。</para>
	  <note>
	    <para>現在使用していない。</para>
	  </note>
	</listitem>

	<listitem xml:id="c_regex_traits.lookup_classname">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename FwdIter&gt; static</modifier>
	    <type>char_class_type</type>
	    <methodname>lookup_classname</methodname>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>FwdIter</type>
	      <parameter>end</parameter>
	    </methodparam>
	    <methodparam>
	      <type>bool</type>
	      <parameter>icase</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>指定した文字シーケンスが表す文字分類について、相当するビットマスクを返す。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>begin</parameter></term>
		    <listitem>
		      <para>文字分類の名前を表す文字シーケンスの先頭を指す前進イテレータ。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>end</parameter></term>
		    <listitem>
		      <para>文字シーケンスの終端。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>icase</parameter></term>
		    <listitem>
		      <para>戻り値のビットマスクが大文字小文字を区別しない文字分類を表すかを指定する。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>文字分類を表すビットマスク。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.isctype">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>bool</type>
	    <methodname>isctype</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	    <methodparam>
	      <type>char_class_type</type>
	      <parameter>mask</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>文字分類ビットマスクに対して文字をテストする。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>テストする文字。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>mask</parameter></term>
		    <listitem>
		      <para>テストする文字分類のビットマスク。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para><parameter>mask</parameter> は <methodname>lookup_classname</methodname> が返したビットマスクか、それらのビット和。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>文字が指定した文字分類に含まれれば真、それ以外は偽。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.value.2">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>int</type>
	    <methodname>value</methodname>
	    <methodparam>
	      <type>char_type</type>
	      <parameter>ch</parameter>
	    </methodparam>
	    <methodparam>
	      <type>int</type>
	      <parameter>radix</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>数字を数値に変換する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>ch</parameter></term>
		    <listitem>
		      <para>数字。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>radix</parameter></term>
		    <listitem>
		      <para>変換に使用する序数。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para><parameter>radix</parameter> は 8 、10 、16 のいずれか。</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><parameter>ch</parameter> が数字でなければ <literal>-1</literal> 、それ以外は文字が表す数値。<type role="typedef">char_type</type> が <type>char</type> であれば <function>std::strtol</function> を、<type role="typedef">char_type</type> が <type>wchar_t</type> であれば <function>std::wcstol</function> を使用する。</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="c_regex_traits.getloc">
	  <methodsynopsis language="C++">
	    <modifier>static</modifier>
	    <type>locale_type</type>
	    <methodname>getloc</methodname>
	    <void/>
	  </methodsynopsis>
	  <para>何もしない。</para>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
