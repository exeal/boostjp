<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>&lt;boost/xpressive/regex_traits.hpp&gt; ヘッダ</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    <symbol>BOOST_XPRESSIVE_USE_C_TRAITS</symbol> マクロにしたがって C 正規表現特性か C++ 正規表現特性のヘッダファイルをインクルードする。
  </para>

  <synopsis language="C++">namespace boost {
  namespace xpressive {
    struct regex_traits_version_1_tag;
    struct regex_traits_version_2_tag;
    template&lt;typename Traits&gt; struct has_fold_case;
    template&lt;typename Char, typename Impl&gt; struct regex_traits;
  }
}</synopsis>

  <section>
    <title>regex_traits_version_1_tag 構造体</title>
    <para>boost::xpressive::regex_traits_version_1_tag。</para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_traits.hpp&gt;


struct regex_traits_version_1_tag {
};</synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	ある特性クラスがバージョン 1 の特性インターフェイスに適合することを示すタグ。
      </para>
    </section>
  </section>

  <section>
    <title>regex_traits_version_2_tag 構造体</title>
    <para>boost::xpressive::regex_traits_version_2_tag。</para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_traits.hpp&gt;


struct regex_traits_version_2_tag :
  public boost::xpressive::regex_traits_version_1_tag
{
};</synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	ある特性クラスがバージョン 2 の特性インターフェイスに適合することを示すタグ。
      </para>
    </section>
  </section>

  <section>
    <title>has_fold_case 構造体テンプレート</title>
    <para>boost::xpressive::has_fold_case — ある特性クラスが <methodname>fold_case</methodname> メンバ関数をもつことを示す特性。</para>

    <section>
      <title>書式</title>
      <synopsis language="C++">ヘッダ：&lt;boost/xpressive/xpressive_fwd.hpp&gt;

template&lt;typename Traits&gt;
struct has_fold_case : public is_convertible&lt; Traits::version_tag *, regex_traits_version_1_case_fold_tag * &gt;
{
};</synopsis>
    </section>
  </section>

  <section>
    <title>regex_traits 構造体テンプレート</title>
    <para>boost::xpressive::regex_traits。</para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_traits.hpp&gt;

template&lt;typename Char, typename Impl&gt;
struct regex_traits {
  // 型
  typedef Impl::locale_type locale_type;

  // 構築、コピー、解体
  regex_traits();
  regex_traits(locale_type const &amp;);
};</synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	既定の <classname linkend="regex_traits">regex_traits</classname> 実装（<classname linkend="cpp_regex_traits">cpp_regex_traits</classname> か <classname linkend="c_regex_traits">c_regex_traits</classname>）のラッパ。
      </para>

      <section>
	<title>regex_traits 構築、コピー、解体の公開演算</title>
	<orderedlist>
	  <listitem>
	    <synopsis language="C++">regex_traits();</synopsis>
	  </listitem>
	  <listitem>
	    <synopsis language="C++">explicit regex_traits(locale_type const &amp; loc);</synopsis>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>
</article>
