<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>&lt;boost/xpressive/regex_constants.hpp&gt; ヘッダ</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    <type role="enum">syntax_option_type</type> 、<type role="enum">match_flag_type</type> および <type role="enum">error_type</type> 列挙の定義がある。
  </para>

  <synopsis language="C++">namespace boost {
  namespace xpressive {
    namespace regex_constants {
      enum syntax_option_type;
      enum match_flag_type;
      enum error_type;
    }
  }
}</synopsis>

  <section>
    <title>syntax_option_type 型</title>
    <para>
      boost::xpressive::regex_constants::syntax_option_type。
    </para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_constants.hpp&gt;


enum syntax_option_type { ECMAScript =  0, icase =  1 &lt;&lt; 1, nosubs =  1 &lt;&lt; 2, 
                          optimize =  1 &lt;&lt; 3, collate =  1 &lt;&lt; 4, 
                          single_line =  1 &lt;&lt; 10, not_dot_null =  1 &lt;&lt; 11, 
                          not_dot_newline =  1 &lt;&lt; 12, 
                          ignore_white_space =  1 &lt;&lt; 13 };
      </synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	正規表現構文をカスタマイズするのに使用するフラグ。
      </para>
      <variablelist>
	<varlistentry>
	  <term><constant>ECMAScript</constant></term>
	  <listitem>
	    <para>
	      正規表現エンジンが通常の文法を使用するよう指定する。この文法は ECMA-262 、ECMAScript 言語仕様 15 章 10 RegExp (Regular Expression) Objects（FWD.1）に示されているものと同じである。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>icase</constant></term>
	  <listitem>
	    <para>
	      文字コンテナシーケンスに対して正規表現マッチを大文字小文字を区別せずに行うことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>nosubs</constant></term>
	  <listitem>
	    <para>
	      正規表現が文字コンテナシーケンスに対してマッチしたとき、与えられた <classname linkend="match_results">match_results</classname> 構造体に部分式マッチを格納しないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>optimize</constant></term>
	  <listitem>
	    <para>
	      正規表現エンジンに対して、マッチの高速化により注意を払うよう指定する。これを行うと正規表現オブジェクトの構築速度が低下する。検出不可能な作用がプログラム出力に現れることはない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>collate</constant></term>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">[a-b]</phrase> 形式の文字範囲がロカールを考慮することを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>single_line</constant></term>
	  <listitem>
	    <para>
	      メタ文字 <phrase role="regex-pattern">^</phrase> および <phrase role="regex-pattern">$</phrase> が内部の改行にマッチ<emphasis>しない</emphasis>ことを指定する。これは Perl の既定と逆であることに注意していただきたい。Perl の /m（複数行）修飾子と反対である。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>not_dot_null</constant></term>
	  <listitem>
	    <para>
	      メタ文字 <phrase role="regex-pattern">.</phrase> が null 文字 <phrase role="regex-input">\0</phrase> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>not_dot_newline</constant></term>
	  <listitem>
	    <para>
	      メタ文字 <phrase role="regex-pattern">.</phrase> が改行文字 <phrase role="regex-input">\n</phrase> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>ignore_white_space</constant></term>
	  <listitem>
	    <para>
	      エスケープされていない空白類を無視するよう指定する。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section>
    <title>match_flag_type 型</title>
    <para>
      boost::xpressive::regex_constants::match_flag_type。
    </para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_constants.hpp&gt;



enum match_flag_type { match_default =  0, match_not_bol =  1 &lt;&lt; 1, 
                       match_not_eol =  1 &lt;&lt; 2, match_not_bow =  1 &lt;&lt; 3, 
                       match_not_eow =  1 &lt;&lt; 4, match_any =  1 &lt;&lt; 7, 
                       match_not_null =  1 &lt;&lt; 8, match_continuous =  1 &lt;&lt; 10, 
                       match_partial =  1 &lt;&lt; 11, match_prev_avail =  1 &lt;&lt; 12, 
                       format_default =  0, format_sed =  1 &lt;&lt; 13, 
                       format_perl =  1 &lt;&lt; 14, format_no_copy =  1 &lt;&lt; 15, 
                       format_first_only =  1 &lt;&lt; 16, 
                       format_literal =  1 &lt;&lt; 17, format_all =  1 &lt;&lt; 18 };</synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	正規表現アルゴリズムの動作をカスタマイズするのに使用するフラグ。
      </para>
      <variablelist>
	<varlistentry>
	  <term><constant>match_default</constant></term>
	  <listitem>
	    <para>
	      ECMA-262、ECMAScript 言語仕様 15 章 10 RegExp (Regular Expression) Objects（FWD.1）の通常規則に一切の変更を加えることなく正規表現マッチを行うことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_not_bol</constant></term>
	  <listitem>
	    <para>
	      正規表現 <phrase role="regex-pattern">^</phrase> が部分シーケンス <code>[first,first)</code> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_not_eol</constant></term>
	  <listitem>
	    <para>
	      正規表現 <phrase role="regex-pattern">$</phrase> が部分シーケンス <code>[last,last)</code> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_not_bow</constant></term>
	  <listitem>
	    <para>
	      正規表現 <phrase role="regex-pattern">\b</phrase> が部分シーケンス <code>[first,first)</code> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_not_eow</constant></term>
	  <listitem>
	    <para>
	      正規表現 <phrase role="regex-pattern">\b</phrase> が部分シーケンス <code>[last,last)</code> にマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_any</constant></term>
	  <listitem>
	    <para>
	      複数のマッチが可能な場合、それらのいずれでも結果として扱ってよいことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_not_null</constant></term>
	  <listitem>
	    <para>
	      正規表現が空のシーケンスにマッチしないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_continuous</constant></term>
	  <listitem>
	    <para>
	      正規表現が <varname>first</varname> を先頭とする部分シーケンスにマッチしなければならないことを指定する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_partial</constant></term>
	  <listitem>
	    <para>
	      マッチが見つからない場合、<code language="C++">from != last</code> であるマッチ <code>[from, last)</code> を結果として返すことを指定する（<code>[from, last)</code> を接頭辞とするより長い文字シーケンス <code>[from, to)</code> が完全マッチの結果として存在する可能性がある場合）。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>match_prev_avail</constant></term>
	  <listitem>
	    <para>
	      <code language="C++">--first</code> が有効なイテレータ位置であることを指定する。このフラグを設定すると、正規表現アルゴリズム（RE.7）およびイテレータ（RE.8）は <constant>match_not_bol</constant> および <constant>match_not_bow</constant> フラグを無視する。
	      <footnote>
		<para>
		  訳注　“RE.n” はN1429の節番号（<link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm</link>）。
		</para>
	      </footnote>
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_default</constant></term>
	  <listitem>
	    <para>
	      正規表現マッチを新しい文字列で置換するとき、ECMA-262 、ECMAScript 言語仕様 15 章 5.4.11 String.prototype.replace（FWD.1）が規定する ECMAScript の <function>replace</function> 関数が使用する規則を用いて新しい文字列を構築する。検索置換操作については、互いに重複しない正規表現マッチを検索・置換し、正規表現にマッチしなかった入力部分を変更することなく出力文字列にコピーする。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_sed</constant></term>
	  <listitem>
	    <para>
	      正規表現マッチを新しい文字列で置換するとき、IEEE Std 1003.1-2001, Portable Operating SystemInterface (POSIX), Shells and Utilities が規定する Unix sed ユーティリティが使用する規則を用いて新しい文字列を構築する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_perl</constant></term>
	  <listitem>
	    <para>
	      正規表現マッチを新しい文字列で置換するとき、ECMA-262 、ECMAScript言語仕様 15 章 5.4.11 String.prototype.replace（FWD.1）が規定する ECMAScript の <function>replace</function> 関数の規則のスーパーセットを使って新しい文字列を構築する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_no_copy</constant></term>
	  <listitem>
	    <para>
	      検索置換操作で指定すると、マッチを行う文字コンテナシーケンスを出力文字列にコピーしない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_first_only</constant></term>
	  <listitem>
	    <para>
	      検索置換操作で指定すると、最初の正規表現マッチのみを置換する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_literal</constant></term>
	  <listitem>
	    <para>
	      書式化文字列をリテラルとして扱う。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>format_all</constant></term>
	  <listitem>
	    <para>
	      条件置換 <phrase role="regex-pattern">(?ddexpression1:expression2)</phrase> を含むすべての構文拡張を有効にする。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section>
    <title>error_type 型</title>
    <para>
      boost::xpressive::regex_constants::error_type。
    </para>

    <section>
      <title>書式</title>
      <synopsis language="C++">// ヘッダ：&lt;boost/xpressive/regex_constants.hpp&gt;



enum error_type { error_collate, error_ctype, error_escape, error_subreg, 
                  error_brack, error_paren, error_brace, error_badbrace, 
                  error_range, error_space, error_badrepeat, error_complexity, 
                  error_stack, error_badref, error_badmark, 
                  error_badlookbehind, error_badrule, error_badarg, 
                  error_badattr, error_internal };</synopsis>
    </section>

    <section>
      <title>説明</title>
      <para>
	<classname linkend="regex_error">regex_error</classname> が使用するエラーコード。
      </para>
      <variablelist>
	<varlistentry>
	  <term><constant>error_collate</constant></term>
	  <listitem>
	    <para>
	      正規表現内に不正な照合要素名がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_ctype</constant></term>
	  <listitem>
	    <para>
	      正規表現内に不正な文字クラス名がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_escape</constant></term>
	  <listitem>
	    <para>
	      正規表現内に不正なエスケープ付き文字があるか単独のエスケープがある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_subreg</constant></term>
	  <listitem>
	    <para>
	      正規表現内に不正な後方参照がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_brack</constant></term>
	  <listitem>
	    <para>
	      正規表現内に一致しない <phrase role="regex-pattern">[</phrase> と <phrase role="regex-pattern">]</phrase> がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_paren</constant></term>
	  <listitem>
	    <para>
	      正規表現内に一致しない <phrase role="regex-pattern">(</phrase> と <phrase role="regex-pattern">)</phrase> がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_brace</constant></term>
	  <listitem>
	    <para>
	      正規表現内に一致しない <phrase role="regex-pattern">{</phrase> と <phrase role="regex-pattern">}</phrase> がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badbrace</constant></term>
	  <listitem>
	    <para>
	      正規表現内の <phrase role="regex-pattern">{}</phrase> 式に不正な範囲がある。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_range</constant></term>
	  <listitem>
	    <para>
	      正規表現内に不正な文字範囲がある（例：<phrase role="regex-pattern">[b-a]</phrase>）。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_space</constant></term>
	  <listitem>
	    <para>
	      正規表現を有限状態マシンに変換するのにメモリが不足している。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badrepeat</constant></term>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">*</phrase> 、<phrase role="regex-pattern">?</phrase> 、<phrase role="regex-pattern">+</phrase> 、<phrase role="regex-pattern">{</phrase> のいずれかが正しい正規表現の後にない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_complexity</constant></term>
	  <listitem>
	    <para>
	      マッチを行う正規表現の計算量が規定の水準を超えた。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_stack</constant></term>
	  <listitem>
	    <para>
	      指定した文字シーケンスに対して正規表現がマッチするか、を決定するのに必要なメモリが不足している。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badref</constant></term>
	  <listitem>
	    <para>
	      入れ子の正規表現が未初期化である。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badmark</constant></term>
	  <listitem>
	    <para>
	      名前付き捕捉の使用が不正。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badlookbehind</constant></term>
	  <listitem>
	    <para>
	      可変幅の後方先読み表明の作成を検出した。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badrule</constant></term>
	  <listitem>
	    <para>
	      規則の不正な使用を検出した。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badarg</constant></term>
	  <listitem>
	    <para>
	      アクションの引数が束縛されていない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_badattr</constant></term>
	  <listitem>
	    <para>
	      未初期化の属性を読み取ろうとした。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><constant>error_internal</constant></term>
	  <listitem>
	    <para>
	      内部エラーが発生した。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>
</article>
