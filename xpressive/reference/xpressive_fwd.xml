<?xml version="1.0" ?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <info>
    <title>&lt;boost/xpressive/xpressive_fwd.hpp&gt; ヘッダ</title>
    <copyright>
      <year>2008</year>
      <holder>Eric Niebler</holder>
    </copyright>
  </info>

  <para>
    xpressive のすべての公開データ型の前方宣言。
  </para>

  <synopsis language="C++">BOOST_PROTO_FUSION_V2
BOOST_XPRESSIVE_HAS_MS_STACK_GUARD</synopsis>

  <synopsis language="C++">namespace boost {
  namespace xpressive {
    template&lt;typename BidiIter&gt; struct basic_regex;
    template&lt;typename Char&gt; struct c_regex_traits;
    template&lt;typename RegexTraits&gt; struct compiler_traits;
    template&lt;typename Char&gt; struct cpp_regex_traits;
    template&lt;typename Traits&gt; struct has_fold_case;
    template&lt;typename Elem&gt; struct null_regex_traits;
    template&lt;typename BidiIter&gt; struct regex_token_iterator;
    template&lt;typename Char, typename Impl&gt; struct regex_traits;

    typedef void const * regex_id_type;
    typedef basic_regex&lt; std::string::const_iterator &gt; sregex;
    typedef basic_regex&lt; char const * &gt; cregex;
    typedef basic_regex&lt; std::wstring::const_iterator &gt; wsregex;
    typedef basic_regex&lt; wchar_t const * &gt; wcregex;
    typedef sub_match&lt; std::string::const_iterator &gt; ssub_match;
    typedef sub_match&lt; char const * &gt; csub_match;
    typedef sub_match&lt; std::wstring::const_iterator &gt; wssub_match;
    typedef sub_match&lt; wchar_t const * &gt; wcsub_match;
    typedef regex_compiler&lt; std::string::const_iterator &gt; sregex_compiler;
    typedef regex_compiler&lt; char const * &gt; cregex_compiler;
    typedef regex_compiler&lt; std::wstring::const_iterator &gt; wsregex_compiler;
    typedef regex_compiler&lt; wchar_t const * &gt; wcregex_compiler;
    typedef regex_iterator&lt; std::string::const_iterator &gt; sregex_iterator;
    typedef regex_iterator&lt; char const * &gt; cregex_iterator;
    typedef regex_iterator&lt; std::wstring::const_iterator &gt; wsregex_iterator;
    typedef regex_iterator&lt; wchar_t const * &gt; wcregex_iterator;
    typedef regex_token_iterator&lt; std::string::const_iterator &gt; sregex_token_iterator;
    typedef regex_token_iterator&lt; char const * &gt; cregex_token_iterator;
    typedef regex_token_iterator&lt; std::wstring::const_iterator &gt; wsregex_token_iterator;
    typedef regex_token_iterator&lt; wchar_t const * &gt; wcregex_token_iterator;
    typedef match_results&lt; std::string::const_iterator &gt; smatch;
    typedef match_results&lt; char const * &gt; cmatch;
    typedef match_results&lt; std::wstring::const_iterator &gt; wsmatch;
    typedef match_results&lt; wchar_t const * &gt; wcmatch;
    typedef regex_id_filter_predicate&lt; std::string::const_iterator &gt; sregex_id_filter_predicate;
    typedef regex_id_filter_predicate&lt; char const * &gt; cregex_id_filter_predicate;
    typedef regex_id_filter_predicate&lt; std::wstring::const_iterator &gt; wsregex_id_filter_predicate;
    typedef regex_id_filter_predicate&lt; wchar_t const * &gt; wcregex_id_filter_predicate;
    namespace op {
    }
  }
}</synopsis>

  <para>
    （訳注）以下の実体は省略しました。
  </para>
  <itemizedlist>
    <listitem>
      <para>
	マクロ：<symbol>BOOST_PROTO_FUSION_V2</symbol> 、<symbol>BOOST_XPRESSIVE_HAS_MS_STACK_GUARD</symbol>
      </para>
    </listitem>
    <listitem>
      <para>
	型定義：<type role="typedef">sregex_id_filter_predicate</type> 、<type role="typedef">cregex_id_filter_predicate</type> 、<type role="typedef">wsregex_id_filter_predicate</type> 、<type role="typedef">wcregex_id_filter_predicate</type>
      </para>
    </listitem>
  </itemizedlist>
</article>
