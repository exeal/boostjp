<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="value">
  <refmeta>
    <refentrytitle>value 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::value</refname>
    <refpurpose><classname>value&lt;&gt;</classname> は、xpressive の意味アクションで使用できる値の遅延ラッパである。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename T&gt;
struct <classname linkend="value">value</classname> :
  public proto::extends&lt; proto::terminal&lt; T &gt;::type, value&lt; T &gt; &gt;
{
  // <link linkend="value.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="value.value.0">value</methodname>();
  explicit <methodname linkend="value.value.1">value</methodname>(T const &amp;);

  // <link linkend="value.public-member-functions">公開メンバ関数</link>
  T &amp; <methodname linkend="value.get.0">get</methodname>();
  T const &amp; <methodname linkend="value.get.1">get</methodname>() const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      以下は <classname>value&lt;&gt;</classname> を使用すると便利な例である。
    </para>
    <programlisting language="C++">sregex good_voodoo(boost::shared_ptr&lt;int&gt; pi)
{
    using namespace boost::xpressive;
    // val() を使用して shared_ptr を値で保持する：
    sregex rex = +( _d [ ++*val(pi) ] &gt;&gt; '!' );
    // OK 、rex は整数に対する参照カウントを保持する。
    return rex;
}</programlisting>
  <para>
    上のコードにおいて、<function>xpressive::val()</function> は <classname>value&lt;&gt;</classname> オブジェクトを返す関数である。<function>val()</function> を使用しないと <code language="C++">++*pi</code> の演算は正規表現がマッチしたときに遅延評価されるのではなく、一度だけ積極評価される。
  </para>

    <refsection>
      <title>テンプレート引数</title>
      <orderedlist>
	<listitem>
	  <synopsis language="C++">typename T</synopsis>
	  <para>格納する値の型。</para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="value.construct-copy-destruct">
      <title>value 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="value.value.0">
	  <methodsynopsis language="C++">
	    <methodname>value</methodname>
	    <void/>
	  </methodsynopsis>
	  <para>デフォルト構築した <type>T</type> を格納する。</para>
	</listitem>
	<listitem xml:id="value.value.1">
	  <methodsynopsis language="C++">
	    <modifier>explicit</modifier>
	    <methodname>value</methodname>
	    <methodparam>
	      <type>T const &amp;</type>
	      <parameter>t</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para><parameter>t</parameter> のコピーを格納する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>t</parameter></term>
		    <listitem>
		      <para>初期値。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="value.public-member-functions">
      <title>value の公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="value.get.0">
	  <methodsynopsis language="C++">
	    <type>T &amp;</type>
	    <methodname>get</methodname>
	    <void/>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
	<listitem xml:id="value.get.1">
	  <methodsynopsis language="C++">
	    <type>T const &amp;</type>
	    <methodname>get</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>格納した値にアクセスする。</para>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
