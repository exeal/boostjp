<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="op.insert">
  <refmeta>
    <refentrytitle>insert 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::op::insert</refname>
    <refpurpose><classname linkend="op.insert">insert</classname> は、値か値のシーケンスを連続コンテナ、連想コンテナ、または文字列に挿入する PolymorphicFunctionObject である。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

struct <classname linkend="op.insert">insert</classname> {
  // メンバクラス、構造体、共用体
  template&lt;typename Sig&gt;
  struct <classname linkend="op.insert.result">result</classname> {
    // 型
    typedef unspecified <type linkend="op.insert.result.type">type</type>;
  };

  // <link linkend="op.insert.public-member-functions">公開メンバ関数</link>
  template&lt;typename Cont, typename A0&gt;
    <classname linkend="op.insert.result">result</classname>&lt; insert(Cont &amp;, A0 const &amp;)&gt;::type 
    <methodname linkend="op.insert.operator.0">operator()</methodname>(Cont &amp;, A0 const &amp;) const;
  template&lt;typename Cont, typename A0, typename A1&gt;
    <classname linkend="op.insert.result">result</classname>&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;)&gt;::type 
    <methodname linkend="op.insert.operator.1">operator()</methodname>(Cont &amp;, A0 const &amp;, A1 const &amp;) const;
  template&lt;typename Cont, typename A0, typename A1, typename A2&gt;
    <classname linkend="op.insert.result">result</classname>&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;)&gt;::type 
    <methodname linkend="op.insert.operator.2">operator()</methodname>(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;) const;
  template&lt;typename Cont, typename A0, typename A1, typename A2, typename A3&gt;
    <classname linkend="op.insert.result">result</classname>&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;, A3 const &amp;)>::type 
    <methodname linkend="op.insert.operator.3">operator()</methodname>(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;, A3 const &amp;) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection xml:id="op.insert.public-member-functions">
      <title>insert 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="op.insert.operator.0">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename Cont, typename A0&gt;</modifier>
	    <type>result&lt; insert(Cont &amp;, A0 const &amp;)&gt;::type</type>
	    <methodname>operator()</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="op.insert.operator.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename Cont, typename A0, typename A1&gt;</modifier>
	    <type>result&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;)&gt;::type</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>Cont &amp;</type>
	      <parameter>cont</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A1 const &amp;</type>
	      <parameter>a1</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="op.insert.operator.2">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename Cont, typename A0, typename A1, typename A2&gt;</modifier>
	    <type>result&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;)&gt;::type</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>Cont &amp;</type>
	      <parameter>cont</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A1 const &amp;</type>
	      <parameter>a1</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A2 const &amp;</type>
	      <parameter>a2</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="op.insert.operator.3">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename Cont, typename A0, typename A1, typename A2, typename A3&gt;</modifier>
	    <type>result&lt; insert(Cont &amp;, A0 const &amp;, A1 const &amp;, A2 const &amp;, A3 const &amp;)&gt;::type</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>Cont &amp;</type>
	      <parameter>cont</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A1 const &amp;</type>
	      <parameter>a1</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A2 const &amp;</type>
	      <parameter>a2</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A3 const &amp;</type>
	      <parameter>a3</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>a0</parameter></term>
		    <listitem>
		      <para>値、イテレータ、または個数</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>a1</parameter></term>
		    <listitem>
		      <para>値、イテレータ、文字列、個数、または文字</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>a2</parameter></term>
		    <listitem>
		      <para>値、イテレータ、または個数</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>a3</parameter></term>
		    <listitem>
		      <para>個数</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>cont</parameter></term>
		    <listitem>
		      <para>要素を挿入する対象のコンテナ</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<itemizedlist>
		  <listitem>
		    <para><code language="C++">insert()(cont, a0)</code> の場合、<code language="C++">cont.insert(a0)</code> を返す。</para>
		  </listitem>
		  <listitem>
		    <para><code language="C++">insert()(cont, a0, a1)</code> の場合、<code language="C++">cont.insert(a0, a1)</code> を返す。</para>
		  </listitem>
		  <listitem>
		    <para><code language="C++">insert()(cont, a0, a1, a2)</code> の場合、<code language="C++">cont.insert(a0, a1, a2)</code> を返す。</para>
		  </listitem>
		  <listitem>
		    <para><code language="C++">insert()(cont, a0, a1, a2, a3)</code> の場合、<code language="C++">cont.insert(a0, a1, a2, a3)</code> を返す。</para>
		  </listitem>
		</itemizedlist>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
