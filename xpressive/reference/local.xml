<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="local">
  <refmeta>
    <refentrytitle>local 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::local</refname>
    <refpurpose>
      <classname>local&lt;&gt;</classname> は、<classname>local</classname> 自身に格納されている値への参照に対する遅延ラッパである。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename T&gt;
struct <classname linkend="local">local</classname> : public proto::terminal::type&lt; reference_wrapper&lt; T &gt; &gt; {
  // <link linkend="construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="local.local.0">local</methodname>();
  explicit <methodname linkend="local.local.1">local</methodname>(T const &amp;);

  // <link linkend="public-member-functions">公開メンバ関数</link>
  T &amp; <methodname linkend="local.get.0">get</methodname>();
  T const &amp; <methodname linkend="local.get.1">get</methodname>() const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>
    <para>
      以下は意味アクション内における <classname>local&lt;&gt;</classname> の使用例である。
    </para>
    <programlisting language="C++">using namespace boost::xpressive;
local&lt;int&gt; i(0);
std::string str("1!2!3?");
// 感嘆符付きの数字を数える。
// 疑問符付きのものは数えない。
sregex rex = +( _d [ ++i ] &gt;&gt; '!' );
regex_search(str, rex);
assert( i.get() == 2 );</programlisting>
    <note>
      <para>
	<foreignphrase xml:lang="en">local</foreignphrase> という名前が示すとおり、<classname>local&lt;&gt;</classname> オブジェクトとそれらを参照する正規表現がローカルスコープを離脱することはない。<classname>local</classname> オブジェクトが格納する値は <classname>local&lt;&gt;</classname> の寿命が終わった時点で破壊され、<classname>local&lt;&gt;</classname> を保持する正規表現オブジェクトは懸垂参照とともに取り残される。
      </para>
    </note>

    <refsection>
      <title>テンプレート引数</title>
      <orderedlist>
	<listitem>
	  <synopsis language="C++">typename T</synopsis>
	  <para>ローカル変数の型。</para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="construct-copy-destruct">
      <title>local 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="local.local.0">
	  <methodsynopsis language="C++">
	    <methodname>local</methodname>
	    <void/>
	  </methodsynopsis>
	  <para>型 <type>T</type> をデフォルト構築した値を格納する。</para>
	</listitem>
	<listitem xml:id="local.local.1">
	  <methodsynopsis language="C++">
	    <modifier>explicit</modifier>
	    <methodname>local</methodname>
	    <methodparam>
	      <type>T const &amp;</type>
	      <parameter>t</parameter>
	    </methodparam>
	  </methodsynopsis>
	  <para>型 <type>T</type> をデフォルト構築した値を格納する。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>t</parameter></term>
		    <listitem>
		      <para>初期値。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="public-member-functions">
      <title>公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="local.get.0">
	  <methodsynopsis language="C++">
	    <type>T &amp;</type>
	    <methodname>get</methodname>
	    <void/>
	  </methodsynopsis>
	  <para>ラップしている値にアクセスする。</para>
	</listitem>
	<listitem xml:id="local.get.1">
	  <methodsynopsis language="C++">
	    <type>T const &amp;</type>
	    <methodname>get</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
