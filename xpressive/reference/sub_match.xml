<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="sub_match">
  <refmeta>
    <refentrytitle>sub_match 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::sub_match</refname>
    <refpurpose>
      <classname linkend="sub_match">sub_match</classname> クラステンプレートは、個々のマーク済み部分式にマッチした文字シーケンスを表す。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.sub_match_hpp">boost/xpressive/sub_match.hpp</filename>&gt;

template&lt;typename BidiIter&gt;
struct <classname linkend="sub_match">sub_match</classname> : public std::pair&lt; BidiIter, BidiIter &gt; {
  // 型
  typedef iterator_value&lt; BidiIter &gt;::type      value_type;     
  typedef iterator_difference&lt; BidiIter &gt;::type difference_type;
  typedef <replaceable>unspecified</replaceable>                           string_type;    
  typedef BidiIter                              iterator;       

  // <link linkend="sub_match.construct-copy-destruct">構築、コピー、解体</link>
  <methodname linkend="sub_match.sub_match.0">sub_match</methodname>();
  <methodname linkend="sub_match.sub_match.1">sub_match</methodname>(BidiIter, BidiIter, bool = false);

  // <link linkend="sub_match.public-member-functions">公開メンバ関数</link>
  string_type <methodname linkend="sub_match.str">str</methodname>() const;
  <methodname linkend="sub_match.operator.string_type">operator string_type</methodname>() const;
  difference_type <methodname linkend="sub_match.length">length</methodname>() const;
  <methodname linkend="sub_match.operator.bool_type">operator bool_type</methodname>() const;
  bool <methodname linkend="sub_match.operator.0">operator!</methodname>() const;
  int <methodname linkend="sub_match.compare.0">compare</methodname>(string_type const &amp;) const;
  int <methodname linkend="sub_match.compare.1">compare</methodname>(<classname linkend="sub_match">sub_match</classname> const &amp;) const;
  int <methodname linkend="sub_match.compare.2">compare</methodname>(value_type const *) const;

  // 公開データメンバ
  bool matched;  // この部分マッチが全体マッチに関与していれば真。
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <para>
      <classname linkend="sub_match">sub_match&lt;&gt;</classname> 型のオブジェクトが表すマーク済み部分式が正規表現マッチに関与している場合、メンバ <varname>matched</varname> は真と評価されメンバ <varname>first</varname> および <varname>second</varname> はマッチを形成する文字範囲 <code>[first,second)</code> を表す。それ以外の場合、<varname>matched</varname> は偽でありメンバ <varname>first</varname> および <varname>second</varname> に未定義の値が入る。
    </para>
    <para>
      <classname linkend="sub_match">sub_match&lt;&gt;</classname> 型のオブジェクトが 0 番目の部分式、つまりマッチ全体を表す場合、メンバ <varname>matched</varname> は常に真である。ただし、フラグ <constant>match_partial</constant> を正規表現アルゴリズムを渡して部分マッチが得られた場合は例外である。この場合メンバ <varname>matched</varname> は偽であり、メンバ <varname>first</varname> および <varname>second</varname> は部分マッチを形成する文字範囲を表す。
    </para>

    <refsection xml:id="sub_match.construct-copy-destruct">
      <title><classname>sub_match</classname> 構築、コピー、解体の公開演算</title>
      <orderedlist>
	<listitem xml:id="sub_match.sub_match.0">
	  <constructorsynopsis language="C++">
	    <methodname>sub_match</methodname>
	  </constructorsynopsis>
	</listitem>

	<listitem xml:id="sub_match.sub_match.1">
	  <constructorsynopsis language="C++">
	    <methodname>sub_match</methodname>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>first</parameter>
	    </methodparam>
	    <methodparam>
	      <type>BidiIter</type>
	      <parameter>second</parameter>
	    </methodparam>
	    <methodparam>
	      <type>bool</type>
	      <parameter>matched_</parameter>
	      <initializer>false</initializer>
	    </methodparam>
	  </constructorsynopsis>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="sub_match.public-member-functions">
      <title><classname>sub_match</classname> 公開メンバ関数</title>

      <orderedlist>
	<listitem xml:id="sub_match.str">
	  <methodsynopsis language="C++">
	    <type>string_type</type>
	    <methodname>str</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="sub_match.operator.string_type">
	  <methodsynopsis language="C++">
	    <methodname>operator string_type</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="sub_match.length">
	  <methodsynopsis language="C++">
	    <type>difference_type</type>
	    <methodname>length</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="sub_match.operator.bool_type">
	  <methodsynopsis language="C++">
	    <methodname>operator bool_type</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="sub_match.operator.0">
	  <methodsynopsis language="C++">
	    <type>bool</type>
	    <methodname>operator!</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	</listitem>

	<listitem xml:id="sub_match.compare.0">
	  <methodsynopsis language="C++">
	    <type>int</type>
	    <methodname>compare</methodname>
	    <methodparam>
	      <type>string_type const &amp;</type>
	      <parameter>str</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <para>字句的な文字列比較を行う。</para>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>str</parameter></term>
		    <listitem>
		      <para>比較する文字列</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para><code language="C++">(*this).str().compare(str)</code> の結果</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem xml:id="sub_match.compare.1">
	  <methodsynopsis language="C++">
	    <type>int</type>
	    <methodname>compare</methodname>
	    <methodparam>
	      <type>sub_match const &amp;</type>
	      <parameter>sub</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="sub_match.compare.2">
	  <methodsynopsis language="C++">
	    <type>int</type>
	    <methodname>compare</methodname>
	    <methodparam>
	      <type>value_type const *</type>
	      <parameter>ptr</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
