<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="op.throw_">
  <refmeta>
    <refentrytitle>throw_ 構造体テンプレート</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>boost::xpressive::op::throw_</refname>
    <refpurpose><classname linkend="op.throw_">throw_&lt;&gt;</classname> は、例外を投げる PolymorphicFunctionObject である。</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <synopsis language="C++">// ヘッダ：&lt;<filename class="headerfile" linkend="header.regex_actions_hpp">boost/xpressive/regex_actions.hpp</filename>&gt;

template&lt;typename Except&gt;
struct <classname linkend="op.throw_">throw_</classname> {
  // 型
  typedef void result_type;

  // <link linkend="op.throw_.public-member-functions">公開メンバ関数</link>
  void <methodname linkend="op.throw_.operator.0">operator()</methodname>() const;
  template&lt;typename A0&gt; void <methodname linkend="op.throw_.operator.1">operator()</methodname>(A0 const &amp;) const;
  template&lt;typename A0, typename A1&gt;
    void <methodname linkend="op.throw_.operator.2">operator()</methodname>(A0 const &amp;, A1 const &amp;) const;
  template&lt;typename A0, typename A1, typename A2&gt;
    void <methodname linkend="op.throw_.operator.3">operator()</methodname>(A0 const &amp;, A1 const &amp;, A2 const &amp;) const;
};</synopsis>
  </refsynopsisdiv>

  <refsection>
    <title>説明</title>

    <refsection>
      <title>テンプレート引数</title>
      <orderedlist>
	<listitem>
	  <synopsis language="C++">typename Except</synopsis>
	  <para>例外オブジェクトの型。</para>
	</listitem>
      </orderedlist>
    </refsection>

    <refsection xml:id="op.throw_.public-member-functions">
      <title>throw_ 公開メンバ関数</title>
      <orderedlist>
	<listitem xml:id="op.throw_.operator.0">
	  <methodsynopsis language="C++">
	    <type>void</type>
	    <methodname>operator()</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="op.throw_.operator.1">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename A0&gt;</modifier>
	    <type>void</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>

	<listitem xml:id="op.throw_.operator.2">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename A0, typename A1&gt;</modifier>
	    <type>void</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A1 const &amp;</type>
	      <parameter>a1</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <xi:include href="-overload-description.xml"/>
	</listitem>
	
	<listitem xml:id="op.throw_.operator.3">
	  <methodsynopsis language="C++">
	    <modifier>template&lt;typename A0, typename A1, typename A2&gt;</modifier>
	    <type>void</type>
	    <methodname>operator()</methodname>
	    <methodparam>
	      <type>A0 const &amp;</type>
	      <parameter>a0</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A1 const &amp;</type>
	      <parameter>a1</parameter>
	    </methodparam>
	    <methodparam>
	      <type>A2 const &amp;</type>
	      <parameter>a2</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <note>
	    <para>
	      この関数は実際に例外を投げるのに <symbol>BOOST_THROW_EXCEPTION</symbol> を使用する。Boost.Exception ライブラリの説明を見よ。
	    </para>
	  </note>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term><parameter>a0</parameter></term>
		    <listitem>
		      <para>コンストラクタの第 1 引数。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>a1</parameter></term>
		    <listitem>
		      <para>コンストラクタの第 2 引数。</para>
		    </listitem>
		  </varlistentry>
		  <varlistentry>
		    <term><parameter>a2</parameter></term>
		    <listitem>
		      <para>コンストラクタの第 3 引数。</para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para><code language="C++">Except(a0,a1,...)</code></para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </refsection>
  </refsection>
</refentry>
