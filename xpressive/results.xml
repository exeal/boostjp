<?xml version="1.0" ?>
<!--
  Copyright (c) 2008 Eric Niebler
  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0">
  <title>結果へのアクセス</title>

  <section>
    <title>概要</title>
    <para>
      <function linkend="regex_match">regex_match()</function> および <function linkend="regex_search">regex_search()</function> の成否が分かるだけでは十分でない場合もある。<function linkend="regex_match">regex_match()</function> 、<function linkend="regex_search">regex_search()</function> に <classname linkend="match_results">match_results&lt;&gt;</classname> 型のオブジェクトを渡すと、アルゴリズムが完全に成功した後 <classname linkend="match_results">match_results&lt;&gt;</classname> に、正規表現のどの部分がシーケンスのどの部分にマッチしたかの追加情報が入る。Perl ではこれらの部分シーケンスを<emphasis>後方参照</emphasis>といい、変数 <code language="Perl">$1</code> 、<code language="Perl">$2</code> 、…に格納される。xpressive では <classname linkend="sub_match">sub_match&lt;&gt;</classname> 型のオブジェクトであり、<classname linkend="match_results">match_results&lt;&gt;</classname> 構造体に格納される。これらは <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトのベクタとして振舞う。
    </para>
  </section>

  <section>
    <title>match_results</title>
    <para>
      さて、正規表現アルゴリズムに <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトを渡し、アルゴリズムが成功したとする。結果を調べたくなるところだ。<classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトを使ってすることといえば、その内部に格納されている <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトへ添字を介してアクセスすることがほとんどである。しかし <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトには他にも少し使い道がある。
    </para>
    <para>
      <varname>what</varname> という名前の <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトに格納されている情報にアクセスする方法を以下の表に示す。
    </para>

    <table>
      <caption>match_results&lt;&gt; のアクセス子</caption>
      <thead>
	<tr>
	  <td>アクセス子</td>
	  <td>効果</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">what.size()</code></td>
	  <td>部分マッチの総数を返す。マッチ全体は 0 番目の部分マッチとして格納されるため、アルゴリズムが成功した場合は結果は常に 0 より大きい。</td>
	</tr>
	<tr>
	  <td><code language="C++">what[n]</code></td>
	  <td><replaceable>n</replaceable> 番目の部分マッチを返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.length(n)</code></td>
	  <td><replaceable>n</replaceable> 番目の部分マッチの長さを返す。<code language="C++">what[n].length()</code> と同じ。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.position(n)</code></td>
	  <td><replaceable>n</replaceable> 番目の部分マッチ開始位置の入力シーケンス内におけるオフセットを返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.str(n)</code></td>
	  <td><replaceable>n</replaceable> 番目の部分マッチから構築した <classname>std::basic_string&lt;&gt;</classname> を返す。<code language="C++">what[n].str()</code> と同じ。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.prefix()</code></td>
	  <td>入力シーケンスの先頭から全体マッチ先頭までの部分シーケンスを表す <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトを返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.suffix()</code></td>
	  <td>全体マッチの終端から入力シーケンスの終端までの部分シーケンスを表す <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトを返す。</td>
	</tr>
	<tr>
	  <td><code language="C++">what.regex_id()</code></td>
	  <td>この <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトで最後に使用した <classname linkend="basic_regex">basic_regex&lt;&gt;</classname> オブジェクトの <type role="typedef">regex_id</type> を返す。</td>
	</tr>
      </tbody>
    </table>

    <para>
      <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトには他にも使い道があるが、<link linkend="grammars_and_nested_matches">文法と入れ子マッチ</link>の項であらためて述べることにする。
    </para>
  </section>

  <section>
    <title>sub_match</title>
    <para>
      <classname linkend="match_results">match_results&lt;&gt;</classname> オブジェクトに添字を介してアクセスすると <classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトが得られる。<classname linkend="sub_match">sub_match&lt;&gt;</classname> は基本的にはイテレータの組である。定義は以下のようになっている。
    </para>

    <programlisting language="C++">template&lt; class BidirectionalIterator &gt;
struct sub_match
    : std::pair&lt; BidirectionalIterator, BidirectionalIterator &gt;
{
    bool matched;
    // ...
};</programlisting>

    <para>
      <classname>std::pair&lt;&gt;</classname> を公開継承しているため、<classname linkend="sub_match">sub_match&lt;&gt;</classname> は <type>BidirectionalIterator</type> 型の <varname>first</varname> および <varname>second</varname> データメンバをもつ。これらは、この <classname linkend="sub_match">sub_match&lt;&gt;</classname> が表す部分シーケンスの先頭と終端である。また <classname linkend="sub_match">sub_match&lt;&gt;</classname> は論理型の <varname>matched</varname> データメンバをもち、この <classname linkend="sub_match">sub_match&lt;&gt;</classname> が完全マッチに関与する場合に真となる。
    </para>
    <para>
      名前を <varname>sub</varname> とした場合の、<classname linkend="sub_match">sub_match&lt;&gt;</classname> オブジェクトに格納されている情報にアクセスする方法を以下の表に示す。
    </para>

    <table>
      <caption>sub_match&lt;&gt; アクセス子</caption>
      <thead>
	<tr>
	  <td>アクセス子</td>
	  <td>効果</td>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">sub.length()</code></td>
	  <td>部分マッチの長さを返す。<code language="C++">std::distance(sub.first,sub.second)</code> と同じ。</td>
	</tr>
	<tr>
	  <td><code language="C++">sub.str()</code></td>
	  <td>部分マッチから構築した <classname>std::basic_string&lt;&gt;</classname> を返す。<code language="C++">std::basic&lt;char_type&gt;(sub.first,sub.second)</code> と同じ。</td>
	</tr>
	<tr>
	  <td><code language="C++">sub.compare(str)</code></td>
	  <td>部分マッチとstrの文字列比較を行う。<varname>str</varname> は <classname>std::basic_string&lt;&gt;</classname> 、C 形式の null 終端文字列、別の部分マッチのいずれでもよい。<code language="C++">sub.str().compare(str)</code> と同じ。</td>
	</tr>
      </tbody>
    </table>
  </section>

  <section>
    <title>結果の無効可</title>
    <important>
      <para>
	結果は入力シーケンス内のイテレータとして格納される。入力シーケンスが無効になるとマッチ結果もまた無効となる。例えば <classname>std::string</classname> オブジェクトに対してマッチを行った場合、結果が有効なのは、次にその <classname>std::string</classname> オブジェクトの非 const メンバ関数を呼び出すまでの間だけである。それ以降は <classname>match_results&lt;&gt;</classname> オブジェクトに格納されている結果は無効となるため、使用してはならない。
      </para>
    </important>
  </section>
</section>
