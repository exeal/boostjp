<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="configuration">
  <title>構成</title>

  <section xml:id="configuration.compiler">
    <title>コンパイラセットアップ</title>
    <para>
      <link xlink:href="http://www.boost.org/libs/config/index.html">Boost.Config サブシステム</link>があるため、Boost.Regex を使うのに特別な構成は必要ない。問題がある場合（あるいは一般的でないコンパイラやプラットフォームを使う場合）は <link xlink:href="http://www.boost.org/libs/config/index.html">Boost.Config</link> に構成スクリプトがあるので、そちらを使うとよい。
    </para>
  </section>

  <section xml:id="configuration.locale">
    <title>ロカールおよび特性クラスの選択</title>
    <para>
      ユーザのロカール（<foreignphrase xml:lang="en">locale</foreignphrase>）を Boost.Regex がどのように処理するか制御するには、以下のマクロ（<filename class="headerfile">user.hpp</filename> を見よ）を使う。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>説明</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_REGEX_USE_C_LOCALE</symbol></td>
	  <td>Boost.Regex が、特性クラス中で大域 C ロカールを使うように強制する。C++ ロカールがあるのでこの設定は現在非推奨となっている。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_USE_CPP_LOCALE</symbol></td>
	  <td>Boost.Regex が、既定特性クラス中で <classname>std::locale</classname> を使うように強制する。各正規表現はインスタンス固有のロカールにより <methodname>imbue</methodname> される。これは Windows 以外のプラットフォームにおける既定の動作である。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_NO_W32</symbol></td>
	  <td>Boost.Regex は（利用可能な場合でも）あらゆる Win32 API を使用しない（<symbol>BOOST_REGEX_USE_C_LOCALE</symbol> が設定されない限り <symbol>BOOST_REGEX_USE_CPP_LOCALE</symbol> が暗黙に有効になる）。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="configuration.linkage">
    <title>リンケージに関するオプション</title>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>説明</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_REGEX_DYN_LINK</symbol></td>
	  <td>Microsoft C++ および Borland C++ ビルドでは Boost.Regex の DLL ビルドにリンクするようになる。既定では Boost.Regex は、動的 C 実行時ライブラリを使用している場合であっても静的ライブラリにリンクする。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_NO_LIB</symbol></td>
	  <td>Microsoft C++ および Borland C++ において、Boost.Regex がリンクするライブラリを自動的に選択しないようにする。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_NO_FASTCALL</symbol></td>
	  <td>Microsoft ビルドにおいて、<code language="C++">__fastcall</code> 呼び出し規約よりも <code language="C++">__cdecl</code> 呼び出し規約を使用する。マネージ・アンマネージコードの両方から同じライブラリを使用する場合に有用。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="configuration.algorithm">
    <title>アルゴリズムの選択</title>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>説明</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_REGEX_RECURSIVE</symbol></td>
	  <td>スタック再帰マッチアルゴリズムを使用する。これは通常最速のオプションである（といっても効果はわずかだが）が、極端な場合はスタックオーバーフローを起こす可能性がある（Win32 では安全に処理されるが、その他のプラットフォームではそうではない）。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_NON_RECURSIVE</symbol></td>
	  <td>非スタック再帰マッチアルゴリズムを使用する。スタック再帰に比べて若干遅いが、どれだけ病的な正規表現に対しても安全である。これは Win32 以外のプラットフォームにおける既定である。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="configuration.tuning">
    <title>アルゴリズムの調整</title>
    <para>
      以下のオプションは <symbol>BOOST_REGEX_RECURSIVE</symbol> が設定されている場合のみ有効である。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>説明</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_REGEX_HAS_MS_STACK_GUARD</symbol></td>
	  <td>Microsoft スタイルの <code language="C++">__try</code> - <code language="C++">__except</code> ブロックがサポートされており、スタックオーバーフローを安全に捕捉できることを Boost.Regex に通知する。</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      以下のオプションは <symbol>BOOST_REGEX_NON_RECURSIVE</symbol> が設定されている場合のみ有効である。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>説明</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_REGEX_BLOCKSIZE</symbol></td>
	  <td>非再帰モードにおいて Boost.Regex は状態マシンのスタックのために大きめのメモリブロックを使う。ブロックのサイズが大きいほどメモリ確保の回数は少なくなる。既定は 4096 バイトであり、大抵の正規表現マッチでメモリの再確保が必要ない値である。しかしながらプラットフォームの特性を見た上で、別の値を選択することも可能である。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_MAX_BLOCKS</symbol></td>
	  <td>サイズ <symbol>BOOST_REGEX_BLOCKSIZE</symbol> のブロックをいくつ使用できるか設定する。この値を超えると Boost.Regex はマッチの検索を停止し、<exceptionname>std::runtime_error</exceptionname> を投げる。既定値は 1024 である。<symbol>BOOST_REGEX_BLOCKSIZE</symbol> を変更した場合、この値にも微調整が必要である。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_REGEX_MAX_CACHE_BLOCKS</symbol></td>
	  <td>内部キャッシュに格納するメモリブロック数を設定する。メモリブロックは <function>::operator new</function> 呼び出しではなくこのキャッシュから割り当てられる。一般的にこの方法はメモリブロック要求のたびに <function>::operator new</function> を呼び出すよりも数段高速だが、巨大なメモリチャンク（サイズが <symbol>BOOST_REGEX_BLOCKSIZE</symbol> のブロックが最大 16 個）をキャッシュしなければならないという欠点がある。メモリの制限が厳しい場合は、この値を 0 に設定し（キャッシュはまったく行われない）、それで遅すぎる場合は 1 か 2 にするとよい。逆に巨大なマルチプロセッサ、マルチスレッドのシステムでは大きな値のほうがよい。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>
</section>
