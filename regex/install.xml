<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="install">
  <title>ライブラリのビルドとインストール</title>
  <para>
    ライブラリの zip ファイルを解凍するとき、ディレクトリの内部構造を変更しないようにする（例えば <option>-d</option> オプションを付けて解凍する）。もし変更してしまっていたら、この文書を読むのをやめて解凍したファイルをすべて削除して最初からやり直したほうがよい。
  </para>
  <para>
    本ライブラリを使用する前に設定することは何もない。大抵のコンパイラ、標準ライブラリ、プラットフォームは何もしなくてもサポートされる。設定で何か問題がある場合や、単にあなたのコンパイラで設定をテストしてみたい場合は、やり方は他の Boost ライブラリと同じである。<link xlink:href="http://www.boost.org/libs/config/index.html">ライブラリの設定ドキュメント</link>を見るとよい。
  </para>
  <para>
    ライブラリのコードはすべて名前空間 <package>boost</package> 内にある。
  </para>
  <para>
    他のテンプレートライブラリとは異なり、本ライブラリはテンプレートコード（ヘッダ中）と、静的コード・データ（cpp ファイル中）が混在している。したがってライブラリを使用する前に、ライブラリのサポートコードをビルドしてライブラリかアーカイブファイルを作成する必要がある。これについて各プラットフォームにおける方法を以下に述べる。
  </para>

  <sect4 xml:id="install.building_with_bjam">
    <title>bjam を用いたビルド</title>
    <para>
      本ライブラリをビルドおよびインストールする最適な方法である。<link xlink:href="http://www.boost.org/more/getting_started.html">Getting Started ガイド</link>を参照していただきたい。
    </para>
  </sect4>

  <sect4 xml:id="install.building_with_unicode_and_icu_support">
    <title>
      Unicode および ICU サポートビルド
      <footnote>
	<para>訳注　Unicode を用いた正規表現ライブラリは ICU にもあります。Unicode に関する機能は ICU 版のほうが豊富です。</para>
      </footnote>
    </title>
    <para>
      Boost.Regex は、ICU がコンパイラの検索パスにインストールされているか設定をチェックするようになった。ビルドを始めると次のようなメッセージが現れるはずである：
    </para>
    <screen><computeroutput>Performing configuration checks

    - has_icu builds           : yes</computeroutput></screen>
    <para>
      これは ICU が見つかり、ライブラリのビルドでサポートされるということを表している。
    </para>
    <tip>
      <para>
	正規表現ライブラリで ICU を使用したくない場合は <option>--disable-icu</option> コマンドラインオプションを使用してビルドするとよい。
      </para>
    </tip>
    <para>
      仮に次のような表示が出た場合、
    </para>
    <screen><computeroutput>Performing configuration checks

    - has_icu builds           : no</computeroutput></screen>
    <para>
      ICU は見つからず、関連するサポートはライブラリのコンパイルに含まれない。これが期待した結果と違うという場合は、ファイル <filename>boost-root/bin.v2/config.log</filename> の内容を見て、設定チェック時にビルドが吐き出した実際のエラーメッセージを確認すべきである。コンパイラに適切なオプションを渡してエラーを修正する必要があるだろう。例えば、<replaceable>some-include-path</replaceable> をコンパイラのヘッダインクルードパスに追加するには次のようにする。
    </para>
    <screen><userinput>bjam include=<replaceable>some-include-path</replaceable> --toolset=<replaceable>toolset-name</replaceable> install</userinput></screen>
    <para>
      あるいは ICU のバイナリが非標準的な名前でビルドされている場合に、ライブラリのリンク時に既定のICUバイナリ名の代わりに <replaceable>linker-options-for-icu</replaceable> を使用するには次のようにする。
    </para>
    <screen><userinput>bjam -sICU_LINK="linker-options-for-icu" --toolset=<replaceable>toolset-name</replaceable> install</userinput></screen>
    <para>
      オプション <option>cxxflags=option</option> および <option>linkflags=-option</option> でコンパイラやリンカに固有のオプションを設定する必要があるかもしれない。
    </para>
    <important>
      <para>
	設定の結果はキャッシュされる。異なるコンパイラオプションで再ビルドする場合、bjam のコマンドラインに <option>-a</option> を付けるとすべてのターゲットが強制的に再ビルドされる。
      </para>
    </important>
    <para>
      ICU がコンパイラのパスに入っておらず、ヘッダ・ライブラリ・バイナリがそれぞれ <filename class="directory"><replaceable>path-to-icu/include</replaceable></filename> 、<filename class="directory"><replaceable>path-to-icu/lib</replaceable></filename> 、<filename class="directory"><replaceable>path-to-icu/bin</replaceable></filename> にあるのであれば、環境変数 ICU_PATH でインストールした ICU のルートディレクトリを指定する必要がある。典型的なのは MSVC でビルドする場合である。例えば ICU を <filename class="directory">c:\download\icu</filename> にインストールした場合は、次のようにする。
    </para>
    <screen><userinput>bjam -sICU_PATH=c:\download\icu --toolset=<replaceable>toolset-name</replaceable> install</userinput></screen>
    <important>
      <para>
	ICU も Boost と同様に C++ ライブラリであり、ICU のコピーが Boost のビルドに使用したものと同じ C++ コンパイラ（およびバージョン）でビルドされていなければならないということに注意していただきたい。そうでない場合 Boost.Regex は正しく動作しない。
      </para>
    </important>
    <para>
      結局のところ、複数のコンパイラのバージョンで異なる ICU ビルド使用してビルド・テストするのであれば、設定の段階で ICU が自動的に検出されるよう各ツールセットに適切なコンパイラ・リンカオプションを設定するよう（ICU バイナリが標準的な名前を使っているのであれば、適切なヘッダとリンカの検索パスを追加するだけでよい）user-config.jam を修正するのが現時点で唯一の方法である。
    </para>
  </sect4>

  <sect4 xml:id="install.building_from_source">
    <title>メイクファイルを使ったビルド</title>
    <para>
      Regex ライブラリは「ただのソースファイル群」であり、ビルドに特に必要なことはない。
    </para>
    <para>
      <filename>&lt;boost のパス&gt;/libs/regex/src*.cpp</filename> のファイルをライブラリとしてビルドするか、これらのファイルをあなたのプロジェクトに追加するとよい。既定の Boost ビルドでサポートされていない個々のコンパイラオプションを使う必要がある場合に特に有用である。
    </para>
    <para>
      以下の 2 つの #define を知っておく必要がある。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  ICU サポートを有効にしてコンパイルする場合は <symbol>BOOST_HAS_ICU</symbol> を定義しなければならない。
	</para>
      </listitem>
      <listitem>
	<para>
	  Windows で DLL をビルドする場合は <symbol>BOOST_REGEX_DYN_LINK</symbol> を定義しなければならない。
	</para>
      </listitem>
    </itemizedlist>
    <important>
      <para>
	Boost.Regex で提供しているメイクファイルは非推奨となったため、次回のリリースで削除する。
      </para>
    </important>
  </sect4>
</section>
