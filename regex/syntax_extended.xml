<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="syntax.basic_extended">
  <title>POSIX 拡張正規表現構文</title>

  <sect3 xml:id="syntax.basic_extended.synopsis">
    <title>概要</title>
    <para>
      POSIX 拡張正規表現構文は POSIX C 正規表現 API によりサポートされ、<command>egrep</command> および <command>awk</command> ユーティリティがその変種を使用している。Boost.Regex で POSIX 拡張正規表現を使用するには、コンストラクタにフラグ <constant>extended</constant> を渡す。例えば、
    </para>
    <programlisting language="C++">// e1 は大文字小文字を区別する POSIX 拡張正規表現：
boost::regex e1(my_expression, boost::regex::extended);
// e2 は大文字小文字を区別しない POSIX 拡張正規表現：
boost::regex e2(my_expression, boost::regex::extended|boost::regex::icase);</programlisting>
  </sect3>

  <sect3 xml:id="syntax.basic_extended.posix_extended_syntax">
    <title>POSIX 拡張構文</title>
    <para>
      POSIX 拡張正規表現では、以下の特別なものを除くあらゆる文字が文字そのものにマッチする。
    </para>
    <literallayout>.[{()\*+?|^$</literallayout>

    <sect4 xml:id="syntax.basic_extended.wildcard_">
      <title>ワイルドカード</title>
      <para>
	文字集合外部の <phrase role="regex-pattern">.</phrase> 1 文字は、以下以外のあらゆる文字 1 文字にマッチする。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    NULL 文字（マッチアルゴリズムにフラグ <constant>match_not_dot_null</constant> を渡した場合）。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    改行文字（マッチアルゴリズムにフラグ <constant>match_not_dot_newline</constant> を渡した場合）。
	  </para>
	</listitem>
      </itemizedlist>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.anchors_">
      <title>アンカー</title>
      <para>
	<phrase role="regex-pattern">^</phrase> は、正規表現の先頭、あるいは部分式の先頭で使用した場合に行頭にマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">$</phrase> は、正規表現の終端、あるいは部分式の終端で使用した場合に行末にマッチする。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.marked_sub_expressions_">
      <title>マーク済み部分式</title>
      <para>
	開始が <phrase role="regex-pattern">(</phrase> で終了が <phrase role="regex-pattern">)</phrase> の節は部分式として機能する。マッチした部分式はすべてマッチアルゴリズムにより個別のフィールドに分けられる。マーク済み部分式は繰り返しと後方参照により参照が可能である。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.repeats_">
      <title>繰り返し</title>
      <para>
	あらゆるアトム（文字、部分式、文字クラス）は <phrase role="regex-pattern">*</phrase> 、<phrase role="regex-pattern">+</phrase> 、<phrase role="regex-pattern">?</phrase> および <phrase role="regex-pattern">{}</phrase> 演算子による繰り返しが可能である。
      </para>
      <para>
	<phrase role="regex-pattern">*</phrase> 演算子は直前のアトムの <emphasis>0 回以上の繰り返し</emphasis>にマッチする。例えば正規表現 <phrase role="regex-pattern">a*b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>b
ab
aaaaaaaab</literallayout>
      <para>
	<phrase role="regex-pattern">+</phrase> 演算子は直前のアトムの <emphasis>1 回以上の繰り返し</emphasis>にマッチする。例えば正規表現 <phrase role="regex-pattern">a+b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>ab
aaaaaaaab</literallayout>
      <para>
	しかし次にはマッチしない。
      </para>
      <literallayout>b</literallayout>
      <para>
	<phrase role="regex-pattern">?</phrase> 演算子は直前のアトムの <emphasis>0 回あるいは 1 回の出現</emphasis>にマッチする。例えば正規表現 <phrase role="regex-pattern">ca?b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>cb
cab</literallayout>
      <para>
	しかし次にはマッチしない。
      </para>
      <literallayout>caab</literallayout>
      <para>
	アトムの繰り返しは回数境界指定の繰り返しによっても可能である。
      </para>
      <para>
	<phrase role="regex-pattern">a{n}</phrase> は <phrase role="regex-input">a</phrase> の<emphasis>ちょうど n 回の繰り返し</emphasis>にマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a{n,}</phrase> は <phrase role="regex-input">a</phrase> の <emphasis>n 回以上の繰り返し</emphasis>にマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a{n,m}</phrase> は <phrase role="regex-input">a</phrase> の <emphasis>n 回以上 m 回以下の繰り返し</emphasis>にマッチする。
      </para>
      <para>
	例えば
      </para>
      <literallayout>^a{2,3}$</literallayout>
      <para>
	は、次のいずれにもマッチするが、
      </para>
      <literallayout>aa
aaa</literallayout>
      <para>
	次のいずれにもマッチしない。
      </para>
      <literallayout>a
aaaa</literallayout>
      <para>
	直前の構造が繰り返し不能な場合に繰り返し演算子を使うとエラーになる。例えば次は
      </para>
      <literallayout>a(*)</literallayout>
      <para>
	<phrase role="regex-pattern">*</phrase> 演算子を適用可能なものがないためエラーとなる。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.back_references_">
      <title>後方参照</title>
      <para>
	エスケープ文字の直後に数字 <replaceable>n</replaceable> があると、部分式 <replaceable>n</replaceable> にマッチしたものと同じ文字列にマッチする。<replaceable>n</replaceable> は 0 から 9 の範囲である。例えば次の正規表現は、
      </para>
      <literallayout>^(a*).*\1$</literallayout>
      <para>
	次の文字列にマッチする。
      </para>
      <literallayout>aaabbaaa</literallayout>
      <para>
	しかし、次の文字列にはマッチしない。
      </para>
      <literallayout>aaabba</literallayout>
      <caution>
	<para>
	  POSIX 標準は「拡張」正規表現の後方参照をサポートしない。これは標準に対する互換拡張である。
	</para>
      </caution>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.alternation">
      <title>選択</title>
      <para>
	<phrase role="regex-pattern">|</phrase> 演算子は引数のいずれかにマッチする。よって、例えば <phrase role="regex-pattern">abc|def</phrase> は <phrase role="regex-input">abc</phrase> か <phrase role="regex-input">def</phrase> のいずれかにマッチする。
      </para>
      <para>
	括弧を使用すると選択をグループ化できる。例えば <phrase role="regex-pattern">ab(d|ef)</phrase> は <phrase role="regex-input">abd</phrase> か <phrase role="regex-input">abef</phrase> のいずれかにマッチする。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.character_sets_">
      <title>文字集合</title>
      <para>
	文字集合は <phrase role="regex-pattern">[</phrase> で始まり <phrase role="regex-pattern">]</phrase> で終わる括弧式であり、文字の集合を定義する。集合に含まれるいずれかの 1 文字にマッチする。
      </para>
      <para>
	文字集合に含められる要素は以下の組み合わせである。
      </para>

      <sect5 xml:id="syntax.basic_extended.single_characters_">
	<title>単一の文字</title>
	<para>
	  例えば <phrase role="regex-pattern">[abc]</phrase> は “a”、“b”、“c” のいずれか 1 文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.character_ranges_">
	<title>文字範囲</title>
	<para>
	  例えば <phrase role="regex-pattern">[a-c]</phrase> は‘a’から‘c’までの範囲の 1 文字にマッチする。POSIX 拡張正規表現の既定では、文字 <replaceable>x</replaceable> が <replaceable>y</replaceable> から <replaceable>z</replaceable> の範囲であるとは、文字の照合順がその範囲内にある場合をいう。結果はロカールの影響を受ける。この動作は <constant>collate</constant> <link linkend="ref.syntax_option_type">オプションフラグ</link>を設定しないことで抑止でき、文字が特定の範囲内にあるかどうかは文字のコードポイントのみで決定する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.negation_">
	<title>否定</title>
	<para>
	  括弧式が文字 <phrase role="regex-pattern">^</phrase> で始まっている場合は、正規表現に含まれる文字の補集合となる。例えば <phrase role="regex-pattern">[^a-c]</phrase> は範囲 <phrase role="regex-pattern">a-c</phrase> を除くあらゆる文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.character_classes_">
	<title>文字クラス</title>
	<para>
	  <phrase role="regex-pattern">[[:name:]]</phrase> のような形式の正規表現は名前付き文字クラス「name」にマッチする。例えば <phrase role="regex-pattern">[[:lower:]]</phrase> はあらゆる小文字にマッチする。<link linkend="syntax.character_classes">文字クラス名</link>を見よ。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.collating_elements_">
	<title>照合要素</title>
	<para>
	  <phrase role="regex-pattern">[[.col.]]</phrase> のような形式の式は照合要素 <replaceable>col</replaceable> にマッチする。照合要素とは、単一の照合単位として扱われる文字か文字シーケンスである。照合要素は範囲の端点としても使用できる。例えば <phrase role="regex-pattern">[[.ae.]-c]</phrase> は文字シーケンス “ae” に加えて、現在の範囲 “ae”-c の文字のいずれかにマッチする。 後者において “ae” は現在のロカールにおける単一の照合要素として扱われる。
	</para>
	<para>
	  照合要素は（通常、文字集合内で使用できない）エスケープの代わりとして使用できる。例えば <phrase role="regex-pattern">[[.^.]abc]</phrase> は ‘abc^’ のいずれかの 1 文字にマッチする。
	</para>
	<para>
	  この拡張として、照合要素を<link linkend="syntax.collating_names">シンボル名</link>で指定する方法もある。例えば、
	</para>
	<literallayout>[[.NUL.]]</literallayout>
	<para>
	  は NUL 文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.equivalence_classes_">
	<title>等価クラス</title>
	<para>
	  <phrase role="regex-pattern">[[=col=]]</phrase> のような形式の正規表現は、第 1 位のソートキーが照合要素 <replaceable>col</replaceable> と同じ文字および照合要素にマッチする。照合要素名 <replaceable>col</replaceable> は<link linkend="syntax.collating_names">シンボル名</link>でもよい。第 1 位のソートキーでは大文字小文字の違い、アクセント記号の有無、ロカール固有のテーラリング（<foreignphrase xml:lang="en">tailoring</foreignphrase>）は無視される。よって <phrase role="regex-pattern">[[=a=]]</phrase> は a 、À 、Á 、Â 、Ã 、Ä 、Å 、A 、à 、á 、â 、ã 、ä および å のいずれにもマッチする。残念ながらこの機能の実装はプラットフォームの照合と地域化のサポートに依存し、すべてのプラットフォームで移植性の高い動作は期待できず、単一のプラットフォームにおいてもすべてのロカールで動作するとは限らない。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.combinations_">
	<title>結合</title>
	<para>
	  以上の要素はすべて 1 つの文字集合宣言内で結合可能である。例：<phrase role="regex-pattern">[[:digit:]a-c[.NUL.]]</phrase>
	</para>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.escapes">
      <title>エスケープ</title>
      <para>
	POSIX 標準は、POSIX 拡張正規表現についてエスケープシーケンスを定義していない。ただし、以下の例外がある。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    特殊文字の前にエスケープが付いている場合は、文字そのものにマッチする。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    通常の文字の前にエスケープを付けた場合の効果は未定義である。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    文字クラス宣言内のエスケープは、エスケープ文字自身にマッチする。言い換えると、エスケープ文字は文字クラス宣言内では特殊文字ではない。よって <phrase role="regex-pattern">[\^]</phrase> は直値の <phrase role="regex-input">\</phrase> か <phrase role="regex-input">^</phrase> にマッチする。
	  </para>
	  <para>
	    しかしながら、これではいささか制限が強すぎるため、Boost.Regex は以下の標準互換の拡張をサポートする。
	  </para>
	</listitem>
      </itemizedlist>

      <sect5 xml:id="syntax.basic_extended.escapes_matching_a_specific_character">
	<title>特定の文字にマッチするエスケープ</title>
	<para>
	  以下のエスケープシーケンスは、すべて 1 文字の別名である。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープ</th>
	      <th>文字</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\a</phrase></td>
	      <td>‘\a’</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\e</phrase></td>
	      <td>0x1B</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\f</phrase></td>
	      <td>\f</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\n</phrase></td>
	      <td>\n</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\r</phrase></td>
	      <td>\r</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\t</phrase></td>
	      <td>\t</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\v</phrase></td>
	      <td>\v</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\b（文字クラス宣言内のみ）。</phrase></td>
	      <td>\b</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\cX</phrase></td>
	      <td>ASCII エスケープシーケンス。コードポイントが X % 32 の文字</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\xdd</phrase></td>
	      <td>16 進エスケープシーケンス。コードポイントが 0xdd の文字にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\x{dddd}</phrase></td>
	      <td>16 進エスケープシーケンス。コードポイントが 0xdddd の文字にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\0ddd</phrase></td>
	      <td>8 進エスケープシーケンス。コードポイントが 0ddd の文字にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\N{name}</phrase></td>
	      <td>シンボル名 <replaceable>name</replaceable> の文字にマッチする。例えば <phrase role="regex-pattern">\\N{newline}</phrase> は文字 <phrase role="regex-input">\n</phrase> にマッチする。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.basic_extended._quot_single_character_quot__character_classes_">
	<title>「単一文字」文字クラス</title>
	<para>
	  <replaceable>x</replaceable> が文字クラス名である場合、エスケープ文字 <replaceable>x</replaceable> はその文字クラスに属するあらゆる文字にマッチし、エスケープ文字 <replaceable>X</replaceable> はその文字クラスに属さないあらゆる文字にマッチする。
	</para>
	<para>
	  既定でサポートされているものは以下のとおりである。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープシーケンス</th>
	      <th>等価な文字クラス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\d</phrase></td>
	      <td><phrase role="regex-pattern">[[:digit:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\l</phrase></td>
	      <td><phrase role="regex-pattern">[[:lower:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\s</phrase></td>
	      <td><phrase role="regex-pattern">[[:space:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\u</phrase></td>
	      <td><phrase role="regex-pattern">[[:upper:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\w</phrase></td>
	      <td><phrase role="regex-pattern">[[:word:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\D</phrase></td>
	      <td><phrase role="regex-pattern">[^[:digit:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\L</phrase></td>
	      <td><phrase role="regex-pattern">[^[:lower:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\S</phrase></td>
	      <td><phrase role="regex-pattern">[^[:space:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\U</phrase></td>
	      <td><phrase role="regex-pattern">[^[:upper:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\W</phrase></td>
	      <td><phrase role="regex-pattern">[^[:word:]]</phrase></td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.character_properties">
	<title>文字プロパティ</title>
	<para>
	  次の表の文字プロパティ名はすべて文字クラスで使用する名前と等価である。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>形式</th>
	      <th>説明</th>
	      <th>等価な文字集合の形式</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\pX</phrase></td>
	      <td>プロパティ <replaceable>X</replaceable> をもつあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[[:X:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\p{Name}</phrase></td>
	      <td>プロパティ <replaceable>Name</replaceable> をもつあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[[:Name:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\PX</phrase></td>
	      <td>プロパティ <replaceable>X</replaceable> をもたないあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[^[:X:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\P{Name}</phrase></td>
	      <td>プロパティ <replaceable>Name</replaceable> をもたないあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[^[:Name:]]</phrase></td>
	    </tr>
	  </tbody>
	</informaltable>
	<para>
	  例えば <phrase role="regex-pattern">\pd</phrase> は <phrase role="regex-pattern">\p{digit}</phrase> と同様、あらゆる「数字」（<foreignphrase xml:lang="en">digit</foreignphrase>）にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.word_boundaries">
	<title>単語境界</title>
	<para>
	  次のエスケープシーケンスは単語の境界にマッチする。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープ</th>
	      <th>意味</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\&lt;</phrase></td>
	      <td>単語の先頭にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\&gt;</phrase></td>
	      <td>単語の終端にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\b</phrase></td>
	      <td>単語境界（単語の先頭か終端）にマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\B</phrase></td>
	      <td>単語境界以外にマッチする。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.buffer_boundaries">
	<title>バッファ境界</title>
	<para>
	  以下はバッファ境界にのみマッチする。この場合の「バッファ」とは、マッチ対象の入力テキスト全体である（<phrase role="regex-pattern">^</phrase> および <phrase role="regex-pattern">$</phrase> はテキスト中の改行にもマッチすることに注意していただきたい）。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープ</th>
	      <th>意味</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\`</phrase></td>
	      <td>バッファの先頭にのみマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\'</phrase></td>
	      <td>バッファの終端にのみマッチする。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\A</phrase></td>
	      <td>バッファの先頭にのみマッチする（<phrase role="regex-pattern">\`</phrase> と同じ）。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\z</phrase></td>
	      <td>バッファの終端にのみマッチする（<phrase role="regex-pattern">\'</phrase> と同じ）。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\Z</phrase></td>
	      <td>バッファ終端の長さ 0 以上の改行シーケンスにマッチする。正規表現 <phrase role="regex-pattern">\n*\z</phrase> と等価である。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.continuation_escape">
	<title>継続エスケープ（<foreignphrase xml:lang="en">Continuation Escape</foreignphrase>）</title>
	<para>
	  シーケンス <phrase role="regex-pattern">\G</phrase> は最後にマッチが見つかった位置、あるいは前回のマッチが存在しない場合はマッチ対象テキストの先頭にのみマッチする。各マッチが 1 つ前のマッチの終端から始まっているようなマッチをテキスト中から列挙する場合に、このシーケンスは有効である。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.quoting_escape">
	<title>クォーティングエスケープ（<foreignphrase xml:lang="en">Quoting Escape</foreignphrase>）</title>
	<para>
	  エスケープシーケンス <phrase role="regex-pattern">\Q</phrase> は「クォートされたシーケンス」の開始を表す。以降、正規表現の終端か <phrase role="regex-pattern">\E</phrase> までの文字はすべて直値として扱われる。例えば、正規表現 <phrase role="regex-pattern">\Q\*+\Ea+</phrase> は以下のいずれかにマッチする。
	</para>
	<literallayout>\*+a
\*+aaa</literallayout>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.unicode_escapes">
	<title>Unicode エスケープ</title>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープ</th>
	      <th>意味</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\C</phrase></td>
	      <td>単一のコードポイントにマッチする。Boost.Regex では <phrase role="regex-pattern">.</phrase> 演算子とまったく同じ意味である。</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\X</phrase></td>
	      <td>結合文字シーケンス（非結合文字に 0 以上の結合文字シーケンスが続く）にマッチする。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.basic_extended.any_other_escape">
	<title>その他のエスケープ</title>
	<para>
	  その他のエスケープシーケンスは、エスケープ対象の文字そのものにマッチする。例えば <phrase role="regex-pattern">\@</phrase> は直値 <phrase role="regex-input">@</phrase> にマッチする。
	</para>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.operator_precedence">
      <title>演算子の優先順位</title>
      <para>
	演算子の優先順位は以下のとおりである。
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    照合関係の括弧記号 <phrase role="regex-pattern">[==]</phrase> <phrase role="regex-pattern">[::]</phrase> <phrase role="regex-pattern">[..]</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    エスケープ <phrase role="regex-pattern">\</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    文字集合（括弧式） <phrase role="regex-pattern">[]</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    グループ <phrase role="regex-pattern">()</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    単一文字の繰り返し <phrase role="regex-pattern">*</phrase> <phrase role="regex-pattern">+</phrase> <phrase role="regex-pattern">?</phrase> <phrase role="regex-pattern">{m,n}</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    結合
	  </para>
	</listitem>
	<listitem>
	  <para>
	    アンカー <phrase role="regex-pattern">^$</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    選択 <phrase role="regex-pattern">|</phrase>
	  </para>
	</listitem>
      </orderedlist>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.what_gets_matched">
      <title>マッチするもの</title>
      <para>
	正規表現のマッチに複数の、可能な「最良」マッチは最左最長の規則で得られるものである。
      </para>
    </sect4>
  </sect3>

  <sect3 xml:id="syntax.basic_extended.variations">
    <title>バリエーション</title>

    <sect4 xml:id="syntax.basic_extended.egrep">
      <title>egrep</title>
      <para>
	<link linkend="ref.syntax_option_type"><constant>egrep</constant> フラグ</link>を設定して正規表現をコンパイルすると、改行区切りの <link linkend="syntax.basic_extended.posix_extended_syntax">POSIX 拡張正規表現</link>のリストとして扱われ、リスト内にマッチする正規表現があればマッチとなる。例えば次のコードは、
      </para>
      <programlisting language="C++">boost::regex e("abc\ndef", boost::regex::egrep);</programlisting>
      <para>
	POSIX 基本正規表現の <phrase role="regex-pattern">abc</phrase> か <phrase role="regex-pattern">def</phrase> のいずれかにマッチする。
      </para>
      <para>
	名前が示すように、この動作は Unix ユーティリティの <command>egrep</command> および <command>grep</command> に <option>-E</option> オプションを付けて使用したものに合致する。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_extended.awk">
      <title>awk</title>
      <para>
	<link linkend="syntax.basic_extended.posix_extended_syntax">POSIX 拡張機能</link>に加えて、エスケープ文字が文字クラス宣言内で特殊となる。
      </para>
      <para>
	さらに、POSIX 拡張仕様が定義しないいくつかのエスケープシーケンスをサポートすることが要求される。Boost.Regex はこれらのエスケープシーケンスを既定でサポートする。
      </para>
    </sect4>
  </sect3>

  <sect3 xml:id="syntax.basic_extended.options">
    <title>オプション</title>
    <para>
      正規表現構築時に <constant>extended</constant> および <constant>egrep</constant> オプションとともに指定可能な<link linkend="ref.syntax_option_type.syntax_option_type_extended">フラグが多数ある</link>。特に <link linkend="ref.syntax_option_type.syntax_option_type_extended"><constant>collate</constant> 、<constant>no_subs</constant> 、<constant>icase</constant> オプション</link>が大文字小文字の区別やロカール依存の動作を変更するのに対し、<constant linkend="ref.syntax_option_type.syntax_option_type_extended">newline_alt</constant> オプションは構文を変更するという点に注意していただきたい。
    </para>
  </sect3>

  <sect3 xml:id="syntax.basic_extended.references">
    <title>参考</title>
    <para>
      <link xlink:href="http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap09.html">IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Base Definitions and Headers, Section 9, Regular Expressions</link>。
    </para>
    <para>
      <link xlink:href="http://www.opengroup.org/onlinepubs/000095399/utilities/grep.html">IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, Utilities, egrep</link>。
    </para>
    <para>
      <link xlink:href="http://www.opengroup.org/onlinepubs/000095399/utilities/awk.html">IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, Utilities, awk</link>。
    </para>
  </sect3>
</section>
