<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="captures">
  <title>マーク済み部分式と捕捉の理解</title>
  <para>
    捕捉とは、正規表現にマッチしたマーク済み部分式に「捕捉された」イテレータ範囲である。マーク済み部分式が複数回マッチした場合は、1 つのマーク済み部分式が複数の捕捉について対応する可能性がある。本文書では捕捉とマーク済み部分式の Boost.Regex での表現とアクセス方法について述べる。
  </para>

  <sect4 xml:id="captures.marked_sub_expressions">
    <title>マーク済み部分式</title>
    <para>
      Perl は括弧グループ <phrase role="regex-pattern">()</phrase> を含む正規表現について、マーク済み部分式という追加のフィールドを吐き出す。例えば次の正規表現にはマーク済み部分式が 2 つある（それぞれ $1 、$2 という）。
    </para>
    <literallayout>(\w+)\W+(\w+)</literallayout>
    <para>
      また、マッチ全体を $&amp; 、最初のマッチより前すべてを $`、マッチより後ろすべてを $' であらわす。よって <phrase role="regex-input">@abc def--</phrase> に対して上の式で検索をかけると次の結果を得る。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>部分式</th>
	  <th>検索されるテキスト</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-pattern">$`</phrase></td>
	  <td><phrase role="regex-input">@</phrase></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$&amp;</phrase></td>
	  <td><phrase role="regex-input">abc def</phrase></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$1</phrase></td>
	  <td><phrase role="regex-input">abc</phrase></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$2</phrase></td>
	  <td><phrase role="regex-input">def</phrase></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$'</phrase></td>
	  <td><phrase role="regex-input">--</phrase></td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      Boost.Regex ではこれらはすべて、正規表現マッチアルゴリズム（<function linkend="ref.regex_search">regex_search</function> 、<function linkend="ref.regex_match">regex_match</function> 、<classname linkend="ref.regex_iterator">regex_iterator</classname>）のいずれかを呼び出したときに値が埋められる <classname linkend="ref.match_results">match_results</classname> クラスによりアクセスできる。以下が与えられていたとすると、
    </para>
    <programlisting language="C++"><![CDATA[boost::match_results<IteratorType> m;]]></programlisting>
    <para>
      Perl と Boost.Regex の対応は次のようになる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>Perl</th>
	  <th>Boost.Regex</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-pattern">$`</phrase></td>
	  <td><code language="C++">m.prefix()</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$&amp;</phrase></td>
	  <td><code language="C++">m[0]</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$n</phrase></td>
	  <td><code language="C++">m[n]</code></td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">$'</phrase></td>
	  <td><code language="C++">m.suffix()</code></td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      Boost.Regex では各部分式マッチは <classname linkend="ref.sub_match">sub_match</classname> オブジェクトで表現される。これは基本的には部分式がマッチした位置の先頭と終端を指すイテレータの組に過ぎないが、<classname linkend="ref.sub_match">sub_match</classname> オブジェクトが <classname>std::basic_string</classname> に類似した振る舞いをするように、演算子がいくつか追加されている。例えば <classname>basic_string</classname> への暗黙の型変換により、文字列との比較、文字列への追加、および出力ストリームへの出力が可能になっている。
    </para>
  </sect4>

  <sect4 xml:id="captures.unmatched_sub_expressions">
    <title>マッチしなかった部分式</title>
    <para>
      マッチが見つかったとして、すべてのマーク済み部分式が関与する必要のない場合がある。例えば、
    </para>
    <literallayout>(abc)|(def)</literallayout>
    <para>
      この式は $1 か $2 のいずれかがマッチする可能性があるが、両方とも同時にマッチすることはない。Boost.Regex では <property>sub_match::matched</property> データメンバにアクセスすることでマッチしたかどうか調べることができる。
    </para>
  </sect4>

  <sect4 xml:id="captures.repeated_captures">
    <title>捕捉の繰り返し</title>
    <para>
      マーク済み部分式が繰り返されている場合、その部分式は複数回「捕捉される」。しかし通常利用可能なのは最後の捕捉のみである。例えば、
    </para>
    <literallayout>(?:(\w+)\W+)+</literallayout>
    <para>
      この式は以下にマッチした場合、
    </para>
    <literallayout>one fine day</literallayout>
    <para>
      $1 には文字列 “day” が格納され、それ以前の捕捉はすべて捨てられる。
    </para>
    <para>
      しかしながら Boost.Regex の実験的な機能を使用すれば捕捉情報をすべて記憶しておくことが可能である。これにアクセスするには <methodname>match_results::captures</methodname> メンバ関数か <methodname>sub_match::captures</methodname> メンバ関数を使う。これらの関数は、正規表現マッチの間に記憶した捕捉をすべて含んだコンテナを返す。以下のサンプルプログラムでこの情報の使用方法を説明する。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>
#include <iostream>

void print_captures(const std::string& regx, const std::string& text)
{
   boost::regex e(regx);
   boost::smatch what;
   std::cout << "正規表現：\"" << regx << "\"\n";
   std::cout << "テキスト：\"" << text << "\"\n";
   if(boost::regex_match(text, what, e, boost::match_extra))
   {
      unsigned i, j;
      std::cout << "** マッチが見つかりました **\n 部分式：\n";
      for(i = 0; i < what.size(); ++i)
         std::cout << " $" << i << " = \"" << what[i] << "\"\n";
      std::cout << " 捕捉：\n";
      for(i = 0; i < what.size(); ++i)
      {
         std::cout << " $" << i << " = {";
         for(j = 0; j < what.captures(i).size(); ++j)
         {
            if(j)
               std::cout << ", ";
            else
               std::cout << " ";
            std::cout << "\"" << what.captures(i)[j] << "\"";
         }
         std::cout << " }\n";
      }
   }
   else
   {
      std::cout << "** マッチは見つかりません **\n";
   }
}

int main(int , char* [])
{
   print_captures("(([[:lower:]]+)|([[:upper:]]+))+", "aBBcccDDDDDeeeeeeee");
   print_captures("(.*)bar|(.*)bah", "abcbar");
   print_captures("(.*)bar|(.*)bah", "abcbah");
   print_captures("^(?:(\\w+)|(?>\\W+))*$",
      "now is the time for all good men to come to the aid of the party");
   return 0;
}]]></programlisting>
    <para>
      このプログラムの出力は次のようになる。
    </para>
    <screen><![CDATA[正規表現："(([[:lower:]]+)|([[:upper:]]+))+"
テキスト："aBBcccDDDDDeeeeeeee"
** マッチが見つかりました **
   部分式：
      $0 = "aBBcccDDDDDeeeeeeee"
      $1 = "eeeeeeee"
      $2 = "eeeeeeee"
      $3 = "DDDDD"
   捕捉：
      $0 = { "aBBcccDDDDDeeeeeeee" }
      $1 = { "a", "BB", "ccc", "DDDDD", "eeeeeeee" }
      $2 = { "a", "ccc", "eeeeeeee" }
      $3 = { "BB", "DDDDD" }
正規表現："(.*)bar|(.*)bah"
テキスト："abcbar"
** マッチが見つかりました **
   部分式：
      $0 = "abcbar"
      $1 = "abc"
      $2 = ""
   捕捉：
      $0 = { "abcbar" }
      $1 = { "abc" }
      $2 = { }
正規表現："(.*)bar|(.*)bah"
テキスト："abcbah"
** マッチが見つかりました **
   部分式：
      $0 = "abcbah"
      $1 = ""
      $2 = "abc"
   捕捉：
      $0 = { "abcbah" }
      $1 = { }
      $2 = { "abc" }
正規表現："^(?:(\w+)|(?>\W+))*$"
テキスト："now is the time for all good men to come to the aid of the party"
** マッチが見つかりました **
   部分式：
      $0 = "now is the time for all good men to come to the aid of the party"
      $1 = "party"
   捕捉：
      $0 = { "now is the time for all good men to come to the aid of the party" }
      $1 = { "now", "is", "the", "time", "for", "all", "good", "men", "to",
         "come", "to", "the", "aid", "of", "the", "party" }]]></screen>
    <para>
      残念ながらこの機能を有効にすると（実際に使用しない場合でも）効率に影響が出る上、使用した場合はさらに効率が悪化するため、以下の 2 つを行わないと使用できないようになっている。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  ライブラリのソースコードをインクルードするすべての翻訳単位で <symbol>BOOST_REGEX_MATCH_EXTRA</symbol> を定義する（<filename class="headerfile">boost/regex/user.hpp</filename> にシンボルの定義部分があるので、このコメントを解除するのが最もよい）。
	</para>
      </listitem>
      <listitem>
	<para>
	  実際に捕捉情報が必要な個々のアルゴリズムで <constant>match_extra</constant> フラグを渡す（<function>regex_search</function> 、<function>regex_match</function> 、<classname>regex_iterator</classname>）。
	</para>
      </listitem>
    </itemizedlist>
  </sect4>
</section>
