<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.mfc_strings">
  <title>MFC 文字列とともに Boost.Regex を使用する</title>

  <section xml:id="ref.mfc_strings.intro">
    <title>はじめに</title>
    <para>
      ヘッダ <filename class="headerfile">&lt;boost/regex/mfc.hpp&gt;</filename> に、MFC 文字列型に対する Boost.Regex のサポートがある。この機能には、MFC および ATL のすべての文字列型が <classname>CSimpleStringT</classname> テンプレートクラスに基づいている Visual Studio .NET（Visual C++ 7）以降が必要であることに注意していただきたい。
    </para>
    <para>
      以下の説明では、<classname>CSimpleStringT&lt;charT&gt;</classname> の箇所は次の MFC/ATL の型に置き換えて読んでかまわない（すべて <classname>CSimpleStringT&lt;charT&gt;</classname> を継承している）。
    </para>
    <itemizedlist>
      <listitem>
	<para><classname>CString</classname></para>
      </listitem>
      <listitem>
	<para><classname>CStringA</classname></para>
      </listitem>
      <listitem>
	<para><classname>CStringW</classname></para>
      </listitem>
      <listitem>
	<para><classname>CAtlString</classname></para>
      </listitem>
      <listitem>
	<para><classname>CAtlStringA</classname></para>
      </listitem>
      <listitem>
	<para><classname>CAtlStringW</classname></para>
      </listitem>
      <listitem>
	<para><classname><![CDATA[CStringT<charT,traits>]]></classname></para>
      </listitem>
      <listitem>
	<para><classname><![CDATA[CFixedStringT<charT,N>]]></classname></para>
      </listitem>
      <listitem>
	<para><classname><![CDATA[CSimpleStringT<charT>]]></classname></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="ref.mfc_strings.unicode_types">
    <title>MFC 文字列で使用する Boost.Regex の型</title>
    <para>
      <type>TCHAR</type> を使用するのに便利なように、以下の typedef を提供している。
    </para>
    <programlisting language="C++"><![CDATA[typedef basic_regex<TCHAR>                  tregex;
typedef match_results<TCHAR const*>         tmatch;
typedef regex_iterator<TCHAR const*>        tregex_iterator;
typedef regex_token_iterator<TCHAR const*>  tregex_token_iterator;]]></programlisting>
    <para>
      <type>TCHAR</type> ではなく、ナロー文字かワイド文字を明示的に使用する場合は、通常の Boost.Regex 型である <type>regex</type> か <type>wregex</type> を使用するとよい。
    </para>
  </section>

  <section xml:id="ref.non_std_strings.mfc_strings.mfc_regex_create">
    <title>MFC 文字列からの正規表現の作成</title>
    <para>
      以下のヘルパ関数は MFC/ATL 文字列型からの正規表現作成を補助する。
    </para>
    <funcsynopsis language="C++">
      <funcsynopsisinfo><![CDATA[template <class charT>]]></funcsynopsisinfo>
      <funcprototype>
	<?dbhtml funcsynopsis-style="ansi"?>
	<funcdef>basic_regex&lt;charT&gt; <function>make_regex</function></funcdef>
	<paramdef>
	  <type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
	  <parameter>s</parameter>
	</paramdef>
	<paramdef>
	  <type>::boost::regex_constants::syntax_option_type</type>
	  <parameter>f</parameter>
	  <initializer>boost::regex_constants::normal</initializer>
	</paramdef>
      </funcprototype>
    </funcsynopsis>
    <variablelist spacing="compact">
      <varlistentry>
	<term>効果：</term>
	<listitem>
	  <para>
	    <code language="C++"><![CDATA[basic_regex<charT>(s.GetString(), s.GetString() + s.GetLength(), f);]]></code> を返す。
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo">
    <title>MFC 文字列型に対するアルゴリズムの多重定義</title>
    <para>
      <classname>std::basic_string</classname> 引数についてのアルゴリズムの各多重定義に対して、MFC/ATL 文字列型についての多重定義がある。これらのアルゴリズムのすべてのシグニチャは実際よりもかなり複雑に見えるが、完全性のためにここではすべて記述する。
    </para>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo.regex_match">
      <title>regex_match</title>
      <para>
	2 つの多重定義がある。1 番目のものは何がマッチしたかを <classname>match_results</classname> 構造体で返し、2 番目は何も返さない。
      </para>
      <para>
	<function linkend="ref.regex_match">regex_match</function> についての注意がすべてこの関数にも適用されるが、特にこのアルゴリズムは入力テキスト全体の式に対するマッチが成功したかだけを返す。この動作が希望のものでない場合は <function linkend="ref.regex_search">regex_search</function> を代わりに使用するとよい。
      </para>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT, class T, class A>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>bool <function>regex_match</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[match_results<const B*, A>&]]></type>
		<parameter>what</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_string<charT, T>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">::boost::regex_match(s.GetString(), s.GetString() + s.GetLength(), what, e, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<programlisting language="C++"><![CDATA[//
// CString のパスからファイル名部分を抜き出し、
// 結果を CString で返す：
//
CString get_filename(const CString& path)
{
   boost::tregex r(__T("(?:\\A|.*\\\\)([^\\\\]+)"));
   boost::tmatch what;
   if(boost::regex_match(path, what, r))
   {
      // $1 を CString として抽出する：
      return CString(what[1].first, what.length(1));
   }
   else
   {
      throw std::runtime_error("パス名が不正");
   }
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo.regex_match__second_overload_">
      <title>regex_match （第二の多重定義）</title>
      <orderedlist continuation="continues">
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT, class T>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>bool <function>regex_match</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_string<B, T>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">::boost::regex_match(s.GetString(), s.GetString() + s.GetLength(), e, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<programlisting language="C++"><![CDATA[//
// password が正規表現 requirements で
// 定義したパスワードの要件を満たしているか調べる。
//
bool is_valid_password(const CString& password, const CString& requirements)
{
   return boost::regex_match(password, boost::make_regex(requirements));
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo.regex_search">
      <title>regex_search</title>
      <para>
	<function linkend="ref.regex_search">regex_search</function> については多重定義を 2 つ追加する。1 番目のものは何がマッチしたかを返し、2 番目は何も返さない。
      </para>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT, class A, class T>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>bool <function>regex_search</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[match_results<const charT*, A>&]]></type>
		<parameter>what</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_string<charT, T>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">::boost::regex_search(s.GetString(), s.GetString() + s.GetLength(), what, e, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<para>
		  住所の文字列から郵便番号を抜き出す。
		</para>
		<programlisting language="C++"><![CDATA[CString extract_postcode(const CString& address)
{
   // 投函住所から英国郵便番号を検索し、結果を返す。
   // 正規表現は www.regxlib.com の Phil A. のものを用いた：
   boost::tregex r(__T("^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\\s?([0-9][A-Z]{2})$"));
   boost::tmatch what;
   if(boost::regex_search(address, what, r))
   {
      // $0 を CString として抽出する：
      return CString(what[0].first, what.length());
   }
   else
   {
      throw std::runtime_error("郵便番号は見つかりません");
   }
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo.regex_search__second_overload_">
      <title>regex_search （第二の多重定義）</title>
      <orderedlist continuation="continues">
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT, class T>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>inline bool <function>regex_search</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_string<charT, T>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">::boost::regex_search(s.GetString(), s.GetString() + s.GetLength(), e, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_algo.regex_replace">
      <title>regex_replace</title>
      <para>
	<function linkend="ref.regex_replace">regex_replace</function> については多重定義を 2 つ追加する。1 番目のものは出力イテレータに出力を送り、2 番目は何も出力しない。
      </para>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class OutputIterator, class BidirectionalIterator, class traits, class charT>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>OutputIterator <function>regex_replace</function></funcdef>
	      <paramdef>
		<type>OutputIterator</type>
		<parameter>out</parameter>
	      </paramdef>
	      <paramdef>
		<type>BidirectionalIterator</type>
		<parameter>first</parameter>
	      </paramdef>
	      <paramdef>
		<type>BidirectionalIterator</type>
		<parameter>last</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT, traits>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>fmt</parameter>
	      </paramdef>
	      <paramdef>
		<type>match_flag_type</type>
		<parameter>flags</parameter>
		<initializer>match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">::boost::regex_replace(out, first, last, e, fmt.GetString(), flags);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class traits, class charT>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>ATL::CSimpleStringT&lt;charT&gt; <function>regex_replace</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT, traits>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>fmt</parameter>
	      </paramdef>
	      <paramdef>
		<type>match_flag_type</type>
		<parameter>flags</parameter>
		<initializer>match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <function linkend="ref.regex_replace">regex_replace</function> 、および文字列 <parameter>s</parameter> と同じメモリマネージャを使って新文字列を作成し、返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<programlisting language="C++"><![CDATA[//
// クレジットカード番号を（数字を含んだ）文字列で受け取り、
// 4 桁ずつ "-" で区切った可読性の高い形式に
// 再書式化する：
//
const boost::tregex e(__T("\\A(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})\\z"));
const CString human_format = __T("$1-$2-$3-$4");

CString human_readable_card_number(const CString& s)
{
   return boost::regex_replace(s, e, human_format);
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="ref.non_std_strings.mfc_strings.mfc_iter">
    <title>MFC 文字列に対するマッチの反復</title>
    <para>
      MFC/ATL 文字列を <classname linkend="ref.regex_iterator">regex_iterator</classname> および <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> に簡単に変換できるように、以下のヘルパ関数を提供する。
    </para>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_iter.regex_iterator_creation_helper">
      <title>regex_iterator 作成ヘルパ</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>regex_iterator&lt;charT const*&gt; <function>make_regex_iterator</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>::boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">regex_iterator(s.GetString(), s.GetString() + s.GetLength(), e, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<programlisting language="C++"><![CDATA[void enumerate_links(const CString& html)
{
   // HTML テキスト中のリンクをすべて列挙、印字する。
   // 正規表現は www.regxlib.com の Andrew Lee のものを用いた：
   boost::tregex r(
      __T("href=[\"\']((http:\\/\\/|\\.\\/|\\/)?\\w+"
          "(\\.\\w+)*(\\/\\w+(\\.\\w+)?)*"
          "(\\/|\\?\\w*=\\w*(&\\w*=\\w*)*)?)[\"\']"));
   boost::tregex_iterator i(boost::make_regex_iterator(html, r)), j;
   while(i != j)
   {
      std::cout << (*i)[1] << std::endl;
      ++i;
   }
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="ref.non_std_strings.mfc_strings.mfc_iter.regex_token_iterator_creation_helpers">
      <title>regex_token_iterator 作成ヘルパ</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>regex_token_iterator&lt;charT const*&gt; <function>make_regex_token_iterator</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>int</type>
		<parameter>sub</parameter>
		<initializer>0</initializer>
	      </paramdef>
	      <paramdef>
		<type>::boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">regex_token_iterator(s.GetString(), s.GetString() + s.GetLength(), e, sub, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>regex_token_iterator&lt;charT const*&gt; <function>make_regex_token_iterator</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const std::vector<int>&]]></type>
		<parameter>subs</parameter>
	      </paramdef>
	      <paramdef>
		<type>::boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">regex_token_iterator(s.GetString(), s.GetString() + s.GetLength(), e, subs, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo><![CDATA[template <class charT, std::size_t N>]]></funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>regex_token_iterator&lt;charT const*&gt; <function>make_regex_token_iterator</function></funcdef>
	      <paramdef>
		<type><![CDATA[const ATL::CSimpleStringT<charT>&]]></type>
		<parameter>s</parameter>
	      </paramdef>
	      <paramdef>
		<type><![CDATA[const basic_regex<charT>&]]></type>
		<parameter>e</parameter>
	      </paramdef>
	      <paramdef>
		<type>const int</type>
		<parameter>(&amp; subs)[N]</parameter>
	      </paramdef>
	      <paramdef>
		<type>::boost::regex_constants::match_flag_type</type>
		<parameter>f</parameter>
		<initializer>boost::regex_constants::match_default</initializer>
	      </paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <code language="C++">regex_token_iterator(s.GetString(), s.GetString() + s.GetLength(), e, subs, f);</code> を返す。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>使用例：</term>
	      <listitem>
		<programlisting language="C++"><![CDATA[void enumerate_links2(const CString& html)
{
   // HTML テキスト中のリンクをすべて列挙、印字する。
   // 正規表現は www.regxlib.com の Andrew Lee のものを用いた：
   boost::tregex r(
         __T("href=[\"\']((http:\\/\\/|\\.\\/|\\/)?\\w+"
             "(\\.\\w+)*(\\/\\w+(\\.\\w+)?)*"
             "(\\/|\\?\\w*=\\w*(&\\w*=\\w*)*)?)[\"\']"));
             boost::tregex_token_iterator i(boost::make_regex_token_iterator(html, r, 1)), j;
   while(i != j)
   {
      std::cout << *i << std::endl;
      ++i;
   }
}]]></programlisting>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>
</section>
