<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="background_information.locale">
  <title>地域化</title>
  <para>
    Boost.Regex は実行時の地域化について広範のサポートを提供する。この地域化モデルは、フロントエンドとバックエンドの2つの部分に分けられる。
  </para>
  <para>
    フロントエンドの地域化は、エラーメッセージや正規表現構文そのものといったユーザが実際に触れるすべてのものに深く関わる。例えばフランス語のアプリケーションは <phrase role="regex-pattern">[[:word:]]</phrase> を <phrase role="regex-pattern">[[:mot:]]</phrase> に、<phrase role="regex-pattern">\w</phrase> を <phrase role="regex-pattern">\m</phrase> に変更できる。フロントエンドのロカールを変更するには、地域化済み文字列を含んだメッセージカタログを開発者が提供しなければならない。フロントエンドのロカールは <symbol>LC_MESSAGES</symbol> カテゴリのみの影響を受ける。
  </para>
  <para>
    バックエンドの地域化は、正規表現を解析した後に起こるすべてのこと、言い換えるとユーザが直接触れないすべてのものに深く関わる。大文字小文字の変換、照合、文字クラスのメンバーシップがそうである。バックエンドのロカールは開発者の介在を要求しない。ライブラリは現在のロカールについて必要なすべての情報を、オペレーティングシステムや実行時ライブラリから得る。これは例えば正規表現が C++ プログラムに組み込まれている場合など、プログラムのユーザが正規表現に直接触れない場合、ライブラリがすべてを取り計らうので明示的な地域化は不要ということを意味する。例えばコードに組み込まれた正規表現 <phrase role="regex-pattern">[[:word:]]+</phrase> は常に単語全体にマッチし、プログラムが例えばギリシャ語ロカールのマシンで走っている場合は、ラテン文字ではなくギリシャ文字の単語全体にマッチする。バックエンドのロカールは <symbol>LC_TYPE</symbol> および <symbol>LC_COLLATE</symbol> カテゴリの影響を受ける。
  </para>
  <para>
    個別の地域化の機構が 3 つ、Boost.Regex によりサポートされている。
  </para>

  <sect4 xml:id="background_information.locale.win32_localization_model">
    <title>Win32 地域化モデル</title>
    <para>
      ライブラリを Win32 のもとでコンパイルした場合の既定で、特性クラス <classname>w32_regex_traits</classname> によりカプセル化される。このモデルを使用する場合、<classname linkend="ref.basic_regex">basic_regex</classname> オブジェクトは各自で LCID を保持する。既定ではこれは <function>GetUserDefaultLCID</function> が返すユーザ既定の設定だが、必要な場合は <classname>basic_regex</classname> オブジェクトの <methodname>imbue</methodname> を呼び出して他の LCID を設定することも可能である。Boost.Regex が使用する設定はすべて C 実行時ライブラリ経由で直接オペレーティングシステムから得る。フロントエンドの地域化では、ユーザ定義文字列の入ったストリングテーブルを含むリソース DLL が必要である。特性クラスは関数
    </para>
    <programlisting language="C++">static std::string set_message_catalogue(const std::string&amp; s);</programlisting>
    <para>
      をエクスポートし、あらゆる正規表現をコンパイルする前（<classname>basic_regex</classname> インスタンスを構築する前である必要はない）にリソース DLL の名前を識別する文字列とともに呼び出す必要がある。
    </para>
    <programlisting language="C++"><![CDATA[boost::w32_regex_traits<char>::set_message_catalogue("mydll.dll");]]></programlisting>
    <para>
      NT のもとではライブラリは Unicode を完全にサポートする。9x においては限定的であり、0 から 255 までの文字はサポートするが残りは「不明な」図形文字として扱う。
    </para>
  </sect4>

  <sect4 xml:id="background_information.locale.c_localization_model">
    <title>C 地域化モデル</title>
    <para>
      C++ ロカールがあるので、C++ ロカールをサポートする非 Win32 コンパイラではこのモデルは非推奨である。このロカールは特性クラス <classname>c_regex_traits</classname> によりカプセル化され、Win32 ユーザはプリプロセッサシンボル <symbol>BOOST_REGEX_USE_C_LOCALE</symbol> を定義してこのモデルを有効化できる。このモデルが有効な場合、<function>setlocale</function> で設定可能な大域ロカールが 1 つだけ存在することになる。すべての設定は実行時ライブラリから得るため、したがって Unicode サポートは実行時ライブラリの実装による。
    </para>
    <para>
      フロントエンドの地域化はサポートしない。
    </para>
    <para>
      <function>setlocale</function> を呼び出すとコンパイル済みの正規表現がすべて無効になることに注意していただきたい。<code language="C++">setlocale(LC_ALL, "C")</code> を呼び出すと、このライブラリの動作は大部分の旧式の正規表現ライブラリ（本ライブラリのバージョン 1 含む）と同じになる。
    </para>
  </sect4>

  <sect4 xml:id="background_information.locale.c_localization_model0">
    <title>C++ 地域化モデル</title>
    <para>
      Windows 以外のコンパイラではこのモデルが既定である。
    </para>
    <para>
      このモデルが有効な場合、<classname linkend="ref.basic_regex">basic_regex</classname> の各インスタンスは自身の <classname>std::locale</classname> を持つ。また、<classname linkend="ref.basic_regex">basic_regex</classname> クラスは正規表現のインスタンスごとにロカールを設定するメンバ関数 <methodname>imbue</methodname> を持つ。フロントエンドの地域化には POSIX メッセージカタログが必要であり、正規表現が使用するロカールの <classname>std::messages</classname> ファセットにより読み込まれる。特性クラスは次のシンボルをエクスポートし、
    </para>
    <programlisting language="C++">static std::string set_message_catalogue(const std::string&amp; s);</programlisting>
    <para>
      メッセージカタログの名前を識別する文字列を使って、あらゆる正規表現をコンパイルする前に呼び出す必要がある（が、<classname>basic_regex</classname> インスタンスを構築する前である必要はない）。
    </para>
    <programlisting language="C++"><![CDATA[boost::cpp_regex_traits<char>::set_message_catalogue("mycatalogue");]]></programlisting>
    <para>
      <methodname><![CDATA[basic_regex<>::imbue]]></methodname> を呼び出すと、その <classname linkend="ref.basic_regex">basic_regex</classname> インスタンスの正規表現が無効になることに注意していただきたい。
    </para>
    <para>
      ライブラリを既定以外の地域化モデルでビルドした場合、サポートライブラリをビルドするときと、<filename class="headerfile">&lt;boost/regex.hpp&gt;</filename> か <filename class="headerfile">&lt;boost/cregex.hpp&gt;</filename> をインクルードするときの両方で、適切なプリプロセッサシンボル（<symbol>BOOST_REGEX_USE_C_LOCALE</symbol> か <symbol>BOOST_REGEX_USE_CPP_LOCALE</symbol>）を定義しなければならない。この場合は<filename class="headerfile">&lt;boost/regex/user.hpp&gt;</filename> に <code language="C++">#define</code> を追加するのが最適である。
    </para>
  </sect4>

  <sect4 xml:id="background_information.locale.providing_a_message_catalogue">
    <title>メッセージカタログの提供</title>
    <para>
      ライブラリのフロントエンドを地域化するためには、リソース DLL のストリングテーブル（Win32 モデル）か POSIX メッセージカタログ（C++ モデル）に適切なメッセージ文字列を含めたライブラリを提供する必要がある。後者の場合、カタログのメッセージセット 0 にメッセージを入れておかなければならない。メッセージとその ID は以下のとおりである。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>メッセージ ID</th>
	  <th>意味</th>
	  <th>既定値</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>101</td>
	  <td>部分式の開始に使用する文字。</td>
	  <td><literal>"("</literal></td>
	</tr>
	<tr>
	  <td>102</td>
	  <td>部分式の終了宣言に使用する文字。</td>
	  <td><literal>")"</literal></td>
	</tr>
	<tr>
	  <td>103</td>
	  <td>行末表明の表現に使用する文字。</td>
	  <td><literal>"$"</literal></td>
	</tr>
	<tr>
	  <td>104</td>
	  <td>行頭表明の表現に使用する文字。</td>
	  <td><literal>"^"</literal></td>
	</tr>
	<tr>
	  <td>105</td>
	  <td>「あらゆる文字にマッチする正規表現」の表現に使用する文字。</td>
	  <td><literal>"."</literal></td>
	</tr>
	<tr>
	  <td>106</td>
	  <td>0 回以上の繰り返しにマッチする演算子。</td>
	  <td><literal>"*"</literal></td>
	</tr>
	<tr>
	  <td>107</td>
	  <td>1 回以上の繰り返しにマッチする演算子。</td>
	  <td><literal>"+"</literal></td>
	</tr>
	<tr>
	  <td>108</td>
	  <td>0 回か 1 回の繰り返しにマッチする演算子。</td>
	  <td><literal>"?"</literal></td>
	</tr>
	<tr>
	  <td>109</td>
	  <td>文字集合開始文字。</td>
	  <td><literal>"["</literal></td>
	</tr>
	<tr>
	  <td>110</td>
	  <td>文字集合終了文字。</td>
	  <td><literal>"]"</literal></td>
	</tr>
	<tr>
	  <td>111</td>
	  <td>選択演算子。</td>
	  <td><literal>"|"</literal></td>
	</tr>
	<tr>
	  <td>112</td>
	  <td>エスケープ文字。</td>
	  <td><literal>"\"</literal></td>
	</tr>
	<tr>
	  <td>113</td>
	  <td>ハッシュ文字。</td>
	  <td><literal>"#"</literal></td>
	</tr>
	<tr>
	  <td>114</td>
	  <td>範囲演算子。</td>
	  <td><literal>"-"</literal></td>
	</tr>
	<tr>
	  <td>115</td>
	  <td>繰り返し演算子開始文字。</td>
	  <td><literal>"{"</literal></td>
	</tr>
	<tr>
	  <td>116</td>
	  <td>繰り返し演算子終了文字。</td>
	  <td><literal>"}"</literal></td>
	</tr>
	<tr>
	  <td>117</td>
	  <td>数字。</td>
	  <td><literal>"0123456789"</literal></td>
	</tr>
	<tr>
	  <td>118</td>
	  <td>エスケープ文字の直後に置いて単語境界表明を表現する文字。</td>
	  <td><literal>"b"</literal></td>
	</tr>
	<tr>
	  <td>119</td>
	  <td>エスケープ文字の直後に置いて非単語境界表明を表現する文字。</td>
	  <td><literal>"B"</literal></td>
	</tr>
	<tr>
	  <td>120</td>
	  <td>エスケープ文字の直後に置いて単語先頭表明を表現する文字。</td>
	  <td><literal>"&lt;"</literal></td>
	</tr>
	<tr>
	  <td>121</td>
	  <td>エスケープ文字の直後に置いて単語終端表明を表現する文字。</td>
	  <td><literal>"&gt;"</literal></td>
	</tr>
	<tr>
	  <td>122</td>
	  <td>エスケープ文字の直後に置いて単語構成文字を表現する文字。</td>
	  <td><literal>"w"</literal></td>
	</tr>
	<tr>
	  <td>123</td>
	  <td>エスケープ文字の直後に置いて非単語構成文字を表現する文字。</td>
	  <td><literal>"W"</literal></td>
	</tr>
	<tr>
	  <td>124</td>
	  <td>エスケープ文字の直後に置いてバッファ先端表明を表現する文字。</td>
	  <td><literal>"`A"</literal></td>
	</tr>
	<tr>
	  <td>125</td>
	  <td>エスケープ文字の直後に置いてバッファ終端表明を表現する文字。</td>
	  <td><literal>"'z"</literal></td>
	</tr>
	<tr>
	  <td>126</td>
	  <td>改行文字。</td>
	  <td><literal>"\n"</literal></td>
	</tr>
	<tr>
	  <td>127</td>
	  <td>カンマ演算子。</td>
	  <td><literal>","</literal></td>
	</tr>
	<tr>
	  <td>128</td>
	  <td>エスケープ文字の直後に置いてベル文字を表現する文字。</td>
	  <td><literal>"a"</literal></td>
	</tr>
	<tr>
	  <td>129</td>
	  <td>エスケープ文字の直後に置いてフォームフィード文字を表現する文字。</td>
	  <td><literal>"f"</literal></td>
	</tr>
	<tr>
	  <td>130</td>
	  <td>エスケープ文字の直後に置いて改行文字を表現する文字。</td>
	  <td><literal>"n"</literal></td>
	</tr>
	<tr>
	  <td>131</td>
	  <td>エスケープ文字の直後に置いて復改文字を表現する文字。</td>
	  <td><literal>"r"</literal></td>
	</tr>
	<tr>
	  <td>132</td>
	  <td>エスケープ文字の直後に置いてタブ文字を表現する文字。</td>
	  <td><literal>"t"</literal></td>
	</tr>
	<tr>
	  <td>133</td>
	  <td>エスケープ文字の直後に置いて垂直タブ文字を表現する文字。</td>
	  <td><literal>"v"</literal></td>
	</tr>
	<tr>
	  <td>134</td>
	  <td>エスケープ文字の直後に置いて 16 進定数を表現する文字。</td>
	  <td><literal>"x"</literal></td>
	</tr>
	<tr>
	  <td>135</td>
	  <td>エスケープ文字の直後に置いて ASCII エスケープ文字の開始を表現する文字。</td>
	  <td><literal>"c"</literal></td>
	</tr>
	<tr>
	  <td>136</td>
	  <td>コロン文字。</td>
	  <td><literal>":"</literal></td>
	</tr>
	<tr>
	  <td>137</td>
	  <td>イコール文字。</td>
	  <td><literal>"="</literal></td>
	</tr>
	<tr>
	  <td>138</td>
	  <td>エスケープ文字の直後に置いて ASCII エスケープ文字を表現する文字。</td>
	  <td><literal>"e"</literal></td>
	</tr>
	<tr>
	  <td>139</td>
	  <td>エスケープ文字の直後に置いて小文字を表現する文字。</td>
	  <td><literal>"l"</literal></td>
	</tr>
	<tr>
	  <td>140</td>
	  <td>エスケープ文字の直後に置いて非小文字を表現する文字。</td>
	  <td><literal>"L"</literal></td>
	</tr>
	<tr>
	  <td>141</td>
	  <td>エスケープ文字の直後に置いて大文字を表現する文字。</td>
	  <td><literal>"u"</literal></td>
	</tr>
	<tr>
	  <td>142</td>
	  <td>エスケープ文字の直後に置いて非大文字を表現する文字。</td>
	  <td><literal>"U"</literal></td>
	</tr>
	<tr>
	  <td>143</td>
	  <td>エスケープ文字の直後に置いて空白類文字を表現する文字。</td>
	  <td><literal>"s"</literal></td>
	</tr>
	<tr>
	  <td>144</td>
	  <td>エスケープ文字の直後に置いて非空白類文字を表現する文字。</td>
	  <td><literal>"S"</literal></td>
	</tr>
	<tr>
	  <td>145</td>
	  <td>エスケープ文字の直後に置いて 10 進数字を表現する文字。</td>
	  <td><literal>"d"</literal></td>
	</tr>
	<tr>
	  <td>146</td>
	  <td>エスケープ文字の直後に置いて非 10 進数字を表現する文字。</td>
	  <td><literal>"D"</literal></td>
	</tr>
	<tr>
	  <td>147</td>
	  <td>エスケープ文字の直後に置いて引用終了演算子を表現する文字。</td>
	  <td><literal>"E"</literal></td>
	</tr>
	<tr>
	  <td>148</td>
	  <td>エスケープ文字の直後に置いて引用開始演算子を表現する文字。</td>
	  <td><literal>"Q"</literal></td>
	</tr>
	<tr>
	  <td>149</td>
	  <td>エスケープ文字の直後に置いて Unicode 結合文字シーケンスを表現する文字。</td>
	  <td><literal>"X"</literal></td>
	</tr>
	<tr>
	  <td>150</td>
	  <td>エスケープ文字の直後に置いて単一文字を表現する文字。</td>
	  <td><literal>"C"</literal></td>
	</tr>
	<tr>
	  <td>151</td>
	  <td>エスケープ文字の直後に置いてバッファ終端演算子を表現する文字。</td>
	  <td><literal>"Z"</literal></td>
	</tr>
	<tr>
	  <td>152</td>
	  <td>エスケープ文字の直後に置いて継続表明を表現する文字。</td>
	  <td><literal>"G"</literal></td>
	</tr>
	<tr>
	  <td>153</td>
	  <td><phrase role="regex-pattern">(?</phrase> の直後に置いてゼロ幅否定前方先読み表明を表現する文字。</td>
	  <td><literal>"!"</literal></td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      カスタムのエラーメッセージは以下のように読み込まれる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>メッセージ ID</th>
	  <th>エラーメッセージ ID</th>
	  <th>既定の文字列</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>201</td>
	  <td><constant>REG_NOMATCH</constant></td>
	  <td><literal>"No match"</literal></td>
	</tr>
	<tr>
	  <td>202</td>
	  <td><constant>REG_BADPAT</constant></td>
	  <td><literal>"Invalid regular expression"</literal></td>
	</tr>
	<tr>
	  <td>203</td>
	  <td><constant>REG_ECOLLATE</constant></td>
	  <td><literal>"Invalid collation character"</literal></td>
	</tr>
	<tr>
	  <td>204</td>
	  <td><constant>REG_ECTYPE</constant></td>
	  <td><literal>"Invalid character class name"</literal></td>
	</tr>
	<tr>
	  <td>205</td>
	  <td><constant>REG_EESCAPE</constant></td>
	  <td><literal>"Trailing backslash"</literal></td>
	</tr>
	<tr>
	  <td>206</td>
	  <td><constant>REG_ESUBREG</constant></td>
	  <td><literal>"Invalid back reference"</literal></td>
	</tr>
	<tr>
	  <td>207</td>
	  <td><constant>REG_EBRACK</constant></td>
	  <td><literal>"Unmatched [ or [^"</literal></td>
	</tr>
	<tr>
	  <td>208</td>
	  <td><constant>REG_EPAREN</constant></td>
	  <td><literal>"Unmatched ( or \("</literal></td>
	</tr>
	<tr>
	  <td>209</td>
	  <td><constant>REG_EBRACE</constant></td>
	  <td><literal>"Unmatched \{"</literal></td>
	</tr>
	<tr>
	  <td>210</td>
	  <td><constant>REG_BADBR</constant></td>
	  <td><literal>"Invalid content of \{\}"</literal></td>
	</tr>
	<tr>
	  <td>211</td>
	  <td><constant>REG_ERANGE</constant></td>
	  <td><literal>"Invalid range end"</literal></td>
	</tr>
	<tr>
	  <td>212</td>
	  <td><constant>REG_ESPACE</constant></td>
	  <td><literal>"Memory exhausted"</literal></td>
	</tr>
	<tr>
	  <td>213</td>
	  <td><constant>REG_BADRPT</constant></td>
	  <td><literal>"Invalid preceding regular expression"</literal></td>
	</tr>
	<tr>
	  <td>214</td>
	  <td><constant>REG_EEND</constant></td>
	  <td><literal>"Premature end of regular expression"</literal></td>
	</tr>
	<tr>
	  <td>215</td>
	  <td><constant>REG_ESIZE</constant></td>
	  <td><literal>"Regular expression too big"</literal></td>
	</tr>
	<tr>
	  <td>216</td>
	  <td><constant>REG_ERPAREN</constant></td>
	  <td><literal>"Unmatched ) or \)"</literal></td>
	</tr>
	<tr>
	  <td>217</td>
	  <td><constant>REG_EMPTY</constant></td>
	  <td><literal>"Empty expression"</literal></td>
	</tr>
	<tr>
	  <td>218</td>
	  <td><constant>REG_E_UNKNOWN</constant></td>
	  <td><literal>"Unknown"</literal></td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      カスタムの文字クラス名は以下のように読み込まれる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>メッセージ ID</th>
	  <th>説明</th>
	  <th>等価な既定クラス名</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td>300</td>
	  <td>アルファベット文字と数字の文字クラス名。</td>
	  <td><literal>"alnum"</literal></td>
	</tr>
	<tr>
	  <td>301</td>
	  <td>アルファベット文字の文字クラス名。</td>
	  <td><literal>"alpha"</literal></td>
	</tr>
	<tr>
	  <td>302</td>
	  <td>制御文字の文字クラス名。</td>
	  <td><literal>"cntrl"</literal></td>
	</tr>
	<tr>
	  <td>303</td>
	  <td>10 進数字の文字クラス名。</td>
	  <td><literal>"digit"</literal></td>
	</tr>
	<tr>
	  <td>304</td>
	  <td>図形文字の文字クラス名。</td>
	  <td><literal>"graph"</literal></td>
	</tr>
	<tr>
	  <td>305</td>
	  <td>小文字の文字クラス名。</td>
	  <td><literal>"lower"</literal></td>
	</tr>
	<tr>
	  <td>306</td>
	  <td>印字可能文字の文字クラス名。</td>
	  <td><literal>"print"</literal></td>
	</tr>
	<tr>
	  <td>307</td>
	  <td>区切り文字の文字クラス名。</td>
	  <td><literal>"punct"</literal></td>
	</tr>
	<tr>
	  <td>308</td>
	  <td>空白の文字クラス名。</td>
	  <td><literal>"space"</literal></td>
	</tr>
	<tr>
	  <td>309</td>
	  <td>大文字の文字クラス名。</td>
	  <td><literal>"upper"</literal></td>
	</tr>
	<tr>
	  <td>310</td>
	  <td>16 進数字の文字クラス名。</td>
	  <td><literal>"xdigit"</literal></td>
	</tr>
	<tr>
	  <td>311</td>
	  <td>行区切り以外の空白類文字の文字クラス名。</td>
	  <td><literal>"blank"</literal></td>
	</tr>
	<tr>
	  <td>312</td>
	  <td>単語構成の文字クラス名。</td>
	  <td><literal>"word"</literal></td>
	</tr>
	<tr>
	  <td>313</td>
	  <td>Unicode 文字の文字クラス名。</td>
	  <td><literal>"unicode"</literal></td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      最後にカスタムの照合要素名はメッセージ ID 400 から読み込まれ、最初に失敗したところで終了する。各メッセージは “tagname string” のような形式で、<replaceable>tagname</replaceable> は <phrase role="regex-pattern">[[.tagname.]]</phrase> の内部で使用する名前、<replaceable>string</replaceable> は照合要素の実際のテキストである。照合要素 <phrase role="regex-pattern">[[.zero.]]</phrase> の値は文字列から数値への変換に使用され、他の値で置換するとその値が文字列解析に使われるということに注意していただきたい。例えば正規表現内でラテン数字の代わりに Unicode のアラビア-インド数字を使用するのであれば、<phrase role="regex-pattern">[[.zero.]]</phrase> に Unicode 文字 0x0660 を充てればよい。
    </para>
    <para>
      カスタム名を定義した場合でも、文字クラスおよび照合要素の POSIX 定義名は常に有効であるということに注意していただきたい。一方、カスタムのエラーメッセージとカスタムの構文メッセージは既存のものを上書きする。
    </para>
  </sect4>
</section>
