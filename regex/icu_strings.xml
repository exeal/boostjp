<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.non_std_strings.icu">
  <title>Unicode と ICU 文字列型</title>

  <section xml:id="ref.non_std_strings.icu.intro">
    <title>ICU とともに Boost.Regex を使用する</title>
    <para>
      ヘッダ
    </para>
    <programlisting language="C++"><![CDATA[<boost/regex/icu.hpp>]]></programlisting>
    <para>
      に、Unicode 環境で正規表現を使用するのに必要なデータ型とアルゴリズムが含まれている。
    </para>
    <para>
      このヘッダを使用する場合は <link xlink:href="http://www.ibm.com/software/globalization/icu/">ICU ライブラリ</link>が必要である。また <link linkend="install.building_with_unicode_and_icu_support">ICU サポートを有効にして</link> Boost.Regex をビルドしていなければならない。
    </para>
    <para>
      このヘッダにより以下のことが可能となる。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  Unicode 文字列を UTF-32 コードポイントシーケンスとして扱う正規表現の作成。
	</para>
      </listitem>
      <listitem>
	<para>
	  文字分類を含む Unicode データプロパティをサポートする正規表現の作成。
	</para>
      </listitem>
      <listitem>
	<para>
	  UTF-8 、UTF-16 、UTF-32 のいずれかで符号化された Unicode 文字列の透過的な検索。
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="ref.non_std_strings.icu.unicode_types">
    <title>Unicode 正規表現型</title>
    <para>
      ヘッダ <filename class="headerfile">&lt;boost/regex/icu.hpp&gt;</filename> は UTF-32 文字を処理する正規表現特性クラスを提供する。
    </para>
    <classsynopsis language="C++" class="class">
      <ooclass>
	<classname>icu_regex_traits</classname>
      </ooclass>
    </classsynopsis>
    <para>
      そしてこの特性クラスを用いた正規表現型がある。
    </para>
    <programlisting language="C++"><![CDATA[typedef basic_regex<UChar32,icu_regex_traits> u32regex;]]></programlisting>
    <para>
      型 <type>u32regex</type> はあらゆる Unicode 正規表現を使用するための正規表現型である。内部的には UTF-32 コードポイントを使用しているが、UTF-32 符号化文字列だけでなく、UTF-8 および UTF-16 符号化文字列による作成・検索も可能である。
    </para>
    <para>
      <type>u32regex</type> のコンストラクタおよび <methodname>assign</methodname> メンバ関数は UTF-32 符号化文字列を要求するが、UTF-8 、UTF-16 および UTF-32 符号化文字列から正規表現を作成する <function>make_u32regex</function> アルゴリズムの多重定義群がある。
    </para>

    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class InputIterator>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>InputIterator</type>
	      <parameter>i</parameter>
	    </paramdef>
	    <paramdef>
	      <type>InputIterator</type>
	      <parameter>j</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		イテレータシーケンス [i,j) から正規表現オブジェクトを作成する。シーケンスの文字符号化形式は <code language="C++">sizeof(*i)</code> により決定し、1 であれば UTF-8 、2 であれば UTF-16 、4 であれば UTF-32 となる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>const char*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	      <initializer>boost::regex_constants::perl</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		null 終端 UTF-8 文字シーケンス <parameter>p</parameter> から正規表現オブジェクトを作成する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>const unsigned char*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	      <initializer>boost::regex_constants::perl</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		null 終端 UTF-8 文字シーケンス <parameter>p</parameter> から正規表現オブジェクトを作成する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>const wchar_t*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	      <initializer>boost::regex_constants::perl</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		null 終端文字シーケンス <parameter>p</parameter> から正規表現オブジェクトを作成する。シーケンスの文字符号化形式 <code language="C++">sizeof(wchar_t)</code> により決定し、1 であれば UTF-8 、2 であれば UTF-16 、4 であれば UTF-32 となる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>const UChar*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	      <initializer>boost::regex_constants::perl</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		null 終端 UTF-16 文字シーケンス <parameter>p</parameter> から正規表現オブジェクトを作成する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class C, class T, class A>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const std::basic_string<C, T, A>&]]></type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type>InputIterator</type>
	      <parameter>j</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		文字列 <parameter>s</parameter> から正規表現オブジェクトを作成する。シーケンスの文字符号化形式は <code language="C++">sizeof(C)</code> により決定し、1 であれば UTF-8 、2 であれば UTF-16 、4 であれば UTF-32 となる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>u32regex <function>make_u32regex</function></funcdef>
	    <paramdef>
	      <type>const UnicodeString&amp;</type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type>boost::regex_constants::syntax_option_type</type>
	      <parameter>opt</parameter>
	      <initializer>boost::regex_constants::perl</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		UTF-16 符号化文字列 <parameter>s</parameter> から正規表現オブジェクトを作成する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="ref.non_std_strings.icu.unicode_algo">
    <title>Unicode 正規表現アルゴリズム</title>
    <para>
      正規表現アルゴリズム <function linkend="ref.regex_match">regex_match</function> 、<function linkend="ref.regex_search">regex_search</function> および <function linkend="ref.regex_replace">regex_replace</function> はすべて、処理する文字シーケンスの文字エンコーディングが正規表現オブジェクトで使われているものと同じであると想定している。この動作は Unicode 正規表現では望ましいものではない。
      <footnote>
	<para>
	  訳注　Unicode に限った話ではありません。日本語では従来から複数の符号化方式を使用しています。
	</para>
      </footnote>
      1 データを UTF-32 の「チャンク」で処理したくでも、実際のデータは UTF-8 か UTF-16 で符号化されている場合が多い。そのためヘッダ <filename class="headerfile">&lt;boost/regex/icu.hpp&gt;</filename> はこれらのアルゴリズムの薄いラッパ群 <function>u32regex_match</function> 、<function>u32regex_search</function> および <function>u32regex_replace</function> を提供している。これらのラッパは内部でイテレータアダプタを使って、実際は「本体の」アルゴリズムに渡すことのできる UTF-32 シーケンスであるデータを見かけ上 UTF-8 、UTF-16 としている。
    </para>

    <section xml:id="ref.non_std_strings.icu.unicode_algo.u32regex_match">
      <title>u32regex_match</title>
      <para>
	各 <function linkend="ref.regex_match">regex_match</function> アルゴリズムが <filename class="headerfile">&lt;boost/regex.hpp&gt;</filename> で定義されているのに対し、<filename class="headerfile">&lt;boost/regex/icu.hpp&gt;</filename> は同じ引数をとる多重定義アルゴリズム <function>u32regex_match</function> を定義する。入力として ICU の <classname>UnicodeString</classname> とともに UTF-8 、UTF-16 、UTF-32 符号化データを受け取る。
      </para>
      <para>
	例：パスワードのマッチを UTF-16 <classname>UnicodeString</classname> で行う。
      </para>
      <programlisting language="C++"><![CDATA[//
// password が正規表現 requirements で
// 定義したパスワードの要件を満たしているか調べる。
//
bool is_valid_password(const UnicodeString& password, const UnicodeString& requirements)
{
   return boost::u32regex_match(password, boost::make_u32regex(requirements));
}]]></programlisting>
      <para>
	例：UTF-8 で符号化されたファイル名のマッチを行う。
      </para>
      <programlisting language="C++"><![CDATA[//
// UTF-8 で符号化された std::string のパスからファイル名部分を抜き出し、
// 結果を別の std::string として返す：
//
std::string get_filename(const std::string& path)
{
   boost::u32regex r = boost::make_u32regex("(?:\\A|.*\\\\)([^\\\\]+)");
   boost::smatch what;
   if(boost::u32regex_match(path, what, r))
   {
      // $1 を std::string として抽出する：
      return what.str(1);
   }
   else
   {
      throw std::runtime_error("パス名が不正");
   }
}]]></programlisting>
    </section>

    <section xml:id="ref.non_std_strings.icu.unicode_algo.u32regex_search">
      <title>u32regex_search</title>
      <para>
	各 <function linkend="ref.regex_search">regex_search</function> アルゴリズムが <filename class="headerfile">&lt;boost/regex.hpp&gt;</filename> で定義されているのに対し、<filename class="headerfile">&lt;boost/regex/icu.hpp&gt;</filename> は同じ引数をとる多重定義アルゴリズム <function>u32regex_search</function> を定義する。入力として ICU の <classname>UnicodeString</classname> とともに UTF-8 、UTF-16 、UTF-32 符号化データを受け取る。
      </para>
      <para>
	例：特定の言語区画から文字シーケンスを検索する。
      </para>
      <programlisting language="C++"><![CDATA[UnicodeString extract_greek(const UnicodeString& text)
{
   // UTF-16 で符号化されたテキストからギリシャ語の区画を検索する。
   // この正規表現は完全ではないが、今のところは最善の方法である。特定の
   // 用字系を検索するのは、実際は非常に難しい。
   //
   // 検索するのはギリシャ文字で始まり
   // 非アルファベット（[^[:L*:]]）かギリシャ文字ブロック
   //（[\\x{370}-\\x{3FF}]）の文字が続く文字シーケンスである。
   //
   boost::u32regex r = boost::make_u32regex(
         L"[\\x{370}-\\x{3FF}](?:[^[:L*:]]|[\\x{370}-\\x{3FF}])*");
   boost::u16match what;
   if(boost::u32regex_search(text, what, r))
   {
      // $0 を UnicodeString として抽出する:
      return UnicodeString(what[0].first, what.length(0));
   }
   else
   {
      throw std::runtime_error("ギリシャ語の部分は見つかりませんでした！");
   }
}]]></programlisting>
    </section>

    <section xml:id="ref.non_std_strings.icu.unicode_algo.u32regex_replace">
      <title>u32regex_replace</title>
      <para>
	各 <function linkend="ref.regex_replace">regex_replace</function> アルゴリズムが <filename class="headerfile">&lt;boost/regex.hpp&gt;</filename> で定義されているのに対し、<filename class="headerfile">&lt;boost/regex/icu.hpp&gt;</filename> は同じ引数をとる多重定義アルゴリズム <function>u32regex_replace</function> を定義する。入力として ICU の <classname>UnicodeString</classname> とともに UTF-8 、UTF-16 、UTF-32 符号化データを受け取る。アルゴリズムに渡す入力シーケンスと書式化文字列の符号化形式は異なっていてもよい（一方が UTF-8 で他方が UTF-16 など）が、結果の文字列や出力イテレータは検索対象のテキストと同じ文字符号化形式でなければならない。
      </para>
      <para>
	例：クレジットカード番号を書式化しなおす。
      </para>
      <programlisting language="C++"><![CDATA[//
// クレジットカード番号を（数字を含んだ）文字列として受け取り、
// 4 桁ずつ "-" で区切られた可読性の高い形式に
// 再書式化する。
// UTF-32 の正規表現、UTF-16 の文字列、
// UTF-8 の書式指定子を混在させているが
// すべて正しく動作することに注意していただきたい：
//
const boost::u32regex e = boost::make_u32regex(
      "\\A(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})\\z");
const char* human_format = "$1-$2-$3-$4";

UnicodeString human_readable_card_number(const UnicodeString& s)
{
   return boost::u32regex_replace(s, e, human_format);
}]]></programlisting>
    </section>
  </section>

  <section xml:id="ref.non_std_strings.icu.unicode_iter">
    <title>Unicode 正規表現イテレータ</title>

    <section xml:id="ref.non_std_strings.icu.unicode_iter.u32regex_iterator">
      <title>u32regex_iterator</title>
      <para>
	型 <type>u32regex_iterator</type> はあらゆる側面で <classname linkend="ref.regex_iterator">regex_iterator</classname> と同じであるが、正規表現型が常に <type>u32regex</type> であることからテンプレート引数を 1 つ（イテレータ型）だけとる点が異なる。内部で <function>u32regex_search</function> を呼び出し、UTF-8 、UTF-16 および UTF-32 のデータを正しく処理する。
      </para>
      <programlisting language="C++"><![CDATA[template <class BidirectionalIterator>
class u32regex_iterator
{
   // メンバについては regex_iterator を参照
};

typedef u32regex_iterator<const char*>     utf8regex_iterator;
typedef u32regex_iterator<const UChar*>    utf16regex_iterator;
typedef u32regex_iterator<const UChar32*>  utf32regex_iterator;]]></programlisting>
      <para>
	文字列から <type>u32regex_iterator</type> を簡単に構築するために、非メンバのヘルパ関数群 <function>make_u32regex_iterator</function> がある
      </para>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_iterator&lt;const char*&gt; <function>make_u32regex_iterator</function></funcdef>
	  <paramdef>
	    <type>const char*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_iterator&lt;const wchar_t*&gt; <function>make_u32regex_iterator</function></funcdef>
	  <paramdef>
	    <type>const wchar_t*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_iterator&lt;const UChar*&gt; <function>make_u32regex_iterator</function></funcdef>
	  <paramdef>
	    <type>const UChar*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <class charT, class Traits, class Alloc>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_iterator&lt;typename std::basic_string&lt;charT, Traits, Alloc&gt;::const_iterator&gt; <function>make_u32regex_iterator</function></funcdef>
	  <paramdef>
	    <type><![CDATA[const std::basic_string<charT, Traits, Alloc>&]]></type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_iterator&lt;const UChar*&gt; <function>make_u32regex_iterator</function></funcdef>
	  <paramdef>
	    <type>const UnicodeString&amp;</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <para>
	これらの多重定義は、テキスト <parameter>s</parameter> に対してフラグ <parameter>m</parameter> を用いて見つかる正規表現 <parameter>e</parameter> のすべてのマッチを列挙するイテレータを返す。
      </para>
      <para>
	例：国際通貨記号とその金額（数値）を検索する。
      </para>
      <programlisting language="C++"><![CDATA[void enumerate_currencies(const std::string& text)
{
   // 通貨記号とその金額（数値）を
   // すべて列挙、印字する：
   const char* re =
      "([[:Sc:]][[:Cf:][:Cc:][:Z*:]]*)?"
      "([[:Nd:]]+(?:[[:Po:]][[:Nd:]]+)?)?"
      "(?(1)"
         "|(?(2)"
            "[[:Cf:][:Cc:][:Z*:]]*"
         ")"
         "[[:Sc:]]"
      ")";
   boost::u32regex r = boost::make_u32regex(re);
   boost::u32regex_iterator<std::string::const_iterator>
         i(boost::make_u32regex_iterator(text, r)), j;
   while(i != j)
   {
      std::cout << (*i)[0] << std::endl;
      ++i;
   }
}]]></programlisting>
      <para>
	次のように呼び出すと、
      </para>
      <programlisting language="C++">enumerate_currencies(" $100.23 or £198.12 ");</programlisting>
      <para>
	以下の結果を得る。
      </para>
      <screen><computeroutput>$100.23
£198.12</computeroutput></screen>
      <para>
	当然ながら、入力は UTF-8 で符号化したものである。
      </para>
    </section>

    <section xml:id="ref.non_std_strings.icu.unicode_iter.u32regex_token_iterator">
      <title>u32regex_token_iterator</title>
      <para>
	型 <type>u32regex_token_iterator</type> はあらゆる側面で <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> と同じであるが、正規表現型が常に <type>u32regex</type> であることからテンプレート引数を 1 つ（イテレータ型）だけとる点が異なる。内部で <function>u32regex_search</function> を呼び出し、UTF-8 、UTF-16 および UTF-32 のデータを正しく処理する。
      </para>
      <programlisting language="C++"><![CDATA[template <class BidirectionalIterator>
class u32regex_token_iterator
{
   // メンバについては regex_token_iterator を参照
};

typedef u32regex_token_iterator<const char*>     utf8regex_token_iterator;
typedef u32regex_token_iterator<const UChar*>    utf16regex_token_iterator;
typedef u32regex_token_iterator<const UChar32*>  utf32regex_token_iterator;]]></programlisting>
      <para>
	文字列から <type>u32regex_token_iterator</type> を簡単に構築するために、非メンバのヘルパ関数群 <function>make_u32regex_token_iterator</function> がある。
      </para>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const char*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const char*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>int</type>
	    <parameter>sub</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const wchar_t*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const wchar_t*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>int</type>
	    <parameter>sub</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UChar*</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>int</type>
	    <parameter>sub</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <class charT, class Traits, class Alloc>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;typename std::basic_string&lt;charT, Traits, Alloc&gt;::const_iterator&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type><![CDATA[const std::basic_string<charT, Traits, Alloc>&]]></type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>int</type>
	    <parameter>sub</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UnicodeString&amp;</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>int</type>
	    <parameter>sub</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <para>
	これらの多重定義は、テキスト <parameter>s</parameter> に対してフラグ <parameter>m</parameter> を用いて見つかる正規表現 <parameter>e</parameter> の部分式 <parameter>sub</parameter> のすべてのマッチを列挙するイテレータを返す。
      </para>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <std::size_t N>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const char*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const char*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const int</type>
	    <parameter>(&amp;submatch)[N]</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <std::size_t N>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const wchar_t*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const wchar_t*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const int</type>
	    <parameter>(&amp;submatch)[N]</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <std::size_t N>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UChar*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const int</type>
	    <parameter>(&amp;submatch)[N]</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <class charT, class Traits, class Alloc, std::size_t N>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;typename std::basic_string&lt;charT, Traits, Alloc&gt;::const_iterator&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type><![CDATA[const std::basic_string<charT, Traits, Alloc>&]]></type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const int</type>
	    <parameter>(&amp;submatch)[N]</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <std::size_t N>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UnicodeString&amp;</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const int</type>
	    <parameter>(&amp;submatch)[N]</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <para>
	これらの多重定義は、テキスト <parameter>s</parameter> に対してフラグ <parameter>m</parameter> を用いて見つかる正規表現 <parameter>e</parameter> のすべての部分式マッチを列挙するイテレータを返す。
      </para>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const char*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const char*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type><![CDATA[std::vector<int>&]]></type>
	    <parameter>submatch</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const wchar_t*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const wchar_t*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type><![CDATA[std::vector<int>&]]></type>
	    <parameter>submatch</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UChar*</type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type><![CDATA[std::vector<int>&]]></type>
	    <parameter>submatch</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo><![CDATA[template <class charT, class Traits, class Alloc>]]></funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;typename std::basic_string&lt;charT, Traits, Alloc&gt;::const_iterator&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type><![CDATA[const std::basic_string<charT, Traits, Alloc>&]]></type>
	    <parameter>p</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type><![CDATA[std::vector<int>&]]></type>
	    <parameter>submatch</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>u32regex_token_iterator&lt;const UChar*&gt; <function>make_u32regex_token_iterator</function></funcdef>
	  <paramdef>
	    <type>const UnicodeString&amp;</type>
	    <parameter>s</parameter>
	  </paramdef>
	  <paramdef>
	    <type>const u32regex&amp;</type>
	    <parameter>e</parameter>
	  </paramdef>
	  <paramdef>
	    <type><![CDATA[std::vector<int>&]]></type>
	    <parameter>submatch</parameter>
	  </paramdef>
	  <paramdef>
	    <type>regex_constants::match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>regex_constants::match_default</initializer>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
      <para>
	これらの多重定義は、テキスト <parameter>s</parameter> に対してフラグ <parameter>m</parameter> を用いて見つかる正規表現 <parameter>e</parameter> の 1 つの部分式マッチを列挙するイテレータを返す。
      </para>
      <para>
	例：国際通貨記号とその金額（数値）を検索する。
      </para>
      <programlisting language="C++"><![CDATA[void enumerate_currencies2(const std::string& text)
{
   // 通貨記号とその金額（数値）を
   // すべて列挙、印字する：
   const char* re =
      "([[:Sc:]][[:Cf:][:Cc:][:Z*:]]*)?"
      "([[:Nd:]]+(?:[[:Po:]][[:Nd:]]+)?)?"
      "(?(1)"
         "|(?(2)"
            "[[:Cf:][:Cc:][:Z*:]]*"
         ")"
         "[[:Sc:]]"
      ")";
   boost::u32regex r = boost::make_u32regex(re);
   boost::u32regex_token_iterator<std::string::const_iterator>
      i(boost::make_u32regex_token_iterator(text, r, 1)), j;
   while(i != j)
   {
      std::cout << *i << std::endl;
      ++i;
   }
}]]></programlisting>
    </section>
  </section>
</section>
