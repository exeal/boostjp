<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="introduction_and_overview">
  <title>導入と概要</title>
  <para>
    正規表現はテキスト処理でよく使われるパターンマッチの形式である。Unix ユーティリティの grep 、sed 、awk やプログラミング言語Perlといった正規表現を広範にわたって利用しているツールに馴染みのあるユーザは多い。古くから C++ ユーザが正規表現処理を行う方法は POSIX C API に限られていた。Boost.Regex もこれらの API を提供するが、本ライブラリの最適な利用法ではない。例えば Boost.Regex はワイド文字列に対応している。また従来の C ライブラリでは不可能だった（sed や Perl で使用されているような）検索や置換も可能である。
  </para>
  <para>
    <classname linkend="ref.basic_regex">basic_regex</classname> は本ライブラリのキーとなるクラスであり、「マシン可読の」正規表現を表す。正規表現パターンは文字列であると同時に、正規表現アルゴリズムに要求される状態マシンでもあるという観点から、<classname>std::basic_string</classname> に非常に近いモデリングになっている。<classname>std::basic_string</classname> と同様に、このクラスを参照するのにほとんど常に使われる <code language="C++">typedef</code> が 2 つある。
  </para>
  <programlisting language="C++"><![CDATA[namespace boost {

template <class charT,
	     class traits = regex_traits<charT> >
class basic_regex;

typedef basic_regex<char> regex;
typedef basic_regex<wchar_t> wregex;

}]]></programlisting>
  <para>
    このライブラリの使い方を見るために、クレジットカードを処理するアプリケーションを考える。クレジットカードの番号は、通常 16 桁の数字が空白かハイフンで 4 桁ずつのグループに分けられた文字列になっている。クレジットカードの番号をデータベースに格納する前に（顧客にとってはどうでもいいことだろうが）番号が正しい形式になっているか確認したいと思う。あらゆる（10 進）数字にマッチする正規表現として <phrase role="regex-pattern">[0-9]</phrase> が使えるが、このような文字の範囲は実際にはロカール依存である。代わりに使用すべきなのは POSIX 標準形式の <phrase role="regex-pattern">[[:digit:]]</phrase> か、Boost.Regex および Perl での短縮形である <phrase role="regex-pattern">\d</phrase> となる（古いライブラリは C ロカールについてハードコードされていることが多く、結果的に問題となっていなかったことに注意していただきたい）。以上のことから、次の正規表現を使えばクレジットカードの番号形式を検証できる。
  </para>
  <literallayout>(\d{4}[- ]){3}\d{4}</literallayout>
  <para>
    式中の括弧は部分式のグループ化（および後で参照するためのマーク付け）を行い、<phrase role="regex-pattern">{4}</phrase> は「4 回ちょうどの繰り返し」を意味する。これは Perl 、awk および egrep で使われている拡張正規表現構文の例である。Boost.Regex は sed や grep で使われている古い「基本的な」構文もサポートしているが、基本的な正規表現がすでにあって再利用しようと考えているのでなければ、通常はあまり役に立たない。
  </para>
  <para>
    では、この式を使ってクレジットカード番号を検証する C++ コードを書いてみる。
  </para>
  <programlisting language="C++"><![CDATA[bool validate_card_format(const std::string& s)
{
   static const boost::regex e("(\\d{4}[- ]){3}\\d{4}");
   return regex_match(s, e);
}]]></programlisting>
  <para>
    式にエスケープが追加されていることに注意していただきたい。エスケープは正規表現エンジンに処理される前に C++ コンパイラによって処理されるため、結局、正規表現中のエスケープは C/C++ コードでは二重にしなければならない。また、本文書の例はすべてコンパイラが引数依存の名前探索をサポートしているものとしているという点に注意していただきたい。未サポートのコンパイラ（VC6 など）では関数呼び出しの前に <code language="C++">boost::</code> を付けなければならない場合がある。
  </para>
  <para>
    クレジットカードの処理に詳しい人であれば、上の形式が人にとって可読性は高いものの、オンラインのクレジットカードシステムに適した形式になっていないと気づくと思う。こういうシステムでは、間に空白の入らない 16 桁（あるいは 15 桁）の文字列を使う。ここで必要なのは 2 つの形式を簡単に交換する方法であり、こういう場合に検索と置換を使う。Perl や sed といったユーティリティに詳しいのであれば、この部分は読み飛ばしてもらって構わない。ここで必要なのは 2 つの文字列である。1 つは正規表現であり、もう1つはマッチしたテキストをどのように置換するか指定する「書式化文字列」である。Boost.Regex でこの検索・置換操作はアルゴリズム <function linkend="ref.regex_replace">regex_replace</function> で行う。今のクレジットカードの例では形式を変換するアルゴリズムを 2 つ記述できる。
  </para>
  <programlisting language="C++"><![CDATA[// いずれの形式にもマッチする正規表現：
const boost::regex e("\\A(\\d{3,4})[- ]?(\\d{4})[- ]?(\\d{4})[- ]?(\\d{4})\\z");
const std::string machine_format("\\1\\2\\3\\4");
const std::string human_format("\\1-\\2-\\3-\\4");

std::string machine_readable_card_number(const std::string s)
{
   return regex_replace(s, e, machine_format, boost::match_default | boost::format_sed);
}

std::string human_readable_card_number(const std::string s)
{
   return regex_replace(s, e, human_format, boost::match_default | boost::format_sed);
}]]></programlisting>
  <para>
    カード番号の 4 つの部分を別々のフィールドに分けるのに、正規表現中でマーク済み部分式を用いた。形式化文字列では、マッチしたテキストを置換するのに sed ライクの構文を使っている。
  </para>
  <para>
    上の例では正規表現マッチの結果を直接操作することはしなかったが、通常はマッチ結果にはマッチ全体だけでなく部分マッチに関する情報が含まれている。必要な場合はライブラリの <classname linkend="ref.match_results">match_results</classname> クラスのインスタンスを使うとよい。先ほどと同様に、実際に使用する場合は typedef を使うとよい。
  </para>
  <programlisting language="C++"><![CDATA[namespace boost{

typedef match_results<const char*> cmatch;
typedef match_results<const wchar_t*> wcmatch;
typedef match_results<std::string::const_iterator> smatch;
typedef match_results<std::wstring::const_iterator> wsmatch;

}]]></programlisting>
  <para>
    アルゴリズム <function linkend="ref.regex_search">regex_search</function> および <function linkend="ref.regex_match">regex_match</function> は、<classname linkend="ref.match_results">match_results</classname> を使ってどこがマッチしたかを返す。2 つのアルゴリズムの違いは <function linkend="ref.regex_match">regex_match</function> が入力テキスト<emphasis>全体</emphasis>に対するマッチを検索するのみであるに対し、<function linkend="ref.regex_search">regex_search</function> は入力テキスト中のあらゆる位置のマッチを検索するということである。
  </para>
  <para>
    これらのアルゴリズムが、通常の C 文字列の検索に限定されていないことに注意していただきたい。双方向イテレータであれば何でも検索可能であり、ほとんどあらゆる種類のデータにシームレスに対応している。
  </para>
  <para>
    検索・置換操作については、すでに見た <function linkend="ref.regex_replace">regex_replace</function> に加えて <classname linkend="ref.match_results">match_results</classname> クラスに <property>format</property> メンバがある。このメンバ関数はマッチ結果と書式化文字列を取り、この 2 つをマージして新文字列を生成する。
  </para>
  <para>
    テキスト中のマッチ結果をすべて走査するイテレータ型が 2 つある。<classname linkend="ref.regex_iterator">regex_iterator</classname> は見つかった <classname linkend="ref.match_results">match_results</classname> オブジェクトを列挙する。一方 <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> は文字列の列を列挙する（Perl スタイルの分割操作に似ている）。
  </para>
  <para>
    テンプレートを使うのが嫌な人には、低水準のテンプレートコードをカプセル化した高水準のラッパクラス <classname linkend="ref.deprecated_interfaces.old_regex">RegEx</classname> がある。ライブラリの全機能は必要ないという人向けの簡単なインターフェイスとなっており、ナロー文字と「拡張」正規表現構文のみをサポートする。正規表現 C++ 標準ライブラリの草案には含まれておらず、現在は非推奨である。
  </para>
  <para>
    POSIX API 関数 <function linkend="ref.posix.regcomp">regcomp</function> 、<function linkend="ref.posix.regexec">regexec</function> 、<function linkend="ref.posix.regfree">regfree</function> および <function linkend="ref.posix.regerror">regerror</function> はナロー文字および Unicode 版の両方で利用可能であり、これらの API との互換性が必要な場合のために提供している。
  </para>
  <para>
    最後に、本ライブラリは GNU および BSD4 の regex パッケージや PCRE 、Perl 5 といった正規表現ライブラリの他に、<link linkend="background_information.locale">実行時の地域化</link>と完全な POSIX 正規表現構文もサポートしている。これには複数文字の照合要素や等価クラスのような発展的な機能も含まれている。
  </para>
</section>
