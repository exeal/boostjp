<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.posix">
  <title>POSIX 互換 C API</title>
  <note>
    <para>
      本リファレンスは POSIX API 関数の要約である。これらは（C++ 以外の言語によるアクセスが必要でない限り）新しいコードで使用する API ではなく、他のライブラリとの互換性のために提供されている。これらの関数が使用している名前は実際の関数名に展開されるマクロであるため、他のバージョンとの共存が可能である。
    </para>
  </note>
  <programlisting language="C++"><![CDATA[#include <boost/cregex.hpp>]]></programlisting>
  <para>
    あるいは
  </para>
  <programlisting language="C++"><![CDATA[#include <boost/regex.h>]]></programlisting>
  <para>
    以下の関数は POSIX 互換の C ライブラリが必要なユーザ向けである。Unicode 版とナロー文字版の両方が利用可能であり、標準 POSIX API 名は <symbol>UNICODE</symbol> が定義されているかどうかでいずれかの版に展開されるマクロである。
  </para>
  <important>
    <para>
      ここで定義するシンボルは、C++ プログラムではすべて名前空間 <package>boost</package> 内にあることに注意していただきたい。<code language="C++"><![CDATA[#include <boost/regex.h>]]></code> を使用した場合はシンボルが名前空間 <package>boost</package> 内で定義されるのは変わらないが、大域名前空間でも利用できるようになっている。
    </para>
    <para>
      関数の定義は以下のとおりである。
    </para>
  </important>
  <programlisting language="C++"><![CDATA[extern "C" {

struct regex_tA;
struct regex_tW;

int regcompA(regex_tA*, const char*, int);
unsigned int regerrorA(int, const regex_tA*, char*, unsigned int);
int regexecA(const regex_tA*, const char*, unsigned int, regmatch_t*, int);
void regfreeA(regex_tA*);

int regcompW(regex_tW*, const wchar_t*, int);
unsigned int regerrorW(int, const regex_tW*, wchar_t*, unsigned int);
int regexecW(const regex_tW*, const wchar_t*, unsigned int, regmatch_t*, int);
void regfreeW(regex_tW*);

#ifdef UNICODE
#define regcomp regcompW
#define regerror regerrorW
#define regexec regexecW
#define regfree regfreeW
#define regex_t regex_tW
#else
#define regcomp regcompA
#define regerror regerrorA
#define regexec regexecA
#define regfree regfreeA
#define regex_t regex_tA
#endif
}]]></programlisting>
  <para>
    これらの関数はすべて構造 <classname>regex_t</classname> に対して処理を行う。この構造体は次の 2 つの公開メンバを持つ。
  </para>
  <informaltable>
    <thead>
      <tr>
	<th>メンバ</th>
	<th>意味</th>
      </tr>
    </thead>
    <tbody>
      <tr>
	<td><type>unsigned int</type> <property>re_nsub</property></td>
	<td><function>regcomp</function> により値が設定され、正規表現中の部分式の総数を表す。</td>
      </tr>
      <tr>
	<td><type>const TCHAR*</type> <property>re_endp</property></td>
	<td>フラグ <constant>REG_PEND</constant> が設定されている場合、コンパイルする正規表現の終端を指す。</td>
      </tr>
    </tbody>
  </informaltable>
  <note>
    <para>
      <classname>regex_t</classname> は実際は <code language="C++">#define</code> であり、<symbol>UNICODE</symbol> が定義されているかどうかにより <classname>regex_tA</classname> か <classname>regex_tW</classname> のいずれかとなる。<type>TCHAR</type> はマクロ <symbol>UNICODE</symbol> により <type>char</type> か <type>wchar_t</type> のいずれかとなる。
    </para>
  </note>

  <sect4 xml:id="ref.posix.regcomp">
    <title>regcomp</title>
    <para>
      <function>regcomp</function> は <classname>regex_t</classname> へのポインタ、コンパイルする式へのポインタおよび以下の組み合わせとなるフラグ引数をとる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>フラグ</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>REG_EXTENDED</constant></td>
	  <td>現代的な正規表現をコンパイルする。<code language="C++">regbase::char_classes | regbase::intervals | regbase::bk_refs</code> と等価である。</td>
	</tr>
	<tr>
	  <td><constant>REG_BASIC</constant></td>
	  <td>基本的な（旧式の）正規表現構文をコンパイルする。<code language="C++">regbase::char_classes | regbase::intervals | regbase::limited_ops | regbase::bk_braces | regbase::bk_parens | regbase::bk_refs</code> と等価である。</td>
	</tr>
	<tr>
	  <td><constant>REG_NOSPEC</constant></td>
	  <td>文字をすべて通常の文字として扱う。正規表現は直値文字列である。</td>
	</tr>
	<tr>
	  <td><constant>REG_ICASE</constant></td>
	  <td>大文字小文字を区別しないマッチを行う。</td>
	</tr>
	<tr>
	  <td><constant>REG_NOSUB</constant></td>
	  <td>このライブラリでは効果なし。</td>
	</tr>
	<tr>
	  <td><constant>REG_NEWLINE</constant></td>
	  <td>このフラグを設定した場合、ドットが改行文字にマッチしない。</td>
	</tr>
	<tr>
	  <td><constant>REG_PEND</constant></td>
	  <td>このフラグを設定した場合、<classname>regex_t</classname> 構造体の <property>re_endp</property> 引数はコンパイルする正規表現の終端を指していなければならない。</td>
	</tr>
	<tr>
	  <td><constant>REG_NOCOLLATE</constant></td>
	  <td>このフラグを設定した場合、文字範囲においてロカール依存の照合が無効になる。</td>
	</tr>
	<tr>
	  <td><constant>REG_ESCAPE_IN_LISTS</constant></td>
	  <td>このフラグを設定した場合、括弧式（文字集合）内でエスケープシーケンスが使用できる。</td>
	</tr>
	<tr>
	  <td><constant>REG_NEWLINE_ALT</constant></td>
	  <td>このフラグを設定した場合、改行文字は選択演算子 <phrase role="regex-pattern">|</phrase> と等価である。</td>
	</tr>
	<tr>
	  <td><constant>REG_PERL</constant></td>
	  <td>Perl 似の正規表現をコンパイルする。</td>
	</tr>
	<tr>
	  <td><constant>REG_AWK</constant></td>
	  <td>awk 似動作のショートカット：<code language="C++">REG_EXTENDED | REG_ESCAPE_IN_LISTS</code></td>
	</tr>
	<tr>
	  <td><constant>REG_GREP</constant></td>
	  <td>grep 似動作のショートカット：<code language="C++">REG_BASIC | REG_NEWLINE_ALT</code></td>
	</tr>
	<tr>
	  <td><constant>REG_EGREP</constant></td>
	  <td>egrep 似動作のショートカット：<code language="C++">REG_EXTENDED | REG_NEWLINE_ALT</code></td>
	</tr>
      </tbody>
    </informaltable>
  </sect4>

  <sect4 xml:id="ref.posix.regerror">
    <title>regerror</title>
    <para>
      <function>regerror</function> は以下の引数をとり、エラーコードを可読性の高い文字列に変換する。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>引数</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><type>int</type> <parameter>code</parameter></td>
	  <td>エラーコード。</td>
	</tr>
	<tr>
	  <td><type>const regex_t*</type> <parameter>e</parameter></td>
	  <td>正規表現（null でもよい）。</td>
	</tr>
	<tr>
	  <td><type>char*</type> <parameter>buf</parameter></td>
	  <td>エラーメッセージを書き込む文字列。</td>
	</tr>
	<tr>
	  <td><type>unsigned int</type> <parameter>buf_size</parameter></td>
	  <td><parameter>buf</parameter> の長さ</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      エラーコードが <constant>REG_ITOA</constant> との論理和になっている場合は、結果はメッセージではなく、例えば “REG_BADPAT” のようなコードの印字可能な名前となる。<parameter>code</parameter> が <constant>REG_ATOI</constant> の場合は、<parameter>e</parameter> は null であってはならず <code language="C++">e-&gt;re_endp</code> は印字可能名の終端を指していなければならない。またこの場合の戻り値はエラーコードの値である。<parameter>code</parameter> の値がこれら以外の場合は、戻り値はエラーメッセージの文字数であり、戻り値が <parameter>buf_size</parameter> 以上であればより大きなバッファを用いて <function>regerror</function> を再度呼び出す必要がある。
    </para>
  </sect4>

  <sect4 xml:id="ref.posix.regexec">
    <title>regexec</title>
    <para>
      <function>regexec</function> は文字列 <parameter>buf</parameter> 内から式 <parameter>e</parameter> の最初のマッチを検索する。<parameter>len</parameter> が 0 以外の場合は、<code language="C++">*m</code> には正規表現にマッチした内容が書き込まれる。<code language="C++">m[0]</code> はマッチした文字列全体、<code language="C++">m[1]</code> は 1 番目の部分式、<code language="C++">m[2]</code> は 2 番目などとなる。詳細はヘッダファイルの <classname>regmatch_t</classname> の宣言を見よ。<parameter>eflags</parameter> 引数は以下の組み合わせである。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>フラグ</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>REG_NOTBOL</constant></td>
	  <td>引数 <parameter>buf</parameter> が行の先頭ではない。</td>
	</tr>
	<tr>
	  <td><constant>REG_NOTEOL</constant></td>
	  <td>引数 <parameter>buf</parameter> が行末で終了していない。</td>
	</tr>
	<tr>
	  <td><constant>REG_STARTEND</constant></td>
	  <td>検索する文字列は <code language="C++">buf + pmatch[0].rm_so</code> が先頭で、<code language="C++">buf + pmatch[0].rm_eo</code> が終端である。</td>
	</tr>
      </tbody>
    </informaltable>
  </sect4>

  <sect4 xml:id="ref.posix.regfree">
    <title>regfree</title>
    <para>
      <function>regfree</function> は <function>regcomp</function> が割り当てたメモリをすべて解放する。
    </para>
  </sect4>
</section>
