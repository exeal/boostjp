<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.regex_match">
  <title>regex_match</title>
  <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>]]></programlisting>
  <para>
    アルゴリズム <function linkend="ref.regex_match">regex_match</function> は、与えられた正規表現が双方向イテレータの組で示された文字シーケンス<emphasis>全体</emphasis>にマッチするか判定する。このアルゴリズムの定義は以下に示すとおりである。この関数の主な用途は入力データの検証である。
  </para>
  <important>
    <para>
      結果が真となるのは式が入力シーケンス<emphasis>全体</emphasis>にマッチする場合のみということに注意していただきたい。シーケンス内で式を検索するには <function linkend="ref.regex_search">regex_search</function> を使用する。文字列の先頭でマッチを行う場合は、フラグ <constant>match_continuous</constant> を設定して <function linkend="ref.regex_search">regex_search</function> を使用する。
    </para>
  </important>
  <programlisting language="C++"><![CDATA[template <class BidirectionalIterator, class Allocator, class charT, class traits>
bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                 match_results<BidirectionalIterator, Allocator>& m,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);

template <class BidirectionalIterator, class charT, class traits>
bool regex_match(BidirectionalIterator first, BidirectionalIterator last,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);

template <class charT, class Allocator, class traits>
bool regex_match(const charT* str, match_results<const charT*, Allocator>& m,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);

template <class ST, class SA, class Allocator, class charT, class traits>
bool regex_match(const basic_string<charT, ST, SA>& s,
                 match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>& m,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);

template <class charT, class traits>
bool regex_match(const charT* str,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);

template <class ST, class SA, class charT, class traits>
bool regex_match(const basic_string<charT, ST, SA>& s,
                 const basic_regex <charT, traits>& e,
                 match_flag_type flags = match_default);]]></programlisting>

  <sect4 xml:id="ref.regex_match.description">
    <title>説明</title>

    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class BidirectionalIterator, class Allocator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>first</parameter>
	    </paramdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>last</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<BidirectionalIterator, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		型 <type>BidirectionalIterator</type> が双方向イテレータの要件（24.1.4）を満たす。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		正規表現 <parameter>e</parameter> と文字シーケンス [first, last) 全体の間に完全なマッチが存在するか判定する。引数 <parameter>flags</parameter>（<constant linkend="ref.match_flag_type">match_flag_type</constant> を見よ）は、正規表現が文字シーケンスに対してどのようにマッチするかを制御するのに使用する。完全なマッチが存在する場合は真を、それ以外の場合は偽を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、正規表現のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		関数が偽を返した場合、引数 <parameter>m</parameter> の状態は未定義である。それ以外の場合は次の表のとおりである。
	      </para>
	      <informaltable>
		<thead>
		  <tr>
		    <th>要素</th>
		    <th>値</th>
		  </tr>
		</thead>
		<tbody>
		  <tr>
		    <td><code language="C++">m.size()</code></td>
		    <td><code language="C++">1 + e.mark_count()</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.empty()</code></td>
		    <td><constant>false</constant></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().first</code></td>
		    <td><parameter>first</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().last</code></td>
		    <td><parameter>first</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().matched</code></td>
		    <td><constant>false</constant></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().first</code></td>
		    <td><parameter>last</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().last</code></td>
		    <td><parameter>last</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().matched</code></td>
		    <td><constant>false</constant></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].first</code></td>
		    <td><parameter>first</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].second</code></td>
		    <td><parameter>last</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].matched</code></td>
		    <td>完全マッチが見つかった場合は真、（<constant>match_partial</constant> フラグを設定した結果）部分マッチが見つかった場合は偽。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].first</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの先頭。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合は <parameter>last</parameter>。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].second</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの終端。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合は <parameter>last</parameter>。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].matched</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチした場合は真、それ以外は偽。</td>
		  </tr>
		</tbody>
	      </informaltable>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class BidirectionalIterator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>first</parameter>
	    </paramdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>last</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<classname>match_results&lt;BidirectionalIterator&gt;</classname> のインスタンス <varname>what</varname> を構築し、<code language="C++">regex_match(first, last, what, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class Allocator, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>str</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<const charT*, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_match(str, str + char_traits&lt;charT&gt;::length(str), m, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class ST, class SA, class Allocator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const basic_string<charT, ST, SA>&]]></type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_match(s.begin(), s.end(), m, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>str</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_match(str, str + char_traits&lt;charT&gt;::length(str), e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class ST, class SA, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const basic_string<charT, ST, SA>&]]></type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_match(s.begin(), s.end(), e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.regex_match.examples">
    <title>使用例</title>
    <para>
      以下は FTP 応答を処理する例である。
    </para>
    <programlisting language="C++"><![CDATA[#include <stdlib.h>
#include <boost/regex.hpp>
#include <string>
#include <iostream>

using namespace boost;

regex expression("([0-9]+)(\\-| |$)(.*)");

// process_ftp：
// 成功時は FTP 応答コードを返し、
// msg に応答メッセージを書き込む。
int process_ftp(const char* response, std::string* msg)
{
   cmatch what;
   if(regex_match(response, what, expression))
   {
      // what[0] には文字列全体が入る
      // what[1] には応答コードが入る
      // what[2] には区切り文字が入る
      // what[3] にはテキストメッセージが入る。
      if(msg)
         msg->assign(what[3].first, what[3].second);
      return std::atoi(what[1].first);
   }
   // マッチしなかったら失敗
   if(msg)
      msg->erase();
   return -1;
}]]></programlisting>
  </sect4>
</section>
