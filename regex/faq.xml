<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="background_information.faq">
  <title>よくある質問と回答</title>

  <!-- qanda を使うと HTML に変換したときに table になるので、使うのやめた -->
  <sect4>
    <title>Boost.Regex でエスケープ文字がうまく動作しないが、何がまずいのか</title>
    <para>
      C++ のコードに正規表現を埋め込む場合は、エスケープ文字が 2 度処理されることを忘れてはならない。1 度目は C++ コンパイラで 2 度目は Boost.Regex の正規表現コンパイラである。よって正規表現 <phrase role="regex-pattern">\d+</phrase> を Boost.Regex に渡すときは <literal>"\\d+"</literal> をコードに埋め込む必要がある。同様に直値のバックスラッシュをマッチさせるには、コードには <literal>"\\"</literal> を埋め込む必要がある。
    </para>
  </sect4>

  <sect4>
    <title>どうやっても <function>regex_match</function> が常に偽を返すのだが、何がまずいのか</title>
    <para>
      アルゴリズム <function>regex_match</function> は、正規表現のマッチがテキスト全体に対して成功する場合のみ成功する。テキスト内の、正規表現にマッチする部分文字列を検索する場合は <function>regex_search</function> を使用する。
    </para>
  </sect4>

  <sect4>
    <title>POSIX 正規表現で括弧を使うとマッチ結果が変わるのはなぜか</title>
    <para>
      Perl と異なり、POSIX（拡張および基本）正規表現では、括弧はマーク付けを行うだけでなく最良マッチの決定も行う。正規表現を POSIX 基本、あるいは POSIX 拡張正規表現としてコンパイルすると、Boost.Regex は POSIX 標準の最左最長規則にしたがってマッチを決定する。よって正規表現全体を評価した上で可能性のあるマッチが 2 つ以上ある場合、次の 1 番目の部分式を、その次は 2 番目の部分式、となる。そのため、<phrase role="regex-input">00123</phrase> に対して <phrase role="regex-pattern">(0*)([0-9]*)</phrase> でマッチをかけると $1 = "00" 、$2 = "123" が生成されるが、<phrase role="regex-input">00123</phrase> に対して <phrase role="regex-pattern">0*([0-9]*)</phrase> でマッチをかけると $1 = "00123" が生成される。
    </para>
    <para>
      $1 を <phrase role="regex-input">123</phrase> の部分のみにマッチさせたい場合は、<phrase role="regex-pattern">0*([1-9][0-9]*)</phrase> といった正規表現を使用するとよい。
    </para>
  </sect4>

  <sect4>
    <title>文字範囲が正しく動作しないのはなぜか（POSIX モードのみ）</title>
    <para>
      POSIX 標準は文字範囲式がロカールを考慮すると規定している。よって、例えば正規表現 <phrase role="regex-pattern">[A-Z]</phrase> は照合順が ‘A’ から ‘Z’ の間となるあらゆる照合要素にマッチする。これが意味するところは “C” と “POSIX” 以外の大部分のロカールでは、<phrase role="regex-pattern">[A-Z]</phrase> が例えば ‟t” 1 文字にマッチするという、大部分の人が期待しない（あるいは少なくとも大部分の人が正規表現エンジンの動作として考えていない）動作をするということである。このような理由から、Boost.Regex の既定の動作（Perl モード）ではコンパイルフラグ <constant>regex_constants::collate</constant> を設定しない限りロカール依存の照合は無効になっている。しかしながら、<constant>regex_constants::extended</constant> や <constant>regex_constants::basic</constant> といった既定以外のコンパイルフラグを設定するとロカール依存の照合が有効になる。これは内部的に <constant>regex_constants::extended</constant> や <constant>regex_constants::basic</constant> を使用する POSIX API 関数にも適用される。
      <footnote>
	<para>
	  <constant>regex_constants::nocollate</constant> が有効な場合は、ライブラリの動作は他の設定に関わらず <symbol>LC_COLLATE</symbol> ロカールカテゴリが “C” であるのと同様になる。
	</para>
      </footnote>
    </para>
  </sect4>

  <sect4>
    <title>関数に例外仕様がないのはなぜか。ライブラリが投げる例外にはどのようなものがあるか</title>
    <para>
      すべてのコンパイラが例外仕様をサポート（あるいは尊重）しているわけではなく、サポートしているコンパイラの中にも効率が低下するものがある。コンパイラの処理が現在よりも改善される日が来れば、例外仕様を追加するかもしれない。本ライブラリが投げる例外は 3 種類のみである。<exceptionname>boost::regex_error</exceptionname> は <classname linkend="ref.basic_regex">basic_regex</classname> が正規表現のコンパイル中に投げる可能性がある。<exceptionname>std::runtime_error</exceptionname> は、<methodname>basic_regex::imbue</methodname> が存在しないメッセージカタログを開こうとしたとき、<function linkend="ref.regex_search">regex_search</function> および <function linkend="ref.regex_match">regex_match</function> の検索時間が「限界を超えた」とき、あるいは <methodname>RegEx::GrepFiles</methodname> および <methodname>RegEx::FindFiles</methodname> が開けないファイルを開こうとしたときに投げる。最後に <exceptionname>std::bad_alloc</exceptionname> は本ライブラリのあらゆる関数が投げる可能性がある。
    </para>
  </sect4>

  <sect4>
    <title><function>regex_match</function> 、<function>regex_search</function> 、<function>regex_grep</function> 、<function>regex_format</function> 、<function>regex_merge</function> の「便利」版が使用できないのはなぜか</title>
    <para>
      これらの版が利用可能かどうかはコンパイラの能力に依存する。これらの関数の形式を決定する規則はかなり複雑であり、ヘルプに掲載しているのは標準準拠コンパイラでの形式のみである。あなたのコンパイラがどの形式をサポートしているか調べるには、<filename class="headerfile">&lt;boost/regex.hpp&gt;</filename> を C++ プリプロセッサにかけ、出力ファイルから目的の関数を探すとよい。しかしながら、ごく少数のコンパイラがこれらの関数の多重定義を正しく解釈できないことに注意していただきたい。
    </para>
  </sect4>
</section>
