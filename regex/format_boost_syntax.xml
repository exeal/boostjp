<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="format.boost_format_syntax">
  <title>Boost 拡張書式化文字列の構文</title>
  <para>
    Boost 拡張書式化文字列は、‘$’、‘\’、‘(’、‘)’、‘?’ および ‘.’ 以外のすべての文字を直値として扱う。
  </para>

  <sect4 xml:id="format.boost_format_syntax.grouping">
    <title>グループ化</title>
    <para>
      文字 <phrase role="regex-format">(</phrase> および <phrase role="regex-format">)</phrase> は字句的なグループ化を行う。したがって括弧そのものを出力する場合は <phrase role="regex-format">\(</phrase> および <phrase role="regex-format">\)</phrase> を使用する。 
    </para>
  </sect4>

  <sect4 xml:id="format.boost_format_syntax.conditionals">
    <title>条件</title>
    <para>
      文字 <phrase role="regex-format">?</phrase> は条件式を開始する。一般形は、以下である。
    </para>
    <literallayout>?Ntrue-expression:false-expression</literallayout>
    <para>
      ただし、<replaceable>N</replaceable> は 10 進数字である。
    </para>
    <para>
      部分式 <replaceable>N</replaceable> がマッチした場合、<replaceable>true-expression</replaceable> が評価され出力に送られる。それ以外の場合は <replaceable>false-expression</replaceable> が評価され出力に送られる。
    </para>
    <para>
      通常、あいまいさを回避するために条件式を括弧で囲む必要がある。
    </para>
    <para>
      例えば書式化文字列 <phrase role="regex-format">(?1foo:bar)</phrase> は、部分式 $1 がマッチした場合は <phrase role="regex-format">foo</phrase> で、$2 がマッチした場合は <phrase role="regex-format">bar</phrase> で見つかった各マッチを置換する。
    </para>
    <para>
      添字が 9 より大きい部分式にアクセスする場合は、以下を使用する。
    </para>
    <literallayout>?{INDEX}true-expression:false-expression</literallayout>
    <para>
      名前付き部分式にアクセスする場合は、以下を使用する。
    </para>
    <literallayout>?{NAME}true-expression:false-expression</literallayout>
  </sect4>

  <sect4 xml:id="format.boost_format_syntax.placeholder_sequences">
    <title>プレースホルダーシーケンス</title>
    <para>
      プレースホルダーシーケンスは、正規表現に対するマッチのどの部分を出力に送るかを指定する。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>プレースホルダー</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-format">$&amp;</phrase></td>
	  <td>正規表現全体にマッチした部分を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$MATCH</phrase></td>
	  <td><phrase role="regex-formst">$&amp;</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">${^MATCH}</phrase></td>
	  <td><phrase role="regex-formst">$&amp;</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$`</phrase></td>
	  <td>最後に見つかったマッチの終端（前回のマッチが存在しない場合はテキストの先頭）から現在のマッチの先頭までのテキストを出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$PREMATCH</phrase></td>
	  <td><phrase role="regex-formst">$`</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">${^PREMATCH}</phrase></td>
	  <td><phrase role="regex-formst">$`</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$'</phrase></td>
	  <td>現在のマッチの終端より後方のすべてのテキストを出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$POSTMATCH</phrase></td>
	  <td><phrase role="regex-formst">$'</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">${^POSTMATCH}</phrase></td>
	  <td><phrase role="regex-formst">$'</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$+</phrase></td>
	  <td>正規表現中の最後のマーク済み部分式にマッチした部分を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$LAST_PAREN_MATCH</phrase></td>
	  <td><phrase role="regex-formst">$+</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$LAST_SUBMATCH_RESULT</phrase></td>
	  <td>最後の部分式に実際にマッチした部分を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$^N</phrase></td>
	  <td><phrase role="regex-formst">$LAST_SUBMATCH_RESULT</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$$</phrase></td>
	  <td>直値の ‘$’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$n</phrase></td>
	  <td><replaceable>n</replaceable> 番目の部分式にマッチした部分を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">${n}</phrase></td>
	  <td><replaceable>n</replaceable> 番目の部分式にマッチした部分を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">$+{NAME}</phrase></td>
	  <td>“NAME” という名前の部分式にマッチした部分を出力する。</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      上に挙げなかった $ プレースホルダーはすべて直値の ‘$’ として扱われる。
    </para>
  </sect4>

  <sect4 xml:id="format.boost_format_syntax.escape_sequences">
    <title>エスケープシーケンス</title>
    <para>
      エスケープ文字の直後に文字 <replaceable>x</replaceable> が続いている場合、<replaceable>x</replaceable> が以下のエスケープシーケンス以外であればその文字を出力する。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>エスケープ</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-format">\a</phrase></td>
	  <td>ベル文字 ‘\a’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\e</phrase></td>
	  <td>ANSI エスケープ文字（コードポイント 27）を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\f</phrase></td>
	  <td>フォームフィード文字 ‘\f’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\n</phrase></td>
	  <td>改行文字 ‘\n’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\r</phrase></td>
	  <td>復改文字 ‘\r’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\t</phrase></td>
	  <td>タブ文字 ‘\t’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\v</phrase></td>
	  <td>垂直タブ文字 ‘\v’ を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\xDD</phrase></td>
	  <td>16 進数コードポイントが 0xDD である文字を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\x{DDDD}</phrase></td>
	  <td>16 進数コードポイントが 0xDDDD である文字を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\cX</phrase></td>
	  <td>ANSI エスケープシーケンス “escape-X” を出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\D</phrase></td>
	  <td><replaceable>D</replaceable> が範囲 1-9 の 10 進数字であれば、部分式 <replaceable>D</replaceable> にマッチしたテキストを出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\l</phrase></td>
	  <td>次に出力する 1 文字を小文字で出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\u</phrase></td>
	  <td>次に出力する 1 文字を大文字で出力する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\L</phrase></td>
	  <td>以降 <phrase role="regex-format">\E</phrase> が現れるまで、出力する文字をすべて小文字にする。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\U</phrase></td>
	  <td>以降 <phrase role="regex-format">\E</phrase> が現れるまで、出力する文字をすべて大文字にする。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-format">\E</phrase></td>
	  <td><phrase role="regex-format">\L</phrase> および <phrase role="regex-format">\U</phrase> シーケンスを終了する。</td>
	</tr>
      </tbody>
    </informaltable>
  </sect4>
</section>
