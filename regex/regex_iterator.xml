<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.regex_iterator">
  <title>regex_iterator</title>
  <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>]]></programlisting>
  <para>
    イテレータ型 <classname linkend="ref.regex_iterator">regex_iterator</classname> はシーケンス中で見つかった正規表現マッチをすべて列挙する。<classname linkend="ref.regex_iterator">regex_iterator</classname> を逆参照すると <classname linkend="ref.match_results">match_results</classname> オブジェクトへの参照が得られる。
  </para>
  <programlisting language="C++">template &lt;class BidirectionalIterator,
          class charT = iterator_traits&lt;BidirectionalIterator&gt;::value_type,
          class traits = regex_traits&lt;charT&gt; &gt;
class regex_iterator
{
public:
   typedef          basic_regex&lt;charT, traits&gt;                              regex_type;
   typedef          match_results&lt;BidirectionalIterator&gt;                    value_type;
   typedef typename iterator_traits&lt;BidirectionalIterator&gt;::difference_type difference_type;
   typedef          const value_type*                                       pointer;
   typedef          const value_type&amp;                                       reference;
   typedef          std::forward_iterator_tag                               iterator_category;

   <methodname linkend="ref.regex_iterator.construct1">regex_iterator</methodname>();
   <methodname linkend="ref.regex_iterator.construct2">regex_iterator</methodname>(BidirectionalIterator a, BidirectionalIterator b,
                  const regex_type&amp; re,
                  match_flag_type m = match_default);
   <methodname linkend="ref.regex_iterator.construct3">regex_iterator</methodname>(const regex_iterator&amp;);
   regex_iterator&amp; <methodname linkend="ref.regex_iterator.assign">operator=</methodname>(const regex_iterator&amp;);
   bool <methodname linkend="ref.regex_iterator.op_eq">operator==</methodname>(const regex_iterator&amp;)const;
   bool <methodname linkend="ref.regex_iterator.op_ne">operator!=</methodname>(const regex_iterator&amp;)const;
   const value_type&amp; <methodname linkend="ref.regex_iterator.op_deref">operator*</methodname>()const;
   const value_type* <methodname linkend="ref.regex_iterator.op_arrow">operator-&gt;</methodname>()const;
   regex_iterator&amp; <methodname linkend="ref.regex_iterator.op_inc">operator++</methodname>();
   regex_iterator <methodname linkend="ref.regex_iterator.op_inc2">operator++</methodname>(int);
};

typedef regex_iterator&lt;const char*&gt;                  cregex_iterator;
typedef regex_iterator&lt;std::string::const_iterator&gt;  sregex_iterator;

#ifndef BOOST_NO_WREGEX
typedef regex_iterator&lt;const wchar_t*&gt;               wcregex_iterator;
typedef regex_iterator&lt;std::wstring::const_iterator&gt; wsregex_iterator;
#endif

template &lt;class charT, class traits&gt; regex_iterator&lt;const charT*, charT, traits&gt;
   <methodname linkend="ref.regex_iterator.make">make_regex_iterator</methodname>(const charT* p, const basic_regex&lt;charT, traits&gt;&amp; e,
                       regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits, class ST, class SA&gt;
regex_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt;
   <methodname linkend="ref.regex_iterator.make">make_regex_iterator</methodname>(const std::basic_string&lt;charT, ST, SA&gt;&amp; p,
                       const basic_regex&lt;charT, traits&gt;&amp; e,
                       regex_constants::match_flag_type m = regex_constants::match_default);</programlisting>

  <sect4 xml:id="ref.regex_iterator.description">
    <title>説明</title>

    <orderedlist>
      <listitem xml:id="ref.regex_iterator.construct1">
	<para>
	  <classname linkend="ref.regex_iterator">regex_iterator</classname> はイテレータの組で構築され、イテレータ範囲の正規表現マッチをすべて列挙する。
	</para>
	<constructorsynopsis language="C++">
	  <methodname>regex_iterator</methodname>
	  <void/>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンスの終了を指す <classname linkend="ref.regex_iterator">regex_iterator</classname> を構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.construct2">
	<constructorsynopsis language="C++">
	  <methodname>regex_iterator</methodname>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>a</parameter>
	  </methodparam>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>b</parameter>
	  </methodparam>
	  <methodparam>
	    <type>const regex_type&amp;</type>
	    <parameter>re</parameter>
	  </methodparam>
	  <methodparam>
	    <type>match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>match_default</initializer>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンス [a,b) 内で正規表現 <parameter>re</parameter> と <type linkend="ref.match_flag_type">match_flag_type</type> <parameter>m</parameter> を使って見つかるすべてのマッチを列挙する <classname linkend="ref.regex_iterator">regex_iterator</classname> を構築する。オブジェクト <parameter>re</parameter> は <classname linkend="ref.regex_iterator">regex_iterator</classname> の生涯にわたって存在していなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.construct3">
	<constructorsynopsis language="C++">
	  <methodname>regex_iterator</methodname>
	  <methodparam>
	    <type>const regex_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<parameter>that</parameter> のコピーを構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		<code language="C++">*this == that</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.assign">
	<methodsynopsis language="C++">
	  <type>regex_iterator&amp;</type>
	  <methodname>operator=</methodname>
	  <methodparam>
	    <type>const regex_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code> を <parameter>that</parameter> と等価にする。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		<code language="C++">*this == that</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_eq">
	<methodsynopsis language="C++">
	  <type>bool</type>
	  <methodname>operator==</methodname>
	  <methodparam>
	    <type>const regex_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code> を <parameter>that</parameter> が等価であれば真を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_ne">
	<methodsynopsis language="C++">
	  <type>bool</type>
	  <methodname>operator!=</methodname>
	  <methodparam>
	    <type>const regex_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">!(*this == that)</code> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_deref">
	<methodsynopsis language="C++">
	  <type>const value_type&amp;</type>
	  <methodname>operator*</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<classname linkend="ref.regex_iterator">regex_iterator</classname> の逆参照は <classname linkend="ref.match_results">match_results</classname> オブジェクトへの参照である。そのメンバは次のとおりである。
	      </para>
	      <informaltable>
		<thead>
		  <tr>
		    <th>要素</th>
		    <th>値</th>
		  </tr>
		</thead>
		<tbody>
		  <tr>
		    <td><code language="C++">(*it).size()</code></td>
		    <td><code language="C++">1 + re.mark_count()</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).empty()</code></td>
		    <td><constant>false</constant></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).prefix().first</code></td>
		    <td>最後に見つかったマッチの終端。最初の列挙の場合は対象シーケンスの先頭。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).prefix().last</code></td>
		    <td>見つかったマッチの先頭と同じ。<code language="C++">(*it)[0].first</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).prefix().matched</code></td>
		    <td>マッチ全体より前の部分が空文字列でなければ真。<code language="C++">(*it).prefix().first != (*it).prefix().second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).suffix().first</code></td>
		    <td>見つかったマッチの終端と同じ。<code language="C++">(*it)[0].second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).suffix().last</code></td>
		    <td>対象シーケンスの終端。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).suffix().matched</code></td>
		    <td>マッチ全体より後ろの部分が空文字列でなければ真。<code language="C++">(*it).suffix().first != (*it).suffix().second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[0].first</code></td>
		    <td>正規表現にマッチした文字シーケンスの先頭。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[0].second</code></td>
		    <td>正規表現にマッチした文字シーケンスの終端。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[0].matched</code></td>
		    <td>完全マッチが見つかった場合は真、（<constant>match_partial</constant> フラグを設定した結果）部分マッチが見つかった場合は偽。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[n].first</code></td>
		    <td><code language="C++">n &lt; (*it).size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの先頭。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合はlast。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[n].second</code></td>
		    <td><code language="C++">n &lt; (*it).size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの終端。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合はlast。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it)[n].matched</code></td>
		    <td><code language="C++">n &lt; (*it).size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> がマッチした場合は真、それ以外は偽。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">(*it).position(n)</code></td>
		    <td><code language="C++">n &lt; (*it).size()</code> であるすべての整数について、対象シーケンスの先頭から部分式 <replaceable>n</replaceable> の先頭までの距離。</td>
		  </tr>
		</tbody>
	      </informaltable>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_arrow">
	<methodsynopsis language="C++">
	  <type>const value_type*</type>
	  <methodname>operator-&gt;</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">&amp;(*this)</code> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_inc">
	<methodsynopsis language="C++">
	  <type>regex_iterator&amp;</type>
	  <methodname>operator++</methodname>
	  <void/>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		イテレータを対象シーケンス中の次のマッチに移動する。何も見つからない場合はシーケンスの終端に移動する。最後のマッチが長さ 0 の文字列へのマッチである場合は、<classname linkend="ref.regex_iterator">regex_iterator</classname> は以下の要領で次のマッチを検索する。非 0 長のマッチが最後のマッチと同じ位置から始まっている場合は、そのマッチを返す。それ以外の場合は次のマッチ（再び長さが 0 ということもありうる）を最後のマッチの 1 つ右の位置から検索する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.op_inc2">
	<methodsynopsis language="C++">
	  <type>regex_iterator</type>
	  <methodname>operator++</methodname>
	  <methodparam>
	    <type>int</type>
	    <parameter/>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		戻り値用に <code language="C++">*this</code> のコピーを構築した後、<code language="C++">++(*this)</code> を呼び出す。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		結果。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_iterator.make">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_iterator&lt;const charT*, charT, traits&gt; <function>make_regex_iterator</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits, class ST, class SA>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt; <function>make_regex_iterator</function></funcdef>
	    <paramdef>
	      <type>const std::basic_string&lt;charT, ST, SA&gt;&amp;</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type>const basic_regex&lt;charT, traits&gt;&amp;</type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		式 <parameter>e</parameter> と <type linkend="ref.match_flag_type">match_flag_type</type> <parameter>m</parameter> を用いてテキスト <parameter>p</parameter> 中で見つかるすべてのマッチを列挙するイテレータを返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.regex_iterator.examples">
    <title>使用例</title>
    <para>
      次の例は C++ ソースファイルを受け取り、クラス名とそのクラスのファイル内での位置を含んだ索引を作成する。
    </para>
    <programlisting language="C++"><![CDATA[#include <string>
#include <map>
#include <fstream>
#include <iostream>
#include <boost/regex.hpp>

using namespace std;

// 目的：
// ファイルの内容を 1 つの文字列として受け取り
// C++ クラス定義をすべて検索し、それらの位置を
// 文字列対整数の辞書に保存する。

typedef std::map<std::string, std::string::difference_type, std::less<std::string> > map_type;

const char* re =
   // 前に空白があってもよい：
   "^[[:space:]]*"
   // テンプレート宣言があってもよい：
   "(template[[:space:]]*<[^;:{]+>[[:space:]]*)?"
   // class か struct：
   "(class|struct)[[:space:]]*"
   // declspec マクロなど：
   "("
      "\\<\\w+\\>"
      "("
         "[[:blank:]]*\\([^)]*\\)"
      ")?"
      "[[:space:]]*"
   ")*"
   // クラス名
   "(\\<\\w*\\>)[[:space:]]*"
   // テンプレート特殊化引数
   "(<[^;:{]+>)?[[:space:]]*"
   // { か : で終了
   "(\\{|:[^;\\{()]*\\{)";

boost::regex expression(re);
map_type class_index;

bool regex_callback(const boost::match_results<std::string::const_iterator>& what)
{
   // what[0] には文字列全体が入り
   // what[5] にはクラス名が入る。
   // what[6] にはテンプレートの特殊化が入る（あれば）。
   // クラス名と位置を辞書に入れる：
   class_index[what[5].str() + what[6].str()] = what.position(5);
   return true;
}

void load_file(std::string& s, std::istream& is)
{
   s.erase();
   s.reserve(is.rdbuf()->in_avail());
   char c;
   while(is.get(c))
   {
      if(s.capacity() == s.size())
         s.reserve(s.capacity() * 3);
      s.append(1, c);
   }
}

int main(int argc, const char** argv)
{
   std::string text;
   for(int i = 1; i < argc; ++i)
   {
      cout << "次のファイルを処理中 " << argv[i] << endl;
      std::ifstream fs(argv[i]);
      load_file(text, fs);
      // イテレータを構築しておく：
      boost::sregex_iterator m1(text.begin(), text.end(), expression);
      boost::sregex_iterator m2;
      std::for_each(m1, m2, &regex_callback);
      // 結果をコピーする：
      cout << class_index.size() << " 個のマッチが見つかりました" << endl;
      map_type::iterator c, d;
      c = class_index.begin();
      d = class_index.end();
      while(c != d)
      {
         cout << "クラス \"" << (*c).first << "\" が次の位置で見つかりました：" << (*c).second << endl;
         ++c;
      }
      class_index.erase(class_index.begin(), class_index.end());
   }
   return 0;
}]]></programlisting>
  </sect4>
</section>
