<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.internal_details.uni_iter">
  <title>Unicode イテレータ</title>

  <sect4 xml:id="ref.internal_details.uni_iter.synopsis">
    <title>概要</title>
    <programlisting language="C++"><![CDATA[#include <boost/regex/pending/unicode_iterator.hpp>]]></programlisting>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator, class U16Type = ::boost::uint16_t>]]></modifier>
	<classname>u32_to_u16_iterator</classname>
      </ooclass>
    </classsynopsis>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator, class U32Type = ::boost::uint32_t>]]></modifier>
	<classname>u16_to_u32_iterator</classname>
      </ooclass>
    </classsynopsis>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator, class U8Type = ::boost::uint8_t>]]></modifier>
	<classname>u32_to_u8_iterator</classname>
      </ooclass>
    </classsynopsis>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator, class U32Type = ::boost::uint16_t>]]></modifier>
	<classname>u8_to_u32_iterator</classname>
      </ooclass>
    </classsynopsis>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator>]]></modifier>
	<classname>utf16_output_iterator</classname>
      </ooclass>
    </classsynopsis>
    <classsynopsis language="C++">
      <ooclass>
	<modifier><![CDATA[template <class BaseIterator>]]></modifier>
	<classname>utf8_output_iterator</classname>
      </ooclass>
    </classsynopsis>
  </sect4>

  <sect4 xml:id="ref.internal_details.uni_iter.description">
    <title>説明</title>
    <para>
      このヘッダに含まれるのは、あるエンコーディングの文字シーケンスを別のエンコーディングの読み取り専用文字シーケンス「のように見せる」イテレータアダプタ群である。
    </para>

    <orderedlist>
      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator, class U16Type = ::boost::uint16_t>
class u32_to_u16_iterator
{
   u32_to_u16_iterator();
   u32_to_u16_iterator(BaseIterator start_position);

   // 他の標準双方向イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-32 文字シーケンスを（読み取り専用の）UTF-16 文字シーケンスに変換する双方向イテレータアダプタである。UTF-16 文字はプラットフォーム標準のバイト順で符号化する。
	</para>
      </listitem>

      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator, class U32Type = ::boost::uint32_t>
class u16_to_u32_iterator
{
   u16_to_u32_iterator();
   u16_to_u32_iterator(BaseIterator start_position);
   u16_to_u32_iterator(BaseIterator start_position, BaseIterator start_range, BaseIterator end_range);

   // 他の標準双方向イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-16 文字シーケンス（バイト順はプラットフォーム標準）を（読み取り専用の）UTF-32 文字シーケンスに変換する双方向イテレータアダプタである。
	</para>
	<para>
	  このクラスの 3 引数のコンストラクタは、元のシーケンスの開始・終了とともに走査開始位置を取る。このコンストラクタは元のシーケンスの終端が正しく符号化されているか確認する。これにより、元の範囲の終端に不正な UTF-16 コードシーケンスがあった場合にシーケンスの終端を越えて誤って前進・後退するのを防止する。
	</para>
      </listitem>

      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator, class U8Type = ::boost::uint8_t>
class u32_to_u8_iterator
{
   u32_to_u8_iterator();
   u32_to_u8_iterator(BaseIterator start_position);

   // 他の標準双方向イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-32 文字シーケンスを（読み取り専用の）UTF-8 文字シーケンスに変換する双方向イテレータアダプタである。
	</para>
      </listitem>

      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator, class U32Type = ::boost::uint32_t>
class u8_to_u32_iterator
{
   u8_to_u32_iterator();
   u8_to_u32_iterator(BaseIterator start_position);
   u8_to_u32_iterator(BaseIterator start_position, BaseIterator start_range, BaseIterator end_range);

   // 他の標準双方向イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-8 文字シーケンスを（読み取り専用の）UTF-32 文字シーケンスに変換する双方向イテレータアダプタである。
	</para>
	<para>
	  このクラスの 3 引数のコンストラクタは、元のシーケンスの開始・終了とともに走査開始位置を取る。このコンストラクタは元のシーケンスの終端が正しく符号化されているか確認する。これにより、元の範囲の終端に不正な UTF-8 コードシーケンスがあった場合にシーケンスの終端を越えて誤って前進・後退するのを防止する。
	</para>
      </listitem>

      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator>
class utf16_output_iterator
{
   utf16_output_iterator(const BaseIterator& b);
   utf16_output_iterator(const utf16_output_iterator& that);
   utf16_output_iterator& operator=(const utf16_output_iterator& that);

   // 他の標準出力イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-32 値を入力として受け取り、<type>BaseIterator</type> <parameter>b</parameter> にUTF-16 で出力する単純な出力イテレータアダプタである。UTF-32 および UTF-16 値はプラットフォーム標準のバイト順でなければならない。
	</para>
      </listitem>

      <listitem>
	<programlisting language="C++"><![CDATA[template <class BaseIterator>
class utf8_output_iterator
{
   utf8_output_iterator(const BaseIterator& b);
   utf8_output_iterator(const utf8_output_iterator& that);
   utf8_output_iterator& operator=(const utf8_output_iterator& that);

   // 他の標準出力イテレータのメンバが続く...
};]]></programlisting>
	<para>
	  UTF-32 値を入力として受け取り、<type>BaseIterator</type> <parameter>b</parameter> に UTF-8 で出力する単純な出力イテレータアダプタである。UTF-32 入力値はプラットフォーム標準のバイト順でなければならない。
	</para>
      </listitem>
    </orderedlist>
  </sect4>
</section>
