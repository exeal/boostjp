<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.concepts">
  <title>コンセプト</title>

  <section xml:id="ref.concepts.charT_concept">
    <title>charT の要件</title>
    <para>
      <classname linkend="ref.basic_regex">basic_regex</classname> テンプレートクラスのテンプレート引数で使用する型 <type>charT</type> は、自明なデフォルトコンストラクタ、コピーコンストラクタ、代入演算子およびデストラクタを持たなければならない。加えてオブジェクトについては以下の要件を満足しなければならない。以下の表では <type>charT</type> 型の <varname>c</varname> 、<type>charT const</type> 型の <varname>c1</varname> および <varname>c2</varname> 、<type>int</type> 型の <varname>i</varname> を用いる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>式</th>
	  <th>戻り値の型</th>
	  <th>表明、注釈、事前・事後条件</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><code language="C++">charT c</code></td>
	  <td><type>charT</type></td>
	  <td>デフォルトコンストラクタ（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">charT c(c1)</code></td>
	  <td><type>charT</type></td>
	  <td>コピーコンストラクタ（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 = c2</code></td>
	  <td><type>charT</type></td>
	  <td>代入演算子（自明でなければならない）。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 == c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> と <varname>c2</varname> の値が同じであれば真。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 != c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> と <varname>c2</varname> が同値でなければ真。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &lt; c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> の値が <varname>c2</varname> よりも小さければ真。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &gt; c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> の値が <varname>c2</varname> よりも大きければ真。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &lt;= c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> が <varname>c2</varname> 以下であれば真。</td>
	</tr>
	<tr>
	  <td><code language="C++">c1 &gt;= c2</code></td>
	  <td><type>bool</type></td>
	  <td><varname>c1</varname> が <varname>c2</varname> 以上であれば真。</td>
	</tr>
	<tr>
	  <td><code language="C++">intmax_t i = c1</code></td>
	  <td><type>int</type></td>
	  <td>
	    <para>
	      <type>charT</type> は整数型に変換可能でなければならない。
	    </para>
	    <para>
	      注意：特性クラスが最小限の標準インターフェイスではなく Boost 固有のフルインターフェイスをサポートする場合は、<type>charT</type> 型はこの操作をサポートする必要はない（後述の特性クラスの要件を見よ）。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><code language="C++">charT c(i);</code></td>
	  <td><type>charT</type></td>
	  <td><type>charT</type> は整数型から構築可能でなければならない。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="ref.concepts.traits_concept">
    <title>特性クラスの要件</title>
    <para>
      <classname linkend="ref.basic_regex">basic_regex</classname> の <type>traits</type> テンプレート引数に対しては要件のセットが 2 つある。最小限のインターフェイス（正規表現標準草案の一部）と、オプションの Boost 固有強化インターフェイスである。
    </para>

    <sect4 xml:id="ref.concepts.traits_concept.minimal_requirements_">
      <title>最小限の要件</title>
      <para>
	以下の表において <classname>X</classname> は <type>charT</type> 型の文字コンテナについて型と関数を定義する特性クラスを表す。<varname>u</varname> は <classname>X</classname> 型のオブジェクト、<varname>v</varname> は <type>const X</type> 型のオブジェクト、<varname>p</varname> は <type>const charT*</type> 型の値、<varname>I1</varname> および <varname>I2</varname> は入力イテレータ、<varname>c</varname> は <type>const charT</type> 型の値、<varname>s</varname> は型 <type>X::string_type</type> のオブジェクト、<varname>cs</varname> は型 <type>const X::string_type</type> のオブジェクト、<varname>b</varname> は <type>bool</type> 型の値、<varname>I</varname> は <type>int</type> 型の値、<varname>F1</varname> および <varname>F2</varname> は <type>const charT*</type> 型の値、<varname>loc</varname> は <type>X::locale_type</type> 型のオブジェクトである。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>式</th>
	    <th>戻り値の型</th>
	    <th>表明、注釈、事前・事後条件</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><code language="C++">X::char_type</code></td>
	    <td><type>charT</type></td>
	    <td><classname>basic_regex</classname> クラステンプレートを実装する文字コンテナ型。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">X::size_type</code></td>
	    <td>-</td>
	    <td><type>charT</type> の null 終端文字列の長さを保持可能な符号なし整数型。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">X::string_type</code></td>
	    <td><type>std::basic_string&lt;charT&gt;</type> か <type>std::vector&lt;charT&gt;</type></td>
	    <td>なし。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">X::locale_type</code></td>
	    <td>（実装定義）</td>
	    <td>特性クラスが使用するロカールを表現する、コピー構築可能な型。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">X::char_class_type</code></td>
	    <td>（実装定義）</td>
	    <td>個々の文字分類（文字クラス）を表現するビットマスク型。この型の複数の値をビット和すると別の有効な値を得る。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">X::length(p)</code></td>
	    <td><type>X::size_type</type></td>
	    <td><code language="C++">p[i] == 0</code> である最小の <varname>i</varname> を返す。計算量は <varname>i</varname> に対して線形である。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.translate(c)</code></td>
	    <td><type>X::char_type</type></td>
	    <td><varname>c</varname> と等価、つまり <code language="C++">v.translate(c) == v.translate(d)</code> となるような文字 <varname>d</varname> を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.translate_nocase(c)</code></td>
	    <td><type>X::char_type</type></td>
	    <td>大文字小文字を区別せずに比較した場合に <varname>c</varname> と等価、つまり <code language="C++">v.translate_nocase(c) == v.translate_nocase(C)</code> となるような文字 <varname>C</varname> を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.transform(F1, F2)</code></td>
	    <td><type>X::string_type</type></td>
	    <td>イテレータ範囲 [F1, F2) が示す文字シーケンスのソートキーを返す。文字シーケンス [G1, G2) が文字シーケンス [H1, H2) の前にソートされる場合に <code language="C++">v.transform(G1, G2) &lt; v.transform(H1, H2)</code> とならなければならない。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.transform_primary(F1, F2)</code></td>
	    <td><type>X::string_type</type></td>
	    <td>イテレータ範囲 [F1, F2) が示す文字シーケンスのソートキーを返す。大文字小文字を区別せずにソートして文字シーケンス [G1, G2) が文字シーケンス [H1, H2) の前に現れる場合に <code language="C++">v.transform_primary(G1, G2) &lt; v.transform_primary(H1, H2)</code> とならなければならない。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.lookup_classname(F1, F2)</code></td>
	    <td><type>X::char_class_type</type></td>
	    <td>イテレータ範囲 [F1, F2) が示す文字シーケンスを、<methodname>isctype</methodname> に渡せるビットマスク型に変換する。<methodname>lookup_classname</methodname> が返した値同士でビット和をとっても安全である。文字シーケンスが <classname>X</classname> が解釈できる文字クラス名でなければ 0 を返す。文字シーケンス内の大文字小文字の違いで戻り値が変化することはない。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.lookup_collatename(F1, F2)</code></td>
	    <td><type>X::string_type</type></td>
	    <td>イテレータ範囲 [F1, F2) が示す文字シーケンスが構成する照合要素を表す文字シーケンスを返す。文字シーケンスが正しい照合要素でなければ空文字列を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.isctype(c, v.lookup_classname(F1, F2))</code></td>
	    <td><type>bool</type></td>
	    <td>文字 <varname>c</varname> が、イテレータ範囲 [F1, F2) が示す文字クラスのメンバであれば真を返す。それ以外は偽を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.value(c, I)</code></td>
	    <td><type>int</type></td>
	    <td>
	      文字 <varname>c</varname> が基数 <varname>I</varname> で有効な数字であれば、数字cの基数 <varname>I</varname> での数値を返す。
	      <footnote>
		<para>
		  <varname>I</varname> の値は 8 、10 、16 のいずれかである。
		</para>
	      </footnote>
	      それ以外の場合は -1 を返す。
	    </td>
	  </tr>
	  <tr>
	    <td><code language="C++">u.imbue(loc)</code></td>
	    <td><type>X::locale_type</type></td>
	    <td>ロカール <varname>loc</varname> を <varname>u</varname> に指示する。<varname>u</varname> が直前まで使用していたロカールを返す（あれば）。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.getloc()</code></td>
	    <td><type>X::locale_type</type></td>
	    <td><varname>v</varname> が使用中のロカールを返す（あれば）。</td>
	  </tr>
	</tbody>
      </informaltable>
    </sect4>

    <sect4 xml:id="ref.concepts.traits_concept.additional_optional_requirements">
      <title>オプションの追加要件</title>
      <para>
	以下の追加要件は厳密にはオプションである。しかしながら <classname linkend="ref.basic_regex">basic_regex</classname> でこれらの追加インターフェイスを利用するには、以下の要件をすべて満たさなければならない。<classname linkend="ref.basic_regex">basic_regex</classname> はメンバ <type>boost_extensions_tag</type> の有無を検出し、自身を適切に構成する。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>式</th>
	    <th>結果</th>
	    <th>表明、注釈、事前・事後条件</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><code language="C++">X::boost_extensions_tag</code></td>
	    <td>型の指定はない。</td>
	    <td>与えられている場合、この表にある拡張がすべて与えられていなければならない。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.syntax_type(c)</code></td>
	    <td><type>regex_constants::syntax_type</type></td>
	    <td>正規表現文法における文字 <varname>c</varname> の意味を表す <type>regex_constants::syntax_type</type> 型のシンボル値を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.escape_syntax_type(c)</code></td>
	    <td><type>regex_constants::syntax_type</type></td>
	    <td>正規表現文法において、<varname>c</varname> の前にエスケープ文字がある場合（式中で文字 <varname>c</varname> の直前に文字 <varname>b</varname> がある場合 <code language="C++">v.syntax_type(b) == syntax_escape</code> の文字 <varname>c</varname> の意味を表す <type>regex_constants::escape_syntax_type</type> 型のシンボル値を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.translate(c, b)</code></td>
	    <td><type>X::char_type</type></td>
	    <td><varname>c</varname> と等価、つまり <code language="C++">v.translate(c, false) == v.translate(d, false)</code> となる文字 <varname>d</varname> を返す。あるいは大文字小文字を区別せずに比較した場合に等価、つまり <code language="C++">v.translate(c, true) == v.translate(C, true)</code> となる文字 <varname>C</varname> を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.toi(I1, I2, I)</code></td>
	    <td><type>charT</type> か <type>int</type> を保持可能な整数型。</td>
	    <td><code language="C++">I1 == I2</code> か <code language="C++">*I1</code> が数字でなければ -1 を返す。それ以外の場合はシーケンス [I1, I2) に入力数値書式化処理を行い、結果を <type>int</type> で返す。事後条件：<code language="C++">I1 == I2</code> か <code language="C++">*I1</code> が数字以外のいずれか。
</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.error_string(I)</code></td>
	    <td><type>std::string</type></td>
	    <td>エラー状態 <varname>I</varname> の可読性の高いエラー文字列を返す。<varname>I</varname> は <type>regex_constants::error_type</type> 型が列挙する値のいずれかである。値 <varname>I</varname> が解釈不能な場合は、文字列 “Unknown error” か同じ意味の地域化文字列を返す。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.tolower(c)</code></td>
	    <td><type>X::char_type</type></td>
	    <td><varname>c</varname> を小文字に変換する。Perl スタイルの <phrase role="regex-pattern">\l</phrase> および <phrase role="regex-pattern">\L</phrase> 書式化処理で使用する。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">v.toupper(c)</code></td>
	    <td><type>X::char_type</type></td>
	    <td><varname>c</varname> を大文字に変換する。Perl スタイルの <phrase role="regex-pattern">\u</phrase> および <phrase role="regex-pattern">\U</phrase> 書式化処理で使用する。</td>
	  </tr>
	</tbody>
      </informaltable>
    </sect4>
  </section>

  <section xml:id="ref.concepts.iterator_concept">
    <title>イテレータの要件</title>
    <para>
      正規表現アルゴリズム（およびイテレータ）は、すべて双方向イテレータの要件を満たす。
    </para>
  </section>
</section>
