<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.match_flag_type">
  <title>match_flag_type</title>
  <para>
    <type>match_flag_type</type> 型は実装固有のビットマスク型（C++ 標準 17.3.2.1.2）で、正規表現の文字シーケンスに対するマッチ方法を制御する。書式化フラグの動作は<link linkend="format">書式化構文ガイド</link>に詳細を記述する。
  </para>
  <programlisting language="C++">namespace boost{ namespace regex_constants{

typedef <replaceable>implemenation-specific-bitmask-type</replaceable> match_flag_type;

static const match_flag_type match_default = 0;
static const match_flag_type match_not_bob;
static const match_flag_type match_not_eob;
static const match_flag_type match_not_bol;
static const match_flag_type match_not_eol;
static const match_flag_type match_not_bow;
static const match_flag_type match_not_eow;
static const match_flag_type match_any;
static const match_flag_type match_not_null;
static const match_flag_type match_continuous;
static const match_flag_type match_partial;
static const match_flag_type match_single_line;
static const match_flag_type match_prev_avail;
static const match_flag_type match_not_dot_newline;
static const match_flag_type match_not_dot_null;
static const match_flag_type match_posix;
static const match_flag_type match_perl;
static const match_flag_type match_nosubs;
static const match_flag_type match_extra;
static const match_flag_type format_default = 0;
static const match_flag_type format_sed;
static const match_flag_type format_perl;
static const match_flag_type format_literal;
static const match_flag_type format_no_copy;
static const match_flag_type format_first_only;
static const match_flag_type format_all;

} // namespace regex_constants
} // namespace boost</programlisting>

  <sect4 xml:id="ref.match_flag_type.description">
    <title>説明</title>
    <para>
      <type>match_flag_type</type> 型は実装固有のビットマスク型（C++ 標準 17.3.2.1.2）である。文字シーケンス [first, last) に対して正規表現マッチを行うとき、各要素を設定した場合の効果を以下の表に示す。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>match_default</constant></td>
	  <td>正規表現マッチを ECMA-262, ECMAScript Language Specification, Chapter 15 part 10, RegExp (Regular Expression) Objects (FWD.1) で使用されている通常の規則にそのまま従うことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_bob</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">\A</phrase> および <phrase role="regex-pattern">\`</phrase> が部分シーケンス [first,first) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_eob</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">\'</phrase> 、<phrase role="regex-pattern">\z</phrase> および <phrase role="regex-pattern">\Z</phrase> が部分シーケンス [last,last) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_bol</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">^</phrase> が部分シーケンス [first,first) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_eol</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">$</phrase> が部分シーケンス [last,last) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_bow</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">\&lt;</phrase> および <phrase role="regex-pattern">\b</phrase> が部分シーケンス [first,first) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_not_eow</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">\&gt;</phrase> および <phrase role="regex-pattern">\b</phrase> が部分シーケンス [last,last) にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_any</constant></td>
	  <td>複数のマッチが可能な場合に、それらのいずれでも結果として適合することを指定する。結果が最左マッチとなることには変わりないが、当該位置における最良マッチは保証されない。何がマッチするかよりも速度を優先する場合（マッチがあるかないかのみを調べる場合）にこのフラグを使用するとよい。</td>
	</tr>
	<tr>
	  <td><constant>match_not_null</constant></td>
	  <td>正規表現が空のシーケンスにマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_continuous</constant></td>
	  <td>正規表現が、先頭から始まる部分シーケンスにのみマッチすることを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_partial</constant></td>
	  <td>マッチが見つからない場合に <code language="C++">from != last</code> であるマッチ [from, last) を結果として返すことを指定する（[from,last] を接頭辞とするより長い文字シーケンス [from,to) が完全マッチの結果として存在する可能性がある場合）。テキストが不完全であるか非常に長い場合に、このフラグを使用するとよい。詳細は部分マッチの項を見よ。</td>
	</tr>
	<tr>
	  <td><constant>match_extra</constant></td>
	  <td>有効な捕捉情報をすべて格納するように正規表現エンジンに指示する。捕捉グループが繰り返しになっている場合、<methodname>match_results::captures()</methodname> および <methodname>sub_match::captures()</methodname> を用いて各繰り返しに対する情報にアクセスできる。</td>
	</tr>
	<tr>
	  <td><constant>match_single_line</constant></td>
	  <td>Perl の m 修飾子の反転と同様で、<phrase role="regex-pattern">^</phrase> が組み込みの改行文字の直後に、<phrase role="regex-pattern">$</phrase> が組み込みの改行文字の直前にマッチしないことを指定する（よって、この 2 つのアンカーはそれぞれマッチ対象テキストの先頭、終端にのみマッチする）。</td>
	</tr>
	<tr>
	  <td><constant>match_prev_avail</constant></td>
	  <td>
	    <code language="C++">--first</code> が合法なイテレータ位置であることを指定する。このフラグを設定した場合、正規表現アルゴリズム（RE.7）およびイテレータ（RE.8）はフラグ <constant>match_not_bol</constant> と <constant>match_not_bow</constant> を無視する。
	    <footnote>
	      <para>
		訳注　“RE.n” は N1429 の節番号（<uri xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2003/n1429.htm</uri>）。
	      </para>
	    </footnote>
	  </td>
	</tr>
	<tr>
	  <td><constant>match_not_dot_newline</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">.</phrase> が改行文字にマッチしないことを指定する。Perl の s 修飾子の反転と同じである。</td>
	</tr>
	<tr>
	  <td><constant>match_not_dot_null</constant></td>
	  <td>正規表現 <phrase role="regex-pattern">.</phrase> が null 文字 <phrase role="regex-input">\0</phrase> にマッチしないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_posix</constant></td>
	  <td>コンパイル済み正規表現の種類に関わらず、POSIX の<link linkend="syntax.leftmost_longest_rule">最左規則</link>にしたがって式のマッチを行うことを指定する。貪欲でない繰り返しなどの Perl 固有の多くの機能を使用する場合、これらの規則は正しく動作しないことに注意していただきたい。</td>
	</tr>
	<tr>
	  <td><constant>match_perl</constant></td>
	  <td>コンパイル済み正規表現の種類に関わらず、<link linkend="syntax.perl_syntax.what_gets_matched">Perl のマッチ規則</link>にしたがって式のマッチを行うことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>match_nosubs</constant></td>
	  <td>実際に捕捉グループが与えられていても、マーク済み部分式が存在しないとして正規表現を扱う。<classname linkend="ref.match_results">match_results</classname> クラスにはマッチ全体に関する情報のみ含まれ、部分式については記録されない。</td>
	</tr>
	<tr>
	  <td><constant>format_default</constant></td>
	  <td>
	    <para>
	      正規表現マッチを新文字列で置換するとき、ECMA-262, ECMAScript Language Specification, Chapter 15 part 5.4.11 String.prototype.replace. (FWD.1) の ECMAScript replace 関数で使用されている規則を用いて新文字列を構築する。
	    </para>
	    <para>
	      機能的には <link linkend="format.perl_format">Perl の書式化文字列の規則</link>と等価である。
	    </para>
	    <para>
	      検索・置換操作時に指定すると、正規表現は互いに重複しない位置でマッチし、置換する。正規表現にマッチしなかったテキスト部分はそのまま出力文字列にコピーする。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><constant>format_sed</constant></td>
	  <td>正規表現マッチを新文字列で置換するとき、IEEE Std 1003.1-2001, Portable Operating SystemInterface (POSIX), Shells and UtilitiesのUnix sed ユーティリティで使用されている規則を用いて新文字列を構築する。<link linkend="format.sed_format">sed の書式化文字列リファレンス</link>も見よ。</td>
	</tr>
	<tr>
	  <td><constant>format_perl</constant></td>
	  <td>正規表現マッチを新文字列で置換するとき、<link linkend="format.perl_format">Perl 5 と同じ規則</link>を用いて新文字列を生成する。</td>
	</tr>
	<tr>
	  <td><constant>format_literal</constant></td>
	  <td>正規表現マッチを新文字列で置換するとき、置換テキストの直値コピーを新文字列とする。</td>
	</tr>
	<tr>
	  <td><constant>format_all</constant></td>
	  <td>条件置換 <phrase role="regex-pattern">(?ddexpression1:expression2)</phrase> を含むすべての構文拡張を有効にする。詳細は<link linkend="format.boost_format_syntax">書式化文字列のガイド</link>を見よ。</td>
	</tr>
	<tr>
	  <td><constant>format_no_copy</constant></td>
	  <td>検索・置換操作時に指定すると、検索対象の文字コンテナシーケンスの正規表現にマッチしない部分を出力文字列にコピーしない。</td>
	</tr>
	<tr>
	  <td><constant>format_first_only</constant></td>
	  <td>検索・置換操作時に指定すると、最初の正規表現マッチのみを置換する。</td>
	</tr>
      </tbody>
    </informaltable>
  </sect4>
</section>
