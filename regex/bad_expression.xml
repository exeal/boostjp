<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.bad_expression">
  <title>bad_expression</title>

  <sect4 xml:id="ref.bad_expression.synopsis">
    <title>概要</title>
    <programlisting language="C++"><![CDATA[#include <boost/pattern_except.hpp>]]></programlisting>
    <para>
      <classname>regex_error</classname> クラスは、正規表現を表す文字列を有限状態マシンに変換する際に発生したエラーを報告するのに投げられる例外オブジェクトの型を定義する。
    </para>
    <programlisting language="C++"><![CDATA[namespace boost{

class regex_error : public std::runtime_error
{
public:
   explicit regex_error(const std::string& s, regex_constants::error_type err, std::ptrdiff_t pos);
   explicit regex_error(boost::regex_constants::error_type err);
   boost::regex_constants::error_type code()const;
   std::ptrdiff_t position()const;
};

typedef regex_error bad_pattern; // 後方互換のため
typedef regex_error bad_expression; // 後方互換のため

} // namespace boost]]></programlisting>
  </sect4>

  <sect4 xml:id="ref.bad_expression.description">
    <title>説明</title>
    <orderedlist>
      <listitem xml:id="ref.regex_error.construct">
	<constructorsynopsis language="C++">
	  <methodname>regex_error</methodname>
	  <methodparam>
	    <type>const std::string&amp;</type>
	    <parameter>s</parameter>
	  </methodparam>
	  <methodparam>
	    <type>regex_constants::error_type</type>
	    <parameter>err</parameter>
	  </methodparam>
	  <methodparam>
	    <type>std::ptrdiff_t</type>
	    <parameter>pos</parameter>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <methodname>regex_error</methodname>
	  <methodparam>
	    <type>boost::regex_constants::error_type</type>
	    <parameter>err</parameter>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<classname>regex_error</classname> クラスのオブジェクトを構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_error.code">
	<methodsynopsis language="C++">
	  <type>boost::regex_constants::error_type</type>
	  <methodname>code</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		発生した解析エラーを表すエラーコードを返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_error.position">
	<methodsynopsis language="C++">
	  <type>std::ptrdiff_t</type>
	  <methodname>position</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		解析が停止した正規表現内の位置を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.bad_expression.footnotes">
    <title>補足</title>
    <para>
      <classname>regex_error</classname> の基本クラスに <classname>std::runtime_error</classname> を選択したことについては議論の余地がある。ライブラリの使い方という点では、例外は論理エラー（プログラマが正規表現を与える）、実行時エラー（ユーザが正規表現を与える）のいずれでもよいと考えられる。このライブラリは以前はエラーに <exceptionname>bad_pattern</exceptionname> と <exceptionname>bad_expression</exceptionname> を使っていたが、<link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf">Technical Report on C++ Library Extension</link> と同期をとるために <classname>regex_error</classname> クラスに一本化した。
    </para>
  </sect4>
</section>
