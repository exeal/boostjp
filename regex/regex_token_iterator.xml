<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.regex_token_iterator">
  <title>regex_token_iterator</title>
  <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>]]></programlisting>
  <para>
    テンプレートクラス <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> はイテレータアダプタである。すなわち、入力テキストシーケンス内の正規表現マッチをすべて検索することで既存のシーケンス（入力テキスト）に対する新しいビューを表現し、各マッチ文字シーケンスを与える。このイテレータが列挙する各位置は、正規表現中の各部分式のマッチを表す <classname linkend="ref.sub_match">sub_match</classname> オブジェクトである。<classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> クラスを使用して -1 の添字で部分式を列挙すると、イテレータはフィールド分割を行う。すなわち、指定した正規表現にマッチしない各文字コンテナシーケンスにつき 1 つの文字シーケンスを列挙する。
    <footnote>
      <para>
	訳注　-1 の添字は、後述するように実際には <classname>sub_match</classname> と同様に「前回のマッチの終端から今回のマッチの先頭まで」を表します。<classname>sub_match</classname> の項でドキュメントされていない -2 の添字についても同様ですが、奇妙な動作をするので使用しないほうが無難です。
      </para>
    </footnote>
  </para>
  <programlisting language="C++">template &lt;class BidirectionalIterator,
         class charT = iterator_traits&lt;BidirectionalIterator&gt;::value_type,
         class traits = regex_traits&lt;charT&gt; &gt;
class regex_token_iterator
{
public:
   typedef          basic_regex&lt;charT, traits&gt;                              regex_type;
   typedef          sub_match&lt;BidirectionalIterator&gt;                        value_type;
   typedef typename iterator_traits&lt;BidirectionalIterator&gt;::difference_type difference_type;
   typedef          const value_type*                                       pointer;
   typedef          const value_type&amp;                                       reference;
   typedef          std::forward_iterator_tag                               iterator_category;

   <methodname linkend="ref.regex_token_iterator.construct1">regex_token_iterator</methodname>();
   <methodname linkend="ref.regex_token_iterator.construct2">regex_token_iterator</methodname>(BidirectionalIterator a,
                        BidirectionalIterator b,
                        const regex_type&amp; re,
                        int submatch = 0,
                        match_flag_type m = match_default);
   <methodname linkend="ref.regex_token_iterator.construct3">regex_token_iterator</methodname>(BidirectionalIterator a,
                        BidirectionalIterator b,
                        const regex_type&amp; re,
                        const std::vector&lt;int&gt;&amp; submatches,
                        match_flag_type m = match_default);
   template &lt;std::size_t N&gt;
   <methodname linkend="ref.regex_token_iterator.construct4">regex_token_iterator</methodname>(BidirectionalIterator a,
                        BidirectionalIterator b,
                        const regex_type&amp; re,
                        const int (&amp;submatches)[N],
                        match_flag_type m = match_default);
   <methodname linkend="ref.regex_token_iterator.construct5">regex_token_iterator</methodname>(const regex_token_iterator&amp;);
   regex_token_iterator&amp; <methodname linkend="ref.regex_token_iterator.assign">operator=</methodname>(const regex_token_iterator&amp;);
   bool <methodname linkend="ref.regex_token_iterator.op_eq">operator==</methodname>(const regex_token_iterator&amp;)const;
   bool <methodname linkend="ref.regex_token_iterator.op_ne">operator!=</methodname>(const regex_token_iterator&amp;)const;
   const value_type&amp; <methodname linkend="ref.regex_token_iterator.op_deref">operator*</methodname>()const;
   const value_type* <methodname linkend="ref.regex_token_iterator.op_arrow">operator-&gt;</methodname>()const;
   regex_token_iterator&amp; <methodname linkend="ref.regex_token_iterator.op_inc1">operator++</methodname>();
   regex_token_iterator <methodname linkend="ref.regex_token_iterator.op_inc2">operator++</methodname>(int);
};

typedef regex_token_iterator&lt;const char*&gt;                   cregex_token_iterator;
typedef regex_token_iterator&lt;std::string::const_iterator&gt;   sregex_token_iterator;
#ifndef BOOST_NO_WREGEX
typedef regex_token_iterator&lt;const wchar_t*&gt;                wcregex_token_iterator;
typedef regex_token_iterator&lt;&lt;std::wstring::const_iterator&gt; wsregex_token_iterator;
#endif

template &lt;class charT, class traits&gt;
regex_token_iterator&lt;const charT*, charT, traits&gt;
   <methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const charT* p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         int submatch = 0,
         regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits, class ST, class SA&gt;
regex_token_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt;
   <methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const std::basic_string&lt;charT, ST, SA&gt;&amp; p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         int submatch = 0,
         regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits, std::size_t N&gt;
regex_token_iterator&lt;const charT*, charT, traits&gt;
<methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const charT* p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         const int (&amp;submatch)[N],
         regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits, class ST, class SA, std::size_t N&gt;
regex_token_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt;
   <methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const std::basic_string&lt;charT, ST, SA&gt;&amp; p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         const int (&amp;submatch)[N],
         regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits&gt;
regex_token_iterator&lt;const charT*, charT, traits&gt;
   <methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const charT* p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         const std::vector&lt;int&gt;&amp; submatch,
         regex_constants::match_flag_type m = regex_constants::match_default);

template &lt;class charT, class traits, class ST, class SA&gt;
regex_token_iterator&lt;
      typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt;
   <methodname linkend="ref.regex_token_iterator.make">make_regex_token_iterator</methodname>(
         const std::basic_string&lt;charT, ST, SA&gt;&amp; p,
         const basic_regex&lt;charT, traits&gt;&amp; e,
         const std::vector&lt;int&gt;&amp; submatch,
         regex_constants::match_flag_type m = regex_constants::match_default);</programlisting>

  <sect4 xml:id="ref.regex_token_iterator.description">
    <title>説明</title>

    <orderedlist>
      <listitem xml:id="ref.regex_token_iterator.construct1">
	<constructorsynopsis language="C++">
	  <methodname>regex_token_iterator</methodname>
	  <void/>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンスの終端を指すイテレータを構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.construct2">
	<constructorsynopsis language="C++">
	  <methodname>regex_token_iterator</methodname>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>a</parameter>
	  </methodparam>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>b</parameter>
	  </methodparam>
	  <methodparam>
	    <type>const regex_type&amp;</type>
	    <parameter>re</parameter>
	  </methodparam>
	  <methodparam>
	    <type>int</type>
	    <parameter>submatch</parameter>
	    <initializer>0</initializer>
	  </methodparam>
	  <methodparam>
	    <type>match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>match_default</initializer>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>事前条件：</term>
	    <listitem>
	      <para>
		<code language="C++">!re.empty()</code>。オブジェクト <parameter>re</parameter> はイテレータの生涯にわたって存在しなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンス [a,b) 中で、式 <parameter>re</parameter> とマッチフラグ <parameter>m</parameter>（<type linkend="ref.match_flag_type">match_flag_type</type> を見よ）で見つかる各正規表現マッチに対して文字列を 1 つずつ列挙する <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> を構築する。列挙される文字列は、見つかった各マッチに対する部分式 <replaceable>submatch</replaceable> である。<replaceable>submatch</replaceable> が -1 の場合は、式 <parameter>re</parameter> にマッチしなかったテキストシーケンスをすべて列挙する（フィールドの分割）。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.construct3">
	<constructorsynopsis language="C++">
	  <methodname>regex_token_iterator</methodname>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>a</parameter>
	  </methodparam>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>b</parameter>
	  </methodparam>
	  <methodparam>
	    <type>const regex_type&amp;</type>
	    <parameter>re</parameter>
	  </methodparam>
	  <methodparam>
	    <type><![CDATA[const std::vector<int>&]]></type>
	    <parameter>submatches</parameter>
	  </methodparam>
	  <methodparam>
	    <type>match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>match_default</initializer>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>事前条件：</term>
	    <listitem>
	      <para>
		<code language="C++">submatches.size() &amp;&amp; !re.empty()</code>。オブジェクト <parameter>re</parameter> はイテレータの生涯にわたって存在しなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンス [a,b) 中で、式 <parameter>re</parameter> とマッチフラグ <parameter>m</parameter>（<type linkend="ref.match_flag_type">match_flag_type</type> を見よ）で見つかる各正規表現マッチに対して <code language="C++">submatches.size()</code> 個の文字列を列挙する <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> を構築する。各マッチに対して、ベクタ <varname>submatches</varname> 内の添字に対応する各部分式にマッチした文字列を 1 つずつ列挙する。<code language="C++">submatches[0]</code> が -1 の場合、各マッチに対して最初に列挙する文字列は、前回のマッチの終端から今回のマッチの先頭までのテキストとなり、さらにこれ以上マッチが見つからない場合に列挙する文字列（最後のマッチの終端から対象シーケンスの終端までのテキスト）が 1 つ追加される。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.construct4">
	<constructorsynopsis language="C++">
	  <modifier><![CDATA[template <std::size_t R>]]></modifier>
	  <methodname>regex_token_iterator</methodname>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>a</parameter>
	  </methodparam>
	  <methodparam>
	    <type>BidirectionalIterator</type>
	    <parameter>b</parameter>
	  </methodparam>
	  <methodparam>
	    <type>const regex_type&amp;</type>
	    <parameter>re</parameter>
	  </methodparam>
	  <methodparam>
	    <type>const int</type>
	    <parameter>(&amp;submatches)[R]</parameter>
	  </methodparam>
	  <methodparam>
	    <type>match_flag_type</type>
	    <parameter>m</parameter>
	    <initializer>match_default</initializer>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>事前条件：</term>
	    <listitem>
	      <para>
		<code language="C++">!re.empty()</code>。オブジェクト <parameter>re</parameter> はイテレータの生涯にわたって存在しなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		シーケンス [a,b) 中で、式 <parameter>re</parameter> とマッチフラグ <parameter>m</parameter>（<type linkend="ref.match_flag_type">match_flag_type</type> を見よ）で見つかる各正規表現マッチに対してR個の文字列を列挙する <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> を構築する。各マッチに対して、配列 <varname>submatches</varname> 内の添字に対応する各部分式にマッチした文字列を 1 つずつ列挙する。<code language="C++">submatches[0]</code> が -1 の場合、各マッチに対して最初に列挙する文字列は、前回のマッチの終端から今回のマッチの先頭までのテキストとなり、さらにこれ以上マッチが見つからない場合に列挙する文字列（最後のマッチの終端から対象シーケンスの終端までのテキスト）が 1 つ追加される。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.construct5">
	<constructorsynopsis language="C++">
	  <methodname>regex_token_iterator</methodname>
	  <methodparam>
	    <type>const regex_token_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<parameter>that</parameter> のコピーを構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		<code language="C++">*this == that</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.assign">
	<methodsynopsis language="C++">
	  <methodname>regex_token_iterator</methodname>
	  <methodparam>
	    <type>const regex_token_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code> を <parameter>that</parameter> と等価にする。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		<code language="C++">*this == that</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_eq">
	<methodsynopsis language="C++">
	  <type>bool</type>
	  <methodname>operator==</methodname>
	  <methodparam>
	    <type>const regex_token_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code> と <parameter>that</parameter> が同じ位置であれば真を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_ne">
	<methodsynopsis language="C++">
	  <type>bool</type>
	  <methodname>operator!=</methodname>
	  <methodparam>
	    <type>const regex_token_iterator&amp;</type>
	    <parameter>that</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">!(*this == that)</code> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_deref">
	<methodsynopsis language="C++">
	  <type>const value_type&amp;</type>
	  <methodname>operator*</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		列挙中の現在の文字シーケンスを返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_arrow">
	<methodsynopsis language="C++">
	  <type>const value_type*</type>
	  <methodname>operator-&gt;</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">&amp;(*this)</code> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_inc1">
	<methodsynopsis language="C++">
	  <type>regex_token_iterator&amp;</type>
	  <methodname>operator++</methodname>
	  <void/>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		列挙中の次の文字シーケンスへ移動する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、式のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<code language="C++">*this</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.op_inc2">
	<methodsynopsis language="C++">
	  <type>regex_token_iterator&amp;</type>
	  <methodname>operator++</methodname>
	  <methodparam>
	    <type>int</type>
	    <parameter/>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		戻り値用に <code language="C++">*this</code>のコピーを構築した後、<code language="C++">++(*this)</code> を呼び出す。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		結果。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="ref.regex_token_iterator.make">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;const charT*, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>submatch</parameter>
	      <initializer>0</initializer>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits, class ST, class SA>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const std::basic_string<charT, ST, SA>&]]></type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>submatch</parameter>
	      <initializer>0</initializer>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits, std::size_t N>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;const charT*, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>const int</type>
	      <parameter>(&amp;submatch)[N]</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits, class ST, class SA, std::size_t N>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const std::basic_string<charT, ST, SA>&]]></type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>const int</type>
	      <parameter>(&amp;submatch)[N]</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;const charT*, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const std::vector<int>&]]></type>
	      <parameter>submatch</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits, class ST, class SA>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>regex_token_iterator&lt;typename std::basic_string&lt;charT, ST, SA&gt;::const_iterator, charT, traits&gt; <function>make_regex_token_iterator</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const std::basic_string<charT, ST, SA>&]]></type>
	      <parameter>p</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const std::vector<int>&]]></type>
	      <parameter>submatch</parameter>
	    </paramdef>
	    <paramdef>
	      <type>regex_constants::match_flag_type</type>
	      <parameter>m</parameter>
	      <initializer>regex_constants::match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		文字列 <parameter>p</parameter> 中から正規表現 <parameter>e</parameter> と <type linkend="ref.match_flag_type">match_flag_type</type> <parameter>m</parameter> を用いて見つかる各マッチに対して、<parameter>submatch</parameter> 内の値に対応する 1 つの <classname linkend="ref.sub_match">sub_match</classname> を列挙する <classname linkend="ref.regex_token_iterator">regex_token_iterator</classname> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.regex_token_iterator.examples">
    <title>使用例</title>
    <para>
      次の例は文字列を受け取り、トークン列に分解する。
    </para>
    <programlisting language="C++"><![CDATA[#include <iostream>
#include <boost/regex.hpp>

using namespace std;

int main(int argc)
{
   string s;
   do{
      if(argc == 1)
      {
         cout << "分解するテキストを入力してください（\"quit\" で終了）：";
         getline(cin, s);
         if(s == "quit") break;
      }
      else
         s = "This is a string of tokens";

      boost::regex re("\\s+");
      boost::sregex_token_iterator i(s.begin(), s.end(), re, -1);
      boost::sregex_token_iterator j;

      unsigned count = 0;
      while(i != j)
      {
         cout << *i++ << endl;
         count++;
      }
      cout << "テキスト内に " << count << " 個のトークンが見つかりました。" << endl;

   }while(argc == 1);
   return 0;
}]]></programlisting>
    <para>
      次の例は HTML ファイルを受け取り、リンクしているファイルのリストを出力する。
    </para>
    <programlisting language="C++"><![CDATA[#include <fstream>
#include <iostream>
#include <iterator>
#include <boost/regex.hpp>

boost::regex e("<\\s*A\\s+[^>]*href\\s*=\\s*\"([^\"]*)\"",
               boost::regex::normal | boost::regbase::icase);

void load_file(std::string& s, std::istream& is)
{
   s.erase();
   //
   // ファイルサイズに合わせて文字列バッファを拡張する。
   // 場合によっては正しく動作しない…
   s.reserve(is.rdbuf()->in_avail());
   char c;
   while(is.get(c))
   {
      // （上の）in_avail が 0 を返した場合は
      // 対数拡大法を使う：
      if(s.capacity() == s.size())
         s.reserve(s.capacity() * 3);
      s.append(1, c);
   }
}

int main(int argc, char** argv)
{
   std::string s;
   int i;
   for(i = 1; i < argc; ++i)
   {
      std::cout << "次のファイルで URL を検索中 " << argv[i] << "：" << std::endl;
      s.erase();
      std::ifstream is(argv[i]);
      load_file(s, is);
      boost::sregex_token_iterator i(s.begin(), s.end(), e, 1);
      boost::sregex_token_iterator j;
      while(i != j)
      {
         std::cout << *i++ << std::endl;
      }
   }
   //
   // 別の方法：
   // 配列直値版コンストラクタのテスト。マッチ全体を
   // $1... 同様に分割する
   //
   for(i = 1; i < argc; ++i)
   {
      std::cout << "次のファイルで URL を検索中 " << argv[i] << "：" << std::endl;
      s.erase();
      std::ifstream is(argv[i]);
      load_file(s, is);
      const int subs[] = {1, 0,};
      boost::sregex_token_iterator i(s.begin(), s.end(), e, subs);
      boost::sregex_token_iterator j;
      while(i != j)
      {
         std::cout << *i++ << std::endl;
      }
   }

   return 0;
}]]></programlisting>
  </sect4>
</section>
