<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="syntax.basic_syntax">
  <title>POSIX 基本正規表現構文</title>

  <sect3 xml:id="syntax.basic_syntax.synopsis">
    <title>概要</title>
    <para>
      POSIX 基本正規表現構文は Unix ユーティリティ <command>sed</command> が使用しており、<command>grep</command> および <command>emacs</command> がその変種を使用している。Boost.Regex で POSIX 基本正規表現を使用するには、コンストラクタにフラグ <constant>basic</constant> を渡す（<type linkend="ref.syntax_option_type">syntax_option_type</type>を見よ）。例えば、
    </para>
    <programlisting language="C++">// e1 は大文字小文字を区別する POSIX 基本正規表現：
boost::regex e1(my_expression, boost::regex::basic);
// e2 は大文字小文字を区別しない POSIX 基本正規表現：
boost::regex e2(my_expression, boost::regex::basic|boost::regex::icase);</programlisting>
  </sect3>

  <sect3 xml:id="syntax.basic_syntax.posix_basic">
    <title>POSIX 基本構文</title>
    <para>
      POSIX 基本正規表現では、以下の特別なものを除くあらゆる文字が文字そのものにマッチする。
    </para>
    <literallayout>.[\*^$</literallayout>

    <sect4 xml:id="syntax.basic_syntax.wildcard_">
      <title>ワイルドカード</title>
      <para>
	文字集合外部の <phrase role="regex-pattern">.</phrase> 1 文字は、以下以外のあらゆる文字 1 文字にマッチする。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    NULL 文字（マッチアルゴリズムにフラグ <constant>match_not_dot_null</constant> を渡した場合）。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    改行文字（マッチアルゴリズムにフラグ <constant>match_not_dot_newline</constant> を渡した場合）。
	  </para>
	</listitem>
      </itemizedlist>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.anchors_">
      <title>アンカー</title>
      <para>
	<phrase role="regex-pattern">^</phrase> は、正規表現の先頭、あるいは部分式の先頭で使用した場合に行頭にマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">$</phrase> は、正規表現の終端、あるいは部分式の終端で使用した場合に行末にマッチする。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.marked_sub_expressions_">
      <title>マーク済み部分式</title>
      <para>
	開始が <phrase role="regex-pattern">\(</phrase> で終了が <phrase role="regex-pattern">\)</phrase> の節は部分式として機能する。マッチした部分式はすべてマッチアルゴリズムにより個別のフィールドに分けられる。マーク済み部分式は繰り返しと後方参照により参照が可能である。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.repeats_">
      <title>繰り返し</title>
      <para>
	あらゆるアトム（文字、部分式、文字クラス）は <phrase role="regex-pattern">*</phrase> 演算子による繰り返しが可能である。
      </para>
      <para>
	例えば <phrase role="regex-pattern">a*</phrase> は文字 a の 0 回以上の繰り返しにマッチする（アトムの 0 回の繰り返しは空文字列にマッチする）ため、正規表現 <phrase role="regex-pattern">a*b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>b
ab
aaaaaaaab</literallayout>
      <para>
	アトムの繰り返しは回数境界指定の繰り返しによっても可能である。
      </para>
      <para>
	<phrase role="regex-pattern">a\{n\}</phrase> は <phrase role="regex-input">a</phrase> のちょうど n 回の繰り返しにマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a\{n,\}</phrase> は <phrase role="regex-input">a</phrase> の n 回以上の繰り返しにマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a\{n,m\}</phrase> は <phrase role="regex-input">a</phrase> の n 回以上 m 回以下の繰り返しにマッチする。
      </para>
      <para>
	例えば
      </para>
      <literallayout>^a\{2,3\}$</literallayout>
      <para>
	は、次のいずれにもマッチするが、
      </para>
      <literallayout>aa
aaa</literallayout>
      <para>
	次のいずれにもマッチしない。
      </para>
      <literallayout>a
aaaa</literallayout>
      <para>
	直前の構造が繰り返し不能な場合に繰り返し演算子を使うとエラーになる。例えば次は
      </para>
      <literallayout>a\(*\)</literallayout>
      <para>
	<phrase role="regex-pattern">*</phrase> 演算子を適用可能なものがないためエラーとなる。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.back_references_">
      <title>後方参照</title>
      <para>
	エスケープ文字の直後に数字 <replaceable>n</replaceable> があると、部分式 <replaceable>n</replaceable> にマッチしたものと同じ文字列にマッチする。<replaceable>n</replaceable> は 0 から 9 の範囲である。例えば次の正規表現は、
      </para>
      <literallayout>^\(a*\)[^a]*\1$</literallayout>
      <para>
	次の文字列にマッチする。
      </para>
      <literallayout>aaabbaaa</literallayout>
      <para>
	しかし、次の文字列にはマッチしない。
      </para>
      <literallayout>aaabba</literallayout>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.character_sets_">
      <title>文字集合</title>
      <para>
	文字集合は <phrase role="regex-pattern">[</phrase> で始まり <phrase role="regex-pattern">]</phrase> で終わる括弧式であり、文字の集合を定義する。集合に含まれるいずれかの 1 文字にマッチする。
      </para>
      <para>
	文字集合に含められる要素は以下の組み合わせである。
      </para>

      <sect5 xml:id="syntax.basic_syntax.single_characters_">
	<title>単一の文字</title>
	<para>
	  例えば <phrase role="regex-pattern">[abc]</phrase> は <phrase role="regex-input">a</phrase> 、<phrase role="regex-input">b</phrase> 、<phrase role="regex-input">c</phrase> のいずれか 1 文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.character_ranges_">
	<title>文字範囲</title>
	<para>
	  例えば <phrase role="regex-pattern">[a-c]</phrase> は ‘a’ から ‘c’ までの範囲の 1 文字にマッチする。POSIX 基本正規表現の既定では、文字 <replaceable>x</replaceable> が <replaceable>y</replaceable> から <replaceable>z</replaceable> の範囲であるとは、文字の照合順がその範囲内にある場合をいう。結果はロカールの影響を受ける。この動作は正規表現構築時に <constant>collate</constant> オプションフラグを設定しないことで抑止でき、文字が特定の範囲内にあるかどうかは文字のコードポイントのみで決定する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.negation_">
	<title>否定</title>
	<para>
	  括弧式が文字 <phrase role="regex-pattern">^</phrase> で始まっている場合は、正規表現に含まれる文字の補集合となる。例えば <phrase role="regex-pattern">[^a-c]</phrase> は範囲 <phrase role="regex-pattern">a-c</phrase> を除くあらゆる文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.character_classes_">
	<title>文字クラス</title>
	<para>
	  <phrase role="regex-pattern">[[:name:]]</phrase> のような形式の正規表現は名前付き文字クラス「name」にマッチする。例えば <phrase role="regex-pattern">[[:lower:]]</phrase> はあらゆる小文字にマッチする。<link linkend="syntax.character_classes">文字クラス名</link>を見よ。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.collating_elements_">
	<title>照合要素</title>
	<para>
	  <phrase role="regex-pattern">[[.col.]]</phrase> のような形式の式は照合要素 <replaceable>col</replaceable> にマッチする。照合要素とは、単一の照合単位として扱われる文字か文字シーケンスである。照合要素は範囲の端点としても使用できる。例えば <phrase role="regex-pattern">[[.ae.]-c]</phrase> は文字シーケンス “ae” に加えて、現在の範囲 “ae”-c の文字のいずれかにマッチする。 後者において “ae” は現在のロカールにおける単一の照合要素として扱われる。
	</para>
	<para>
	  照合要素は（通常、文字集合内で使用できない）エスケープの代わりとして使用できる。例えば <phrase role="regex-pattern">[[.^.]abc]</phrase> は ‘abc^’ のいずれかの 1 文字にマッチする。
	</para>
	<para>
	  この拡張として、照合要素をシンボル名で指定する方法もある。例えば、
	</para>
	<literallayout>[[.NUL.]]</literallayout>
	<para>
	  は NUL 文字にマッチする。<link linkend="syntax.collating_names">照合要素名</link>を見よ。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.equivalence_classes_">
	<title>等価クラス</title>
	<para>
	  <phrase role="regex-pattern">[[=col=]]</phrase> のような形式の正規表現は、第 1 位のソートキーが照合要素 <replaceable>col</replaceable> と同じ文字および照合要素にマッチする。照合要素名 <replaceable>col</replaceable> は<link linkend="syntax.collating_names">照合シンボル名</link>でもよい。第 1 位のソートキーでは大文字小文字の違い、アクセント記号の有無、ロカール固有のテーラリング（<foreignphrase xml:lang="en">tailoring</foreignphrase>）は無視される。よって <phrase role="regex-pattern">[[=a=]]</phrase> は a 、À 、Á 、Â 、Ã 、Ä 、Å 、A 、à 、á 、â 、ã 、ä および å のいずれにもマッチする。残念ながらこの機能の実装はプラットフォームの照合と地域化のサポートに依存し、すべてのプラットフォームで移植性の高い動作は期待できず、単一のプラットフォームにおいてもすべてのロカールで動作するとは限らない。
	</para>
      </sect5>

      <sect5 xml:id="syntax.basic_syntax.combinations_">
	<title>結合</title>
	<para>
	  以上の要素はすべて 1 つの文字集合宣言内で結合可能である。例：<phrase role="regex-pattern">[[:digit:]a-c[.NUL.]]</phrase>
	</para>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.escapes">
      <title>エスケープ</title>
      <para>
	上で述べた <phrase role="regex-pattern">\{</phrase> 、<phrase role="regex-pattern">\}</phrase> 、<phrase role="regex-pattern">\(</phrase> および <phrase role="regex-pattern">\)</phrase> を例外として、エスケープの直後に文字が現れる場合はその文字にマッチする。これにより特殊文字
      </para>
      <literallayout>.[\*^$</literallayout>
      <para>
	を「通常の」文字にすることができる。エスケープ文字は文字集合内ではその特殊な意味を失うことに注意していただきたい。したがって <phrase role="regex-pattern">[\^]</phrase> は直値の <phrase role="regex-input">\</phrase> か <phrase role="regex-input">^</phrase> にマッチする。
      </para>
    </sect4>
  </sect3>

  <sect3 xml:id="syntax.basic_syntax.what_gets_matched">
    <title>マッチするもの</title>
    <para>
      正規表現のマッチに複数の、可能な「最良」マッチは最左最長の規則で得られるものである。
    </para>
  </sect3>

  <sect3 xml:id="syntax.basic_syntax.variations">
    <title>バリエーション</title>

    <sect4 xml:id="syntax.basic_syntax.grep">
      <title>grep</title>
      <para>
	grep フラグを設定して正規表現をコンパイルすると、改行区切りの <link linkend="syntax.basic_syntax.posix_basic">POSIX 基本正規表現</link>のリストとして扱われ、リスト内にマッチする正規表現があればマッチとなる。例えば次のコードは、
      </para>
      <programlisting language="C++">boost::regex e("abc\ndef", boost::regex::grep);</programlisting>
      <para>
	<link linkend="syntax.basic_syntax.posix_basic">POSIX 基本正規表現</link>の <phrase role="regex-pattern">abc</phrase> か <phrase role="regex-pattern">def</phrase> のいずれかにマッチする。
      </para>
      <para>
	名前が示すように、この動作は Unix ユーティリティの <command>grep</command> に合致する。
      </para>
    </sect4>

    <sect4 xml:id="syntax.basic_syntax.emacs">
      <title>emacs</title>
      <para>
	POSIX 基本機能に加えて以下の文字が特殊である。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>文字</th>
	    <th>説明</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="regex-pattern">+</phrase></td>
	    <td>直前のアトムの 1 回以上の繰り返し。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">?</phrase></td>
	    <td>直前のアトムの 0 回か 1 回の繰り返し。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">*?</phrase></td>
	    <td><phrase role="regex-pattern">*</phrase> の貪欲でない版。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">+?</phrase></td>
	    <td><phrase role="regex-pattern">+</phrase> の貪欲でない版。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">??</phrase></td>
	    <td><phrase role="regex-pattern">?</phrase> の貪欲でない版。</td>
	  </tr>
	</tbody>
      </informaltable>
      <para>
	また、以下のエスケープシーケンスが考慮される。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>エスケープ</th>
	    <th>説明</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="regex-pattern">\|</phrase></td>
	    <td>選択を表す。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\(?: ... )</phrase></td>
	    <td>マーク付けを行わないグループ構造。余計な部分式を生成することなく、字句的なグループ化が可能である。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\w</phrase></td>
	    <td>単語構成文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\W</phrase></td>
	    <td>非単語構成文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\sx</phrase></td>
	    <td>構文グループ <replaceable>x</replaceable> に属する文字にマッチする。次の emacs グルーピングをサポートする：‘s’ 、‘ ’ 、‘_’ 、‘w’ 、‘.’ 、‘)’ 、‘(’ 、‘"’ 、‘\’ 、‘&gt;’、‘&lt;’。詳細は emacs のドキュメントを見よ。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\Sx</phrase></td>
	    <td>構文グループ <replaceable>x</replaceable> に属さない文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\c</phrase> および <phrase role="regex-pattern">\C</phrase></td>
	    <td>これらはサポートしない。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\`</phrase></td>
	    <td>バッファ（あるいはマッチ対象テキスト）の先頭 0 文字にのみマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\'</phrase></td>
	    <td>バッファ（あるいはマッチ対象テキスト）の終端 0 文字にのみマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\b</phrase></td>
	    <td>単語境界の先頭 0 文字にのみマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\B</phrase></td>
	    <td>非単語境界の先頭 0 文字にのみマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\&lt;</phrase></td>
	    <td>単語の先頭 0 文字にのみマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\&gt;</phrase></td>
	    <td>単語の終端 0 文字にのみマッチする。</td>
	  </tr>
	</tbody>
      </informaltable>
      <para>
	最後に emacs スタイルの正規表現マッチは、<link linkend="syntax.perl_syntax.what_gets_matched">Perl の「深さ優先探索」規則</link>にしたがうことに注意していただきたい。emacs の正規表現は、<link linkend="syntax.leftmost_longest_rule">POSIX スタイルの最左最長規則</link>と調和しない Perl ライクの拡張を含むためこのような動作をする。
      </para>
    </sect4>
  </sect3>

  <sect3 xml:id="syntax.basic_syntax.options">
    <title>オプション</title>
    <para>
      正規表現構築時に basic および grep オプションとともに指定可能な<link linkend="ref.syntax_option_type.syntax_option_type_basic">フラグが多数ある</link>。特に <link linkend="ref.syntax_option_type.syntax_option_type_basic"><constant>collate</constant> 、<constant>icase</constant> オプション</link>が大文字小文字の区別やロカール依存の動作を変更するのに対し、<link linkend="ref.syntax_option_type.syntax_option_type_basic"><constant>newline_alt</constant> 、<constant>no_char_classes</constant> 、<constant>no_intervals</constant> 、<constant>bk_plus_qm</constant> 、<constant>bk_plus_vbar</constant> オプション</link>は構文を変更するという点に注意していただきたい。
    </para>
  </sect3>

  <sect3 xml:id="syntax.basic_syntax.references">
    <title>参考</title>
    <para>
      <link xlink:href="http://www.opengroup.org/onlinepubs/000095399/basedefs/xbd_chap09.html">IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Base Definitions and Headers, Section 9, Regular Expressions (FWD.1)</link>。
    </para>
    <para>
      <link xlink:href="http://www.opengroup.org/onlinepubs/000095399/utilities/grep.html">IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, Utilities, grep (FWD.1)</link>。
    </para>
    <para>
      <link xlink:href="http://www.gnu.org/software/emacs/">Emacs 21.3</link>。
    </para>
  </sect3>
</section>
