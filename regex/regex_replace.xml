<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.regex_replace">
  <title>regex_replace</title>
  <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>]]></programlisting>
  <para>
    アルゴリズム <function linkend="ref.regex_replace">regex_replace</function> は文字列を検索して正規表現に対するマッチをすべて発見する。さらに各マッチについて <methodname linkend="ref.match_results.format">match_results&lt;&gt;::format</methodname> を呼び出して文字列を書式化し、結果を出力イテレータに送る。マッチしなかったテキスト部分は <parameter>flags</parameter> 引数にフラグ <constant>format_no_copy</constant> が設定されていない場合に限り、変更を加えず出力にコピーする。フラグ <constant>format_first_only</constant> が設定されている場合は、すべてのマッチではなく最初のマッチのみ置換する。
  </para>
  <programlisting language="C++"><![CDATA[template <class OutputIterator, class BidirectionalIterator, class traits, class Formatter>
OutputIterator regex_replace(OutputIterator out,
                             BidirectionalIterator first,
                             BidirectionalIterator last,
                             const basic_regex<charT, traits>& e,
                             Formatter fmt,
                             match_flag_type flags = match_default);

template <class traits, class Formatter>
basic_string<charT> regex_replace(const basic_string<charT>& s,
                                  const basic_regex<charT, traits>& e,
                                  Formatter fmt,
                                  match_flag_type flags = match_default);]]></programlisting>

  <sect4 xml:id="ref.regex_replace.description">
    <title>説明</title>

    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class OutputIterator, class BidirectionalIterator, class traits, class Formatter>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>OutputIterator <function>regex_replace</function></funcdef>
	    <paramdef>
	      <type>OutputIterator</type>
	      <parameter>out</parameter>
	    </paramdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>first</parameter>
	    </paramdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>last</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Formatter</type>
	      <parameter>fmt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<para>
	  シーケンス [first, last) 中の正規表現 <parameter>e</parameter> に対するすべてのマッチを列挙し、各マッチと書式化文字列 <parameter>fmt</parameter> をマージして得られる文字列で置換し、結果の文字列を <parameter>out</parameter> にコピーする。<parameter>fmt</parameter> が単項・二項・三項関数オブジェクトである場合、関数オブジェクトが生成した文字シーケンスは変更を加えられることなく出力にコピーされる。
	</para>
	<para>
	  <parameter>flags</parameter> に <constant>format_no_copy</constant> が設定されている場合、マッチしなかったテキスト部分は出力にコピーされない。
	</para>
	<para>
	  <parameter>flags</parameter> に <constant>format_first_only</constant> が設定されている場合、<parameter>e</parameter> の最初のマッチのみが置換される。
	</para>
	<para>
	  書式化文字列 <parameter>fmt</parameter> およびマッチ検索に使用する規則は <parameter>flags</parameter> に設定されているフラグにより決定する。<type linkend="ref.match_flag_type">match_flag_type</type> を見よ。
	</para>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		型 <type>Formatter</type> は <type>char_type[]</type> 型の null 終端文字列へのポインタ、<type>char_type</type> 型のコンテナ（例えば <classname>std::basic_string&lt;char_type&gt;</classname>）、あるいは関数呼び出しにより置換文字列を生成する単項・二項・三項関数子のいずれかでなければならない。関数子の場合、<code language="C++">fmt(what)</code> は置換テキストと使用する <type>char_type</type> のコンテナを返さなければならず、<code language="C++">fmt(what, out)</code> および <code language="C++">fmt(what, out, flags)</code> はいずれも置換テキストを <code language="C++">*out</code> に出力し <type>OutputIterator</type> の新しい位置を返さなければならない。以上において <varname>what</varname> は見つかったマッチを表す <classname linkend="ref.match_results">match_results</classname> オブジェクトである。書式化オブジェクトが関数子の場合、<emphasis>値渡しされる</emphasis>ことに注意していただきたい。関数オブジェクトを内部状態とともに渡す場合は、<link xlink:href="http://www.boost.org/libs/ref.html">Boost.Ref</link> を使ってオブジェクトが参照渡しされるようラップするとよい。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<classname linkend="ref.regex_iterator">regex_iterator</classname> オブジェクトを構築し、
	      </para>
	      <programlisting language="C++"><![CDATA[regex_iterator<BidirectionalIterator, charT, traits, Allocator>
                                          i(first, last, e, flags),]]></programlisting>

	      <para>
		<varname>i</varname> を使ってシーケンス [first, last) 中のすべてのマッチ <varname>m</varname>（<classname><link linkend="ref.match_results">match_results</link>&lt;BidirectionalIterator&gt;</classname> 型）を列挙する。
	      </para>
	      <para>
		マッチが見つからず、かつ
	      </para>
	      <programlisting language="C++"><![CDATA[!(flags & format_no_copy)]]></programlisting>
	      <para>
		であれば、次を呼び出す。
	      </para>
	      <programlisting language="C++">std::copy(first, last, out)</programlisting>
	      <para>
		それ以外で
	      </para>
	      <programlisting language="C++"><![CDATA[!(flags & format_no_copy)]]></programlisting>
	      <para>
		であれば、
	      </para>
	      <programlisting language="C++">std::copy(m.prefix().first, m.prefix().last, out)</programlisting>
	      <para>
		を呼び出し、次を呼び出す。
	      </para>
	      <programlisting language="C++">m.format(out, fmt, flags)</programlisting>
	      <para>
		以上のいずれにも該当せず、
	      </para>
	      <programlisting language="C++"><![CDATA[!(flags & format_no_copy)]]></programlisting>
	      <para>
		であれば、次を呼び出す。
	      </para>
	      <programlisting language="C++">std::copy(last_m.suffix().first, last_m,suffix().last, out)</programlisting>
	      <para>
		ただし <varname>last_m</varname> は最後に見つかったマッチのコピーである。
	      </para>
	      <para>
		<code language="C++">flags &amp; format_first_only</code> が非 0 であれば、最初に見つかったマッチのみを置換する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、正規表現のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<parameter>out</parameter>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class traits, class Formatter>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>basic_string&lt;charT&gt; <function>regex_replace</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const basic_string<charT>&]]></type>
	      <parameter>str</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Formatter</type>
	      <parameter>fmt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		型 <type>Formatter</type> は <type>char_type[]</type> 型の null 終端文字列へのポインタ、<type>char_type</type> 型のコンテナ（例えば <classname>std::basic_string&lt;char_type&gt;</classname>）、あるいは関数呼び出しにより置換文字列を生成する単項・二項・三項関数子のいずれかでなければならない。関数子の場合、<code language="C++">fmt(what)</code> は置換テキストと使用する <type>char_type</type> のコンテナを返さなければならず、<code language="C++">fmt(what, out)</code> および <code language="C++">fmt(what, out, flags)</code> はいずれも置換テキストを <code language="C++">*out</code> に出力し <type>OutputIterator</type> の新しい位置を返さなければならない。以上において <varname>what</varname> は見つかったマッチを表す <classname linkend="ref.match_results">match_results</classname> オブジェクトである。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		オブジェクト <type>basic_string&lt;charT&gt;</type> <varname>result</varname> を構築し、<code language="C++">regex_replace(back_inserter(result), s.begin(), s.end(), e, fmt, flags)</code> を呼び出し、<varname>result</varname> を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.regex_replace.examples">
    <title>使用例</title>
    <para>
      次の例は C/C++ ソースコードを入力として受け取り、構文強調した HTML コードを出力する。
    </para>
    <programlisting language="C++"><![CDATA[#include <fstream>
#include <sstream>
#include <string>
#include <iterator>
#include <boost/regex.hpp>
#include <fstream>
#include <iostream>

// 目的：
// ファイルの内容を受け取り、構文強調した
// HTML 形式に変換する

boost::regex e1, e2;
extern const char* expression_text;
extern const char* format_string;
extern const char* pre_expression;
extern const char* pre_format;
extern const char* header_text;
extern const char* footer_text;

void load_file(std::string& s, std::istream& is)
{
   s.erase();
   s.reserve(is.rdbuf()->in_avail());
   char c;
   while(is.get(c))
   {
      if(s.capacity() == s.size())
         s.reserve(s.capacity() * 3);
      s.append(1, c);
   }
}

int main(int argc, const char** argv)
{
   try{
      e1.assign(expression_text);
      e2.assign(pre_expression);
      for(int i = 1; i < argc; ++i)
      {
         std::cout << "次のファイルを処理中 " << argv[i] << std::endl;
         std::ifstream fs(argv[i]);
         std::string in;
         load_file(in, fs);
         std::string out_name(std::string(argv[i]) + std::string(".htm"));
         std::ofstream os(out_name.c_str());
         os << header_text;
         // 最初に一時文字列ストリームに出力して
         // '<' と '>' を取り去る
         std::ostringstream t(std::ios::out | std::ios::binary);
         std::ostream_iterator<char, char> oi(t);
         boost::regex_replace(oi, in.begin(), in.end(),
            e2, pre_format, boost::match_default | boost::format_all);
         // 次に最終的な出力ストリームに出力し
         // 構文強調を追加する：
         std::string s(t.str());
         std::ostream_iterator<char, char> out(os);
         boost::regex_replace(out, s.begin(), s.end(),
            e1, format_string, boost::match_default | boost::format_all);
         os << footer_text;
      }
   }
   catch(...)
   { return -1; }
   return 0;
}

extern const char* pre_expression = "(<)|(>)|(&)|\\r";
extern const char* pre_format = "(?1<)(?2>)(?3&amp;)";


const char* expression_text =
   // プリプロセッサディレクティブ：添字 1
   "(^[[:blank:]]*#(?:[^\\\\\\n]|\\\\[^\\n[:punct:][:word:]]*[\\n[:punct:][:word:]])*)|"
   // 注釈：添字 2
   "(//[^\\n]*|/\\*.*?\\*/)|"
   // 直値：添字 3
   "\\<([+-]?(?:(?:0x[[:xdigit:]]+)|(?:(?:[[:digit:]]*\\.)?[[:digit:]]+"
   "(?:[eE][+-]?[[:digit:]]+)?))u?(?:(?:int(?:8|16|32|64))|L)?)\\>|"
   // 文字列直値：添字 4
   "('(?:[^\\\\']|\\\\.)*'|\"(?:[^\\\\\"]|\\\\.)*\")|"
   // キーワード：添字 5
   "\\<(__asm|__cdecl|__declspec|__export|__far16|__fastcall|__fortran|__import"
   "|__pascal|__rtti|__stdcall|_asm|_cdecl|__except|_export|_far16|_fastcall"
   "|__finally|_fortran|_import|_pascal|_stdcall|__thread|__try|asm|auto|bool"
   "|break|case|catch|cdecl|char|class|const|const_cast|continue|default|delete"
   "|do|double|dynamic_cast|else|enum|explicit|extern|false|float|for|friend|goto"
   "|if|inline|int|long|mutable|namespace|new|operator|pascal|private|protected"
   "|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_cast"
   "|struct|switch|template|this|throw|true|try|typedef|typeid|typename|union|unsigned"
   "|using|virtual|void|volatile|wchar_t|while)\\>"
   ;

const char* format_string = "(?1<font color=\"#008040\">$&</font>)"
                            "(?2<I><font color=\"#000080\">$&</font></I>)"
                            "(?3<font color=\"#0000A0\">$&</font>)"
                            "(?4<font color=\"#0000FF\">$&</font>)"
                            "(?5<B>$&</B>)";

const char* header_text =
   "<HTML>\n<HEAD>\n"
   "<TITLE>Auto-generated html formated source</TITLE>\n"
   "<META HTTP-EQUIV=\"Content-Type\Type\" CONTENT=\"text/html; charset=windows-1252\">\n"
   "</HEAD>\n"
   "<BODY LINK=\"#0000ff\" VLINK=\"#800080\" BGCOLOR=\"#ffffff\">\n"
   "<P> </P>\n<PRE>";

const char* footer_text = "</PRE>\n</BODY>\n\n";]]></programlisting>
  </sect4>
</section>
