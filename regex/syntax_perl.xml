<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="syntax.perl_syntax">
  <title>Perl の正規表現構文</title>

  <sect3 xml:id="syntax.perl_syntax.synopsis">
    <title>概要</title>
    <para>
      Perl の正規表現構文は、プログラミング言語 Perl で使われているものに基づいている。Perl の正規表現は Boost.Regex の既定の動作であり、<classname linkend="ref.basic_regex">basic_regex</classname> のコンストラクタにフラグ <constant>perl</constant> を渡すことでも利用できる。例えば以下のとおり。
    </para>
    <programlisting language="C++"><![CDATA[// e1 は大文字小文字を区別する Perl の正規表現：
// Perl は既定のオプションであり、明示的に構文を指定する必要はない：
boost::regex e1(my_expression);
// e2 は大文字小文字を区別しない Perl の正規表現：
boost::regex e2(my_expression, boost::regex::perl|boost::regex::icase);]]></programlisting>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.perl_regular_expression_syntax">
    <title>Perl の正規表現構文</title>
    <para>
      Perl の正規表現では、以下の特別なものを除くあらゆる文字が文字そのものにマッチする。
    </para>
    <literallayout>.[{()\*+?|^$</literallayout>

    <sect4 xml:id="syntax.perl_syntax.wildcard">
      <title>ワイルドカード</title>
      <para>
	文字集合外部の <phrase role="regex-pattern">.</phrase> 1 文字は、以下以外のあらゆる文字1文字にマッチする。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    NULL 文字（マッチアルゴリズムに<link linkend="ref.match_flag_type">フラグ <constant>match_not_dot_null</constant></link> を渡した場合）。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    改行文字（マッチアルゴリズムに<link linkend="ref.match_flag_type">フラグ <constant>match_not_dot_newline</constant></link> を渡した場合）。
	  </para>
	</listitem>
      </itemizedlist>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.anchors">
      <title>アンカー</title>
      <para>
	<phrase role="regex-pattern">^</phrase> は行頭にマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">$</phrase> は行末にマッチする。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.marked_sub_expressions">
      <title>マーク済み部分式</title>
      <para>
	開始が <phrase role="regex-pattern">(</phrase> で終了が <phrase role="regex-pattern">)</phrase> の節は部分式として機能する。マッチした部分式はすべてマッチアルゴリズムにより個別のフィールドに分けられる。マーク済み部分式は繰り返しと後方参照により参照が可能である。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.non_marking_grouping">
      <title>マークなしのグループ化</title>
      <para>
	マーク済み部分式は正規表現を字句的なグループに分けるのに役立つが、結果的に余分なフィールドを生成するという副作用がある。マーク済み部分式を生成することなく正規表現を字句的なグループに分ける別の手段として、<phrase role="regex-pattern">(?:</phrase> と <phrase role="regex-pattern">)</phrase> を使う方法がある。例えば <phrase role="regex-pattern">(?:ab)+</phrase> は <phrase role="regex-pattern">ab</phrase> の繰り返しを表し、別個の部分式を生成しない。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.repeats">
      <title>繰り返し</title>
      <para>
	あらゆるアトム（文字、部分式、文字クラス）は <phrase role="regex-pattern">*</phrase> 、<phrase role="regex-pattern">+</phrase> 、<phrase role="regex-pattern">?</phrase> および <phrase role="regex-pattern">{}</phrase> 演算子による繰り返しが可能である。
      </para>
      <para>
	<phrase role="regex-pattern">*</phrase> 演算子は直前のアトムの 0 回以上の繰り返しにマッチする。例えば正規表現 <phrase role="regex-pattern">a*b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>b
ab
aaaaaaaab</literallayout>
      <para>
	<phrase role="regex-pattern">+</phrase> 演算子は直前のアトムの 1 回以上の繰り返しにマッチする。例えば正規表現 <phrase role="regex-pattern">a+b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>ab
aaaaaaaab</literallayout>
      <para>
	しかし次にはマッチしない。
      </para>
      <literallayout>b</literallayout>
      <para>
	<phrase role="regex-pattern">?</phrase> 演算子は直前のアトムの 0 回あるいは 1 回の出現にマッチする。例えば正規表現 <phrase role="regex-pattern">ca?b</phrase> は以下のいずれにもマッチする。
      </para>
      <literallayout>cb
cab</literallayout>
      <para>
	しかし次にはマッチしない。
      </para>
      <literallayout>caab</literallayout>
      <para>
	アトムの繰り返しは回数境界指定の繰り返しによっても可能である。
      </para>
      <para>
	<phrase role="regex-pattern">a{n}</phrase> は <phrase role="regex-input">a</phrase> のちょうど n 回の繰り返しにマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a{n,}</phrase> は <phrase role="regex-input">a</phrase> の n 回以上の繰り返しにマッチする。
      </para>
      <para>
	<phrase role="regex-pattern">a{n,m}</phrase> は <phrase role="regex-input">a</phrase> の n 回以上 m 回以下の繰り返しにマッチする。
      </para>
      <para>
	例えば
      </para>
      <literallayout>^a{2,3}$</literallayout>
      <para>
	は、次のいずれにもマッチするが、
      </para>
      <literallayout>aa
aaa</literallayout>
      <para>
	次のいずれにもマッチしない。
      </para>
      <literallayout>a
aaaa</literallayout>
      <para>
	文字 <phrase role="regex-pattern">{</phrase> および <phrase role="regex-pattern">}</phrase> は、繰り返し以外の場面では通常のリテラルとして扱うことに注意していただきたい。これは Perl 5.x と同じ振る舞いである。例えば式 <phrase role="regex-pattern">ab{1</phrase> 、<phrase role="regex-pattern">ab1}</phrase> および <phrase role="regex-pattern">a{b}c</phrase> の波括弧はリテラルとして扱い、<emphasis>エラーは発生しない</emphasis>。
      </para>
      <para>
	直前の構造が繰り返し不能な場合に繰り返し演算子を使うとエラーになる。例えば次は
      </para>
      <literallayout>a(*)</literallayout>
      <para>
	<phrase role="regex-pattern">*</phrase> 演算子を適用可能なものがないためエラーとなる。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.non_greedy_repeats">
      <title>貪欲でない繰り返し</title>
      <para>
	通常の繰り返し演算子は「貪欲」である。貪欲とは、可能な限り長い入力にマッチするという意味である。マッチを生成する中で最も短い入力に一致する貪欲でないバージョンがある。
      </para>
      <para>
	<phrase role="regex-pattern">*?</phrase> は直前のアトムの 0 回以上の繰り返しにマッチする最短バージョンである。
      </para>
      <para>
	<phrase role="regex-pattern">+?</phrase> は直前のアトムの 1 回以上の繰り返しにマッチする最短バージョンである。
      </para>
      <para>
	<phrase role="regex-pattern">??</phrase> は直前のアトムの 0 回か 1 回の出現にマッチする最短バージョンである。
      </para>
      <para>
	<phrase role="regex-pattern">{n,}?</phrase> は直前のアトムの n 回以上の繰り返しにマッチする最短バージョンである。
      </para>
      <para>
	<phrase role="regex-pattern">{n,m}?</phrase> は直前のアトムの n 回以上 m 回以下の繰り返しにマッチする最短バージョンである。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.possessive_repeats">
      <title>強欲な繰り返し</title>
      <para>
	既定では、繰り返しパターンがマッチに失敗すると正規表現エンジンはマッチが見つかるまでバックトラッキングを行う。しかしながらこの動作が不都合な場合があるため、「強欲な」繰り返しというものがある。可能な限り長い文字列にマッチするが、式の残りの部分がマッチに失敗してもバックトラックを行わない。
      </para>
      <para>
	<phrase role="regex-pattern">*+</phrase> は直前のアトムの 0 回以上の繰り返しにマッチし、バックトラックを行わない。
      </para>
      <para>
	<phrase role="regex-pattern">++</phrase> は直前のアトムの 1 回以上の繰り返しにマッチし、バックトラックを行わない。
      </para>
      <para>
	<phrase role="regex-pattern">?+</phrase> は直前のアトムの 0 回か 1 回の出現にマッチし、バックトラックを行わない。
      </para>
      <para>
	<phrase role="regex-pattern">{n,}+</phrase> は直前のアトムの n 回以上の繰り返しにマッチし、バックトラックを行わない。
      </para>
      <para>
	<phrase role="regex-pattern">{n,m}+</phrase> は直前のアトムの n 回以上 m 回以下の繰り返しにマッチし、バックトラックを行わない。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.back_references">
      <title>後方参照</title>
      <para>
	エスケープ文字の直後に数字 <replaceable>n</replaceable> があると、部分式 <replaceable>n</replaceable> にマッチしたものと同じ文字列にマッチする。<replaceable>n</replaceable> は 0 から 9 の範囲である。例えば次の正規表現は、
      </para>
      <literallayout>^(a*).*\1$</literallayout>
      <para>
	次の文字列にマッチする。
      </para>
      <literallayout>aaabbaaa</literallayout>
      <para>
	しかし、次の文字列にはマッチしない。
      </para>
      <literallayout>aaabba</literallayout>
      <para>
	<phrase role="regex-pattern">\g</phrase> エスケープを使用しても同じ効果が得られる。例えば、
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>エスケープ</th>
	    <th>意味</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="regex-pattern">\g1</phrase></td>
	    <td>1 番目の部分式にマッチ。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\g{1}</phrase></td>
	    <td>1 番目の部分式にマッチ。この形式を使うと <phrase role="regex-pattern">\g{1}2</phrase> のような式や、<phrase role="regex-pattern">\g{1234}</phrase> といった添字が 9 より大きい式を安全に解析できる。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\g-1</phrase></td>
	    <td>最後の部分式にマッチ。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\g{-2}</phrase></td>
	    <td>最後から 2 番目の部分式にマッチ。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\g{one}</phrase></td>
	    <td>“one” という名前の部分式にマッチ。</td>
	  </tr>
	</tbody>
      </informaltable>
      <para>
	最後に、<phrase role="regex-pattern">\k</phrase> エスケープで名前付き部分式を参照できる。例えば <phrase role="regex-pattern">\k&lt;two&gt;</phrase> は “two” という名前の部分式にマッチする。
      </para>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.alternation">
      <title>選択</title>
      <para>
	<phrase role="regex-pattern">|</phrase> 演算子は引数のいずれかにマッチする。よって、例えば <phrase role="regex-pattern">abc|def</phrase> は <phrase role="regex-input">abc</phrase> か <phrase role="regex-input">def</phrase> のいずれかにマッチする。
      </para>
      <para>
	括弧を使用すると選択をグループ化できる。例えば <phrase role="regex-pattern">ab(d|ef)</phrase> は <phrase role="regex-input">abd</phrase> か <phrase role="regex-input">abef</phrase> のいずれかにマッチする。
      </para>
      <para>
	空の選択というのは許されないが、本当に必要な場合はプレースホルダーとして <phrase role="regex-pattern">(?:)</phrase> を使用する。例えば、
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    <phrase role="regex-pattern">|abc</phrase> は有効な式ではない。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    しかし、<phrase role="regex-pattern">(?:)|abc</phrase> は有効な式であり、実現しようとしていることは同じである。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <phrase role="regex-pattern">(?:abc)??</phrase> も全く同じ意味である。
	  </para>
	</listitem>
      </itemizedlist>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.character_sets">
      <title>文字集合</title>
      <para>
	文字集合は <phrase role="regex-pattern">[</phrase> で始まり <phrase role="regex-pattern">]</phrase> で終わる括弧式であり、文字の集合を定義する。集合に含まれるいずれかの 1 文字にマッチする。
      </para>
      <para>
	文字集合に含められる要素は以下の組み合わせである。
      </para>

      <sect5 xml:id="syntax.perl_syntax.single_characters">
	<title>単一の文字</title>
	<para>
	  例えば <phrase role="regex-pattern">[abc]</phrase> は <phrase role="regex-input">a</phrase> 、<phrase role="regex-input">b</phrase> 、<phrase role="regex-input">c</phrase> のいずれか 1 文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.character_ranges">
	<title>文字範囲</title>
	<para>
	  例えば <phrase role="regex-pattern">[a-c]</phrase> は ‘a’ から ‘c’ までの範囲の 1 文字にマッチする。Perl の正規表現の既定では、文字 <replaceable>x</replaceable> が <replaceable>y</replaceable> から <replaceable>z</replaceable> の範囲であるとは、文字のコードポイントが範囲の端点を含んだコードポイント内にある場合をいう。ただし、正規表現の構築時に <link linkend="ref.syntax_option_type.syntax_option_type_perl"><constant>collate</constant> フラグ</link>設定するとこの範囲はロカール依存となる。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.negation">
	<title>否定</title>
	<para>
	  括弧式が文字 <phrase role="regex-pattern">^</phrase> で始まっている場合は、正規表現に含まれる文字の補集合となる。例えば <phrase role="regex-pattern">[^a-c]</phrase> は範囲 <phrase role="regex-pattern">a-c</phrase> を除くあらゆる文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.character_classes">
	<title>文字クラス</title>
	<para>
	  <phrase role="regex-pattern">[[:name:]]</phrase> のような形式の正規表現は名前付き文字クラス「name」にマッチする。例えば <phrase role="regex-pattern">[[:lower:]]</phrase> はあらゆる小文字にマッチする。<link linkend="syntax.character_classes">文字クラス名</link>を見よ。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.collating_elements">
	<title>照合要素</title>
	<para>
	  <phrase role="regex-pattern">[[.col.]]</phrase> のような形式の式は照合要素 <replaceable>col</replaceable> にマッチする。照合要素とは、単一の照合単位として扱われる文字か文字シーケンスである。照合要素は範囲の端点としても使用できる。例えば <phrase role="regex-pattern">[[.ae.]-c]</phrase> は文字シーケンス “ae” のみならず、範囲 “ae”-c のいずれか 1 文字にもマッチする。 後者において “ae” は現在のロカールにおける単一の照合要素として扱われる。
	</para>
	<para>
	  この拡張として、照合要素を<link linkend="syntax.collating_names">シンボル名</link>で指定する方法もある。例えば、
	</para>
	<literallayout>[[.NUL.]]</literallayout>
	<para>
	  は文字 <phrase role="regex-input">\0</phrase> にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.equivalence_classes">
	<title>等価クラス</title>
	<para>
	  <phrase role="regex-pattern">[[=col=]]</phrase> のような形式の正規表現は、第 1 位のソートキーが照合要素 <replaceable>col</replaceable> と同じ文字および照合要素にマッチする。照合要素名 <replaceable>col</replaceable> は<link linkend="syntax.collating_names">シンボル名</link>でもよい。第 1 位のソートキーでは大文字小文字の違い、アクセント記号の有無、ロカール固有のテーラリング
	  <footnote>
	    <para>
	      訳注　テーラリング（<foreignphrase xml:lang="en">tailoring</foreignphrase>）は汎用的な処理に対して、特定の事情に即した結果を得るために追加規則を用いて処理をカスタマイズすることを意味します。文字処理の分野では特に各ロカールに対応するためのテーラリングが多数存在します。
	    </para>
	  </footnote>
	  は無視される。よって <phrase role="regex-pattern">[[=a=]]</phrase> は a 、À 、Á 、Â 、Ã 、Ä 、Å 、A 、à 、á 、â 、ã 、ä および å のいずれにもマッチする。残念ながらこの機能の実装はプラットフォームの照合と地域化のサポートに依存し、すべてのプラットフォームで移植性の高い動作は期待できず、単一のプラットフォームにおいてもすべてのロカールで動作するとは限らない。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.escaped_characters">
	<title>エスケープ付き文字</title>
	<para>
	  1 文字にマッチするエスケープシーケンスおよび文字クラスが、文字クラスの定義で使用可能である。例えば <phrase role="regex-pattern">[\[\]]</phrase> は <phrase role="regex-input">[</phrase> 、<phrase role="regex-input">]</phrase> のいずれかにマッチする。また <phrase role="regex-pattern">[\W\d]</phrase> は「数字」か、「単語」<emphasis>でない</emphasis> 1 文字にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.combinations">
	<title>結合</title>
	<para>
	  以上の要素はすべて 1 つの文字集合宣言内で結合可能である。例： <phrase role="regex-pattern">[[:digit:]a-c[.NUL.]]</phrase>
	</para>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.escapes">
      <title>エスケープ</title>
      <para>
	直前にエスケープの付いた特殊文字は、すべてその文字自身にマッチする。
      </para>
      <para>
	以下のエスケープシーケンスは、すべて 1 文字の別名である。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>エスケープ</th>
	    <th>文字</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><phrase role="regex-pattern">\a</phrase></td>
	    <td><literal>\a</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\e</phrase></td>
	    <td><literal>0x1B</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\f</phrase></td>
	    <td><literal>\f</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\n</phrase></td>
	    <td><literal>\n</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\r</phrase></td>
	    <td><literal>\r</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\t</phrase></td>
	    <td><literal>\t</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\v</phrase></td>
	    <td><literal>\v</literal></td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\b</phrase></td>
	    <td><literal>\b</literal>（文字クラス宣言内のみ）</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\cX</phrase></td>
	    <td>ASCII エスケープシーケンス。コードポイントがX % 32の文字</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\xdd</phrase></td>
	    <td>16 進エスケープシーケンス。コードポイントが 0xdd の文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\x{dddd}</phrase></td>
	    <td>16 進エスケープシーケンス。コードポイントが 0xdddd の文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\0ddd</phrase></td>
	    <td>8 進エスケープシーケンス。コードポイントが 0ddd の文字にマッチする。</td>
	  </tr>
	  <tr>
	    <td><phrase role="regex-pattern">\N{name}</phrase></td>
	    <td><link linkend="syntax.collating_names">シンボル名</link> <replaceable>name</replaceable> の文字にマッチする。例えば <phrase role="regex-pattern">\N{newline}</phrase> は文字 <phrase role="regex-input">\n</phrase> にマッチする。</td>
	  </tr>
	</tbody>
      </informaltable>

      <sect5 xml:id="syntax.perl_syntax._quot_single_character_quot__character_classes_">
	<title>「単一文字」文字クラス</title>
	<para>
	  <replaceable>x</replaceable> が文字クラス名である場合、エスケープ文字 <replaceable>x</replaceable> はその文字クラスに属するあらゆる文字にマッチし、エスケープ文字Xはその文字クラスに属さないあらゆる文字にマッチする。
	</para>
	<para>
	  既定でサポートされているものは以下のとおりである。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>エスケープシーケンス</th>
	      <th>等価な文字クラス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\d</phrase></td>
	      <td><phrase role="regex-pattern">[[:digit:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\l</phrase></td>
	      <td><phrase role="regex-pattern">[[:lower:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\s</phrase></td>
	      <td><phrase role="regex-pattern">[[:space:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\u</phrase></td>
	      <td><phrase role="regex-pattern">[[:upper:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\w</phrase></td>
	      <td><phrase role="regex-pattern">[[:word:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\h</phrase></td>
	      <td>水平空白</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\v</phrase></td>
	      <td>垂直空白</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\D</phrase></td>
	      <td><phrase role="regex-pattern">[^[:digit:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\L</phrase></td>
	      <td><phrase role="regex-pattern">[^[:lower:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\S</phrase></td>
	      <td><phrase role="regex-pattern">[^[:space:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\U</phrase></td>
	      <td><phrase role="regex-pattern">[^[:upper:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\W</phrase></td>
	      <td><phrase role="regex-pattern">[^[:word:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\H</phrase></td>
	      <td>水平空白以外</td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\V</phrase></td>
	      <td>垂直空白以外</td>
	    </tr>
	  </tbody>
	</informaltable>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.character_properties">
	<title>文字プロパティ</title>
	<para>
	  次の表の文字プロパティ名はすべて<link linkend="syntax.character_classes">文字クラスで使用する名前</link>と等価である。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>形式</th>
	      <th>説明</th>
	      <th>等価な文字集合の形式</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><phrase role="regex-pattern">\pX</phrase></td>
	      <td>プロパティ <replaceable>X</replaceable> をもつあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[[:X:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\p{Name}</phrase></td>
	      <td>プロパティ <replaceable>Name</replaceable> をもつあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[[:Name:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\PX</phrase></td>
	      <td>プロパティ <replaceable>X</replaceable> をもたないあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[^[:X:]]</phrase></td>
	    </tr>
	    <tr>
	      <td><phrase role="regex-pattern">\P{Name}</phrase></td>
	      <td>プロパティ <replaceable>Name</replaceable> をもたないあらゆる文字にマッチする。</td>
	      <td><phrase role="regex-pattern">[^[:Name:]]</phrase></td>
	    </tr>
	  </tbody>
	</informaltable>
	<para>
	  例えば <phrase role="regex-pattern">\pd</phrase> は <phrase role="regex-pattern">\p{digit}</phrase> と同様、あらゆる「数字」（“digit”）にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.word_boundaries">
	<title>単語境界</title>
	<para>
	  次のエスケープシーケンスは単語の境界にマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\&lt;</phrase> は単語の先頭にマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\&gt;</phrase> は単語の終端にマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\b</phrase> は単語境界（単語の先頭か終端）にマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\B</phrase> は単語境界以外にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.buffer_boundaries">
	<title>バッファ境界</title>
	<para>
	  以下はバッファ境界にのみマッチする。この場合の「バッファ」とは、マッチ対象の入力テキスト全体である（<phrase role="regex-pattern">^</phrase> および <phrase role="regex-pattern">$</phrase> はテキスト中の改行にもマッチすることに注意していただきたい）。
	</para>
	<para>
	  <phrase role="regex-pattern">\`</phrase> はバッファの先頭にのみマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\'</phrase> はバッファの終端にのみマッチする。
	</para>
	<para>
	  <phrase role="regex-pattern">\A</phrase> はバッファの先頭にのみマッチする（<phrase role="regex-pattern">\`</phrase> と同じ）。
	</para>
	<para>
	  <phrase role="regex-pattern">\z</phrase> はバッファの終端にのみマッチする（<phrase role="regex-pattern">\'</phrase> と同じ）。
	</para>
	<para>
	  <phrase role="regex-pattern">\Z</phrase> はバッファ終端における省略可能な改行シーケンスのゼロ幅表明にマッチする。正規表現<phrase role="regex-pattern">(?=\v*\z)</phrase> と等価である。<phrase role="regex-pattern">(?=\n?\z)</phrase> のような動作をする Perl とは微妙に異なることに注意していただきたい。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.continuation_escape">
	<title>継続エスケープ（<foreignphrase xml:lang="en">Continuation Escape</foreignphrase>）</title>
	<para>
	  シーケンス <phrase role="regex-pattern">\G</phrase> は最後にマッチが見つかった位置、あるいは前回のマッチが存在しない場合はマッチ対象テキストの先頭にのみマッチする。各マッチが 1 つ前のマッチの終端から始まっているようなマッチをテキスト中から列挙する場合に、このシーケンスは有効である。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.quoting_escape">
	<title>クォーティングエスケープ（<foreignphrase xml:lang="en">Quoting Escape</foreignphrase>）</title>
	<para>
	  エスケープシーケンス <phrase role="regex-pattern">\Q</phrase> は「クォートされたシーケンス」の開始を表す。以降、正規表現の終端か <phrase role="regex-pattern">\E</phrase> までの文字はすべて直値として扱われる。例えば、正規表現 <phrase role="regex-pattern">\Q\*+\Ea+</phrase> は以下のいずれかにマッチする。
	</para>
	<literallayout>\*+a
\*+aaa</literallayout>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.unicode_escapes">
	<title>Unicode エスケープ</title>
	<para>
	  <phrase role="regex-pattern">\C</phrase> は単一のコードポイントにマッチする。Boost.Regex では <phrase role="regex-pattern">.</phrase> 演算子とまったく同じ意味である。<phrase role="regex-pattern">\X</phrase> は結合文字シーケンス（非結合文字に 0 以上の結合文字シーケンスが続く）にマッチする。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.matching_line_endings">
	<title>行末へのマッチ</title>
	<para>
	  エスケープシーケンス <phrase role="regex-pattern">\R</phrase> はあらゆる改行文字シーケンスにマッチする。つまり、式 <phrase role="regex-pattern">(?>\x0D\x0A?|[\x0A-\x0C\x85\x{2028}\x{2029}])</phrase> と等価である。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.keeping_back_some_text">
	<title>テキストの除外</title>
	<para>
	  <phrase role="regex-pattern">\K</phrase> は $0 の開始位置を現在のテキスト位置にリセットする。言い換えると <phrase role="regex-pattern">\K</phrase> より前にあるものはすべて差し引かれ、正規表現マッチの一部とならない。$` も同様に更新される。
	</para>
	<para>
	  例えば <phrase role="regex-pattern">foo\Kbar</phrase> をテキスト <phrase role="regex-input">foobar</phrase> にマッチさせると、$0 に対して <phrase role="regex-input">bar</phrase> 、$` に対して <phrase role="regex-input">foo</phrase> というマッチ結果が返る。これは可変幅の後方先読みを再現するのに使用する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.any_other_escape">
	<title>その他のエスケープ</title>
	<para>
	  その他のエスケープシーケンスは、エスケープ対象の文字そのものにマッチする。例えば <phrase role="regex-pattern">\@</phrase> は直値 <phrase role="regex-input">@</phrase> にマッチする。
	</para>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.perl_extended_patterns">
      <title>Perl の拡張パターン</title>
      <para>
	正規表現構文の Perl 固有の拡張はすべて <phrase role="regex-pattern">(?</phrase> で始まる。
      </para>

      <sect5 xml:id="syntax.perl_syntax.named_subexpressions">
	<title>名前付き部分式</title>
	<para>
	  以下のようにして部分式を作成する。
	</para>
	<literallayout><![CDATA[(?<NAME>expression)]]></literallayout>
	<para>
	  これで <replaceable>NAME</replaceable> という名前で参照可能になる。あるいは以下の <phrase role="regex-pattern">'NAME'</phrase> のように区切り文字を使う方法もある。
	</para>
	<literallayout>(?'NAME'expression)</literallayout>
	<para>
	  これらの名前付き部分式は後方参照内で <phrase role="regex-pattern">\g{NAME}</phrase> か <phrase role="regex-pattern">\k&lt;NAME&gt;</phrase> で参照する。検索・置換操作で使用する <link linkend="format.perl_format">Perl</link> 形式の文字列、および <classname>match_results</classname> メンバ関数では名前で参照する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.comments">
	<title>注釈</title>
	<para>
	  <phrase role="regex-pattern">(?# ... )</phrase> は注釈（コメント）として扱われ、内容は無視される。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.modifiers">
	<title>修飾子</title>
	<para>
	  <phrase role="regex-pattern">(?imsx-imsx ... )</phrase> は、パターン中でどの Perl 修飾子を有効にするかを設定する。効果はブロックの先頭から閉じ括弧)までである。<phrase role="regex-pattern">-</phrase> より前にある文字が Perl 修飾子を有効にし、後にある文字が無効にする。
	</para>
	<para>
	  <phrase role="regex-pattern">(?imsx-imsx:pattern)</phrase> は、指定した修飾子をパターンのみに適用する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.non_marking_groups">
	<title>マークなしのグループ</title>
	<para>
	  <phrase role="regex-pattern">(?:pattern)</phrase> は、パターンを字句的にグループ化する。部分式の生成はない。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.branch_reset">
	<title>選択分岐ごとの部分式番号のリセット（<foreignphrase xml:lang="en">Branch reset</foreignphrase>）</title>
	<para>
	  <phrase role="regex-pattern">(?|pattern)</phrase> は、<replaceable>pattern</replaceable> 内において <phrase role="regex-pattern">|</phrase> が現れるごとに部分式の番号をリセットする。
	</para>
	<para>
	  この構造の後ろの部分式番号は、部分式の数が最大である選択分岐により決定する。この構造は、複数の選択マッチから 1 つを単一の部分式添字で捕捉したい場合に有効である。
	</para>
	<para>
	  以下に例を示す。式の下にあるのが各部分式の添字である。
	</para>
	<literallayout># before  ---------------branch-reset----------- after
/ ( a )  (?| x ( y ) z | (p (q) r) | (t) u (v) ) ( z ) /x
# 1            2         2  3        2     3     4</literallayout>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.lookahead">
	<title>先読み</title>
	<para>
	  <phrase role="regex-pattern">(?=pattern)</phrase> はパターンがマッチした場合に限り、現在位置を進めない。
	</para>
	<para>
	  <phrase role="regex-pattern">(?!pattern)</phrase> はパターンがマッチしなかった場合に限り、現在位置を進めない。
	</para>
	<para>
	  先読みを使用する典型的な理由は、2 つの正規表現の論理和作成である。例えばパスワードが大文字、小文字、区切り記号を含み、6 文字以上でなければならないとすると、次の正規表現でパスワードを検証できる。
	</para>
	<literallayout>(?=.*[[:lower:]])(?=.*[[:upper:]])(?=.*[[:punct:]]).{6,}</literallayout>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.lookbehind">
	<title>後読み</title>
	<para>
	  <phrase role="regex-pattern">(?&lt;=pattern)</phrase> は、現在位置の直前の文字列がパターンにマッチ可能な場合に限り、現在位置を進めない（パターンは固定長でなければならない）。
	</para>
	<para>
	  <phrase role="regex-pattern">(?&lt;!pattern)</phrase> は、現在位置の直前の文字列がパターンにマッチ不能な場合に限り、現在位置を進めない（パターンは固定長でなければならない）。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.independent_sub_expressions">
	<title>独立部分式</title>
	<para>
	  <phrase role="regex-pattern">(?&gt;pattern)</phrase> とすると、<replaceable>pattern</replaceable> は周囲のパターンとは独立してマッチし、正規表現は <replaceable>pattern</replaceable> にはバックトラックしない。独立部分式を使用する典型的な理由は効率の向上である。可能な限り最良のマッチのみが考慮されるため、独立部分式が正規表現全体のマッチを妨害する場合はマッチは 1 つも見つからない。
	  <footnote>
	    <para>
	      訳注　独立部分式の知識がある方でなければ意味不明だと思います。Perl のチュートリアル等を参照されることをお勧めします。
	    </para>
	  </footnote>
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.recursive_expressions">
	<title>再帰式</title>
	<para>
	  <phrase role="regex-pattern">(?N)</phrase> <phrase role="regex-pattern">(?-N)</phrase> <phrase role="regex-pattern">(?+N)</phrase> <phrase role="regex-pattern">(?R)</phrase> <phrase role="regex-pattern">(?0)</phrase>
	</para>
	<para>
	  <phrase role="regex-pattern">(?R)</phrase> および <phrase role="regex-pattern">(?0)</phrase> はパターン全体の先頭に再帰する。
	</para>
	<para>
	  <phrase role="regex-pattern">(?N)</phrase> は <replaceable>N</replaceable> 番目の部分式を再帰的に実行する。例えば <phrase role="regex-pattern">(?2)</phrase> は 2 番目の部分式へ再帰する。
	</para>
	<para>
	  <phrase role="regex-pattern">(?-N)</phrase> および <phrase role="regex-pattern">(?+N)</phrase> は相対的な再帰である。例えば <phrase role="regex-pattern">(?-1)</phrase> は最後の部分式へ、<phrase role="regex-pattern">(?+1)</phrase> は次の部分式へ再帰する。
	</para>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.conditional_expressions">
	<title>条件式</title>
	<para>
	  <phrase role="regex-pattern">(?(condition)yes-pattern|no-pattern)</phrase> は、<replaceable>condition</replaceable> が真であれば <replaceable>yes-pattern</replaceable> 、それ以外の場合は <replaceable>no-pattern</replaceable> のマッチを行う。
	</para>
	<para>
	  <phrase role="regex-pattern">(?(condition)yes-pattern)</phrase> は、<replaceable>condition</replaceable> が真であれば <replaceable>yes-pattern</replaceable> のマッチを行い、それ以外の場合は空文字列にマッチする。
	</para>
	<para>
	  <replaceable>condition</replaceable> は前方先読み表明、マーク済み部分式の添字（対応する部分式がマッチしていれば条件が真）、あるいは再帰式の添字（指定した再帰式内を直接実行している場合に条件が真）のいずれかである。
	</para>
	<para>
	  考えられる条件式を挙げる。
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(?=assert)yes-pattern|no-pattern)</phrase> は、前方先読み表明がマッチした場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(?!assert)yes-pattern|no-pattern)</phrase> は、前方先読み表明がマッチしなかった場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(<replaceable>N</replaceable>)yes-pattern|no-pattern)</phrase> は、<replaceable>N</replaceable> 番目の部分式がマッチした場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(&lt;<replaceable>name</replaceable>&gt;)yes-pattern|no-pattern)</phrase> は、名前付き部分式 <replaceable>name</replaceable> がマッチした場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?('<replaceable>name</replaceable>')yes-pattern|no-pattern)</phrase> は、名前付き部分式 <replaceable>name</replaceable> がマッチした場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(R)yes-pattern|no-pattern)</phrase> は、再帰式内を実行中である場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(RN)yes-pattern|no-pattern)</phrase> は、<replaceable>N</replaceable> 番目の部分式への再帰内を実行中である場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(R&amp;<replaceable>name</replaceable>)yes-pattern|no-pattern)</phrase> は、名前付き部分式 <replaceable>name</replaceable> への再帰内を実行中である場合に <replaceable>yes-pattern</replaceable> を、それ以外の場合に <replaceable>no-pattern</replaceable> を実行する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <phrase role="regex-pattern">(?(DEFINE)never-executed-pattern)</phrase> は絶対に実行されず、どこにもマッチしないコードブロックを定義する。通常、パターン内の別の場所から参照する 1 つ以上の名前付き式を定義するのに使用する。
	    </para>
	  </listitem>
	</itemizedlist>
      </sect5>

      <sect5 xml:id="syntax.perl_syntax.backtracking_control_verbs">
	<title>バックトラッキング制御動詞</title>
	<para>
	  本ライブラリは Perl のバックトラッキング制御動詞をサポートする。ただし部分的なものであり、特に <phrase role="regex-pattern">(*MARK)</phrase> はサポートしない。本ライブラリと Perl の間では細かい挙動が異なる可能性がある。少なくとも Perl の挙動はドキュメントが不十分であり、実際にはよく分からない動作をすることがあるからである。サポートしている動詞は以下のとおり。
	</para>
	<variablelist>
	  <varlistentry>
	    <term role="regex-pattern">(*PRUNE)</term>
	    <listitem>
	      <para>
		バックトラックしてきた場合に、それ以前のバックトラッキングに関するすべての情報を破棄する。これ以外の場合では作用は無い。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term role="regex-pattern">(*SKIP)</term>
	    <listitem>
	      <para>
		<phrase role="regex-pattern">(*PRUNE)</phrase> と同じだが、検索対象文字列における現在位置より前でマッチが発生しないことを示す点が異なる。すでにマッチを構成しないと決定したテキストのチャンクをスキップすることで検索を最適化するのに使用する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term role="regex-pattern">(*THEN)</term>
	    <listitem>
	      <para>
		バックトラックしてきた場合に、選択グループ内の残りすべての選択を破棄する。これ以外の場合では作用は無い。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term role="regex-pattern">(*COMMIT)</term>
	    <listitem>
	      <para>
		バックトラックしてきた場合に、残りすべてのマッチと検索を失敗させる。これ以外の場合では作用は無い。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term role="regex-pattern">(*FAIL)</term>
	    <listitem>
	      <para>
		この時点で無条件にマッチを失敗させる。正規表現エンジンにバックトラックを強制するのに使用する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term role="regex-pattern">(*ACCEPT)</term>
	    <listitem>
	      <para>
		この時点でパターンがマッチしたとする。半開きの部分式はすべてその時点で閉じられる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect5>
    </sect4>

    <sect4 xml:id="syntax.perl_syntax.operator_precedence">
      <title>演算子の優先順位</title>
      <para>
	演算子の優先順位は以下のとおりである。
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    照合関係の括弧記号 <phrase role="regex-pattern">[==]</phrase> <phrase role="regex-pattern">[::]</phrase> <phrase role="regex-pattern">[..]</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    エスケープ <phrase role="regex-pattern">\</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    文字集合（括弧式） <phrase role="regex-pattern">[]</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    グループ <phrase role="regex-pattern">()</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    単一文字の繰り返し <phrase role="regex-pattern">*</phrase> <phrase role="regex-pattern">+</phrase> <phrase role="regex-pattern">?</phrase> <phrase role="regex-pattern">{m,n}</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    結合
	  </para>
	</listitem>
	<listitem>
	  <para>
	    アンカー <phrase role="regex-pattern">^$</phrase>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    選択 <phrase role="regex-pattern">|</phrase>
	  </para>
	</listitem>
      </orderedlist>
    </sect4>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.what_gets_matched">
    <title>マッチするもの</title>
    <para>
      正規表現を有向グラフ（あるいは閉路グラフ）とみなすと、入力テキストに対する最良マッチとは、グラフに対して深さ優先検索を行って最初に見つかるマッチである。
    </para>
    <para>
      これは言い換えると次のようになる。最良マッチとは各要素が以下のようにマッチする<link linkend="syntax.leftmost_longest_rule">最左マッチ</link>である。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>構造</th>
	  <th>マッチするもの</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><phrase role="regex-pattern">AtomA AtomB</phrase></td>
	  <td><replaceable>AtomB</replaceable> に対するマッチが直後に続く <replaceable>AtomA</replaceable> に対する最良マッチを検索する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">ExpressionA | ExpressionB</phrase></td>
	  <td><replaceable>Expression1</replaceable> がマッチ可能であればそのマッチを返す。それ以外の場合は <replaceable>Expression2</replaceable> を試行する。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">S{N}</phrase></td>
	  <td><replaceable>S</replaceable> のちょうど <replaceable>N</replaceable> 回の繰り返しにマッチする。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">S{N,M}</phrase></td>
	  <td><replaceable>S</replaceable> の、<replaceable>N</replaceable> 回以上 <replaceable>M</replaceable> 回以下の可能な限り長い繰り返しにマッチする。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">S{N,M}?</phrase></td>
	  <td><replaceable>S</replaceable> の、<replaceable>N</replaceable> 回以上 <replaceable>M</replaceable> 回以下の可能な限り短い繰り返しにマッチする。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">S?</phrase> 、<phrase role="regex-pattern">S*</phrase> 、<phrase role="regex-pattern">S+</phrase></td>
	  <td>それぞれ <phrase role="regex-pattern">S{0,1}</phrase> 、<phrase role="regex-pattern">S{0,UINT_MAX}</phrase> 、<phrase role="regex-pattern">S{1,UINT_MAX}</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">S??</phrase> 、<phrase role="regex-pattern">S*?</phrase> 、<phrase role="regex-pattern">S+?</phrase></td>
	  <td>それぞれ <phrase role="regex-pattern">S{0,1}?</phrase> 、<phrase role="regex-pattern">S{0,UINT_MAX}?</phrase> 、<phrase role="regex-pattern">S{1,UINT_MAX}?</phrase> と同じ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?&gt;S)</phrase></td>
	  <td><replaceable>S</replaceable> の最良マッチにマッチするのみ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?=S)</phrase> 、<phrase role="regex-pattern">(?&lt;=S)</phrase></td>
	  <td><replaceable>S</replaceable> の最良マッチにのみマッチする（これが分かるのは、<replaceable>S</replaceable> 中に捕捉を行う括弧がある場合のみ）。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?!S)</phrase> 、<phrase role="regex-pattern">(?&lt;!S)</phrase></td>
	  <td><replaceable>S</replaceable> に対するマッチが存在するかどうか考慮するのみ。</td>
	</tr>
	<tr>
	  <td><phrase role="regex-pattern">(?(condition)yes-pattern|no-pattern)</phrase></td>
	  <td>条件が真であれば <replaceable>yes-pattern</replaceable> のみが考慮される。それ以外の場合は <replaceable>no-pattern</replaceable> のみが考慮される。</td>
	</tr>
      </tbody>
    </informaltable>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.variations">
    <title>バリエーション</title>
    <para>
      <link linkend="ref.syntax_option_type.syntax_option_type_perl"><constant>normal</constant> 、<constant>ECMAScript</constant> 、<constant>JavaScript</constant> および <constant>JScript</constant> の各オプション</link>はすべて <constant>perl</constant> の別名である。
    </para>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.options">
    <title>オプション</title>
    <para>
      正規表現構築時に <constant>perl</constant> オプションとともに指定可能な<link linkend="ref.syntax_option_type.syntax_option_type_perl">フラグが多数ある</link>。特に <constant>collate</constant> 、<constant>no_subs</constant> 、<constant>icase</constant> オプションが大文字小文字の区別やロカール依存の動作を変更するのに対し、<constant>newline_alt</constant> オプションは構文を変更するという点に注意していただきたい。
    </para>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.pattern_modifiers">
    <title>パターン修飾子</title>
    <para>
      <phrase role="regex-pattern">(?smix-smix)</phrase> を正規表現の前につけるか、<link linkend="ref.syntax_option_type.syntax_option_type_perl">正規表現コンパイル時フラグ <constant>no_mod_m</constant> 、<constant>mod_x</constant> 、<constant>mod_s</constant> 、<constant>no_mod_s</constant></link> を使用することで Perl の <code language="Perl">smix</code> 修飾子を適用することができる。
    </para>
  </sect3>

  <sect3 xml:id="syntax.perl_syntax.references">
    <title>参考</title>
    <para>
      <link xlink:href="http://perldoc.perl.org/perlre.html">Perl 5.8</link>。
      <footnote>
	<para>
	  訳注　リンク先はバージョン 5 系列の最新版になっています。現在の Boost.Regex には Perl 5.9 以降の機能が追加されているので、確認しておくといいです。
	  <!-- 現在っていつ？ -->
	</para>
      </footnote>
    </para>
  </sect3>
</section>
