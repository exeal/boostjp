<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.regex_search">
  <title>regex_search</title>
  <programlisting language="C++"><![CDATA[#include <boost/regex.hpp>]]></programlisting>
  <para>
    アルゴリズム <function linkend="ref.regex_search">regex_search</function> は、双方向イテレータの組で示される範囲から与えられた正規表現を検索する。このアルゴリズムは様々な発見的方法を用いて検索時間を短縮する。そのために、個々の位置からマッチが開始する可能性があるかチェックのみを行う。このアルゴリズムの定義は以下のとおりである。
  </para>
  <programlisting language="C++"><![CDATA[template <class BidirectionalIterator,
         class Allocator, class charT, class traits>
bool regex_search(BidirectionalIterator first, BidirectionalIterator last,
                  match_results<BidirectionalIterator, Allocator>& m,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);

template <class ST, class SA,
         class Allocator, class charT, class traits>
bool regex_search(const basic_string<charT, ST, SA>& s,
                  match_results<
                     typename basic_string<charT, ST,SA>::const_iterator,
                     Allocator>& m,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);

template<class charT, class Allocator, class traits>
bool regex_search(const charT* str,
                  match_results<const charT*, Allocator>& m,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);

template <class BidirectionalIterator, class charT, class traits>
bool regex_search(BidirectionalIterator first, BidirectionalIterator last,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);

template <class charT, class traits>
bool regex_search(const charT* str,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);

template<class ST, class SA, class charT, class traits>
bool regex_search(const basic_string<charT, ST, SA>& s,
                  const basic_regex<charT, traits>& e,
                  match_flag_type flags = match_default);]]></programlisting>

  <sect4 xml:id="ref.regex_search.description">
    <title>説明</title>

    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class BidirectionalIterator, class Allocator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_match</function></funcdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>first</parameter>
	    </paramdef>
	    <paramdef>
	      <type>BidirectionalIterator</type>
	      <parameter>last</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<BidirectionalIterator, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		型 <type>BidirectionalIterator</type> が双方向イテレータの要件（24.1.4）を満たす。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		[first, last) 中に正規表現 <parameter>e</parameter> にマッチする部分シーケンスが存在するか判定する。引数 <parameter>flags</parameter> は、式が文字シーケンスに対してどのようにマッチするかを制御するのに使用する。完全なマッチが存在する場合は真を、それ以外の場合は偽を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		長さ <replaceable>N</replaceable> の文字列に対して式のマッチの計算量が O(<replaceable>N</replaceable><superscript>2</superscript>) を超え始めた場合、正規表現のマッチ中にプログラムのスタック空間が枯渇した場合（Boost.Regex が再帰モードを使うように構成されているとき）、あるいはマッチオブジェクトが許可されているメモリ割り当てを消耗しきった場合（Boost.Regex が非再帰モードを使うように構成されているとき）に <exceptionname>std::runtime_error</exceptionname>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		関数が偽を返した場合、引数 <parameter>m</parameter> の状態は未定義である。それ以外の場合は次の表のとおりである。
	      </para>
	      <informaltable>
		<thead>
		  <tr>
		    <th>要素</th>
		    <th>値</th>
		  </tr>
		</thead>
		<tbody>
		  <tr>
		    <td><code language="C++">m.size()</code></td>
		    <td><code language="C++">1 + e.mark_count()</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.empty()</code></td>
		    <td><constant>false</constant></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().first</code></td>
		    <td><parameter>first</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().last</code></td>
		    <td><code language="C++">m[0].first</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.prefix().matched</code></td>
		    <td><code language="C++">m.prefix().first != m.prefix.second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().first</code></td>
		    <td><code language="C++">m[0].second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().last</code></td>
		    <td><parameter>last</parameter></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m.suffix().matched</code></td>
		    <td><code language="C++">m.suffix().first != m.suffix().second</code></td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].first</code></td>
		    <td>正規表現にマッチした文字シーケンスの先頭</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].second</code></td>
		    <td>正規表現にマッチした文字シーケンスの終端</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[0].matched</code></td>
		    <td>完全マッチが見つかった場合は真、（<constant>match_partial</constant> フラグを設定した結果）部分マッチが見つかった場合は偽。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].first</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの先頭。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合は <parameter>last</parameter>。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].second</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> にマッチしたシーケンスの終端。それ以外で部分式 <replaceable>n</replaceable> がマッチしなかった場合は <parameter>last</parameter>。</td>
		  </tr>
		  <tr>
		    <td><code language="C++">m[n].matched</code></td>
		    <td><code language="C++">n &lt; m.size()</code> であるすべての整数について部分式 <replaceable>n</replaceable> がマッチした場合は真、それ以外は偽。</td>
		  </tr>
		</tbody>
	      </informaltable>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class Allocator, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_search</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>str</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<const charT*, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_search(str, str + char_traits&lt;charT&gt;::length(str), m, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class ST, class SA, class Allocator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_search</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const basic_string<charT, ST, SA>&]]></type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[match_results<typename basic_string<charT, ST, SA>::const_iterator, Allocator>&]]></type>
	      <parameter>m</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_search(s.begin(), s.end(), m, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class iterator, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_search</function></funcdef>
	    <paramdef>
	      <type>iterator</type>
	      <parameter>first</parameter>
	    </paramdef>
	    <paramdef>
	      <type>iterator</type>
	      <parameter>last</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<classname>match_results&lt;BidirectionalIterator&gt;</classname> のインスタンス <varname>what</varname> を構築し、<code language="C++">regex_search(first, last, what, e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_search</function></funcdef>
	    <paramdef>
	      <type>const charT*</type>
	      <parameter>str</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex<charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_search(str, str + char_traits&lt;charT&gt;::length(str), e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo><![CDATA[template <class ST, class SA, class charT, class traits>]]></funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>regex_search</function></funcdef>
	    <paramdef>
	      <type><![CDATA[const basic_string<charT, ST, SA>&]]></type>
	      <parameter>s</parameter>
	    </paramdef>
	    <paramdef>
	      <type><![CDATA[const basic_regex <charT, traits>&]]></type>
	      <parameter>e</parameter>
	    </paramdef>
	    <paramdef>
	      <type>match_flag_type</type>
	      <parameter>flags</parameter>
	      <initializer>match_default</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">regex_search(s.begin(), s.end(), e, flags)</code> の結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </sect4>

  <sect4 xml:id="ref.regex_search.examples">
    <title>使用例</title>
    <para>
      以下の例は、ファイルの内容を 1 つの文字列として読み取り、ファイル内の C++ クラス宣言をすべて検索する。このコードは <classname>std::string</classname> の実装方法に依存しない。例えば SGI の <classname>rope</classname> クラス（不連続メモリバッファが使われている）を使うように容易に修正できる。
    </para>
    <programlisting language="C++"><![CDATA[#include <string>
#include <map>
#include <boost/regex.hpp>

// 目的：
// ファイルの内容を単一の文字列として受け取り、
// C++ クラス宣言をすべて検索し、それらの位置を
// 文字列対整数の辞書に保存する
typedef std::map<std::string, int, std::less<std::string> > map_type;

boost::regex expression(
   "^(template[[:space:]]*<[^;:{]+>[[:space:]]*)?"
   "(class|struct)[[:space:]]*"
   "(\\<\\w+\\>([[:blank:]]*\\([^)]*\\))?"
   "[[:space:]]*)*(\\<\\w*\\>)[[:space:]]*"
   "(<[^;:{]+>[[:space:]]*)?(\\{|:[^;\\{()]*\\{)");

void IndexClasses(map_type& m, const std::string& file)
{
   std::string::const_iterator start, end;
   start = file.begin();
   end = file.end();
   boost::match_results<std::string::const_iterator> what;
   boost::match_flag_type flags = boost::match_default;
   while(regex_search(start, end, what, expression, flags))
   {
      // what[0] には文字列全体が入り
      // what[5] にはクラス名が入る。
      // what[6] にはテンプレートの特殊化（あれば）が入り、
      // クラス名と位置を辞書に入れて対応させる：
      m[std::string(what[5].first, what[5].second)
            + std::string(what[6].first, what[6].second)]
         = what[5].first – file.begin();
      // 検索位置を更新する：
      start = what[0].second;
      // flags を更新する：
      flags |= boost::match_prev_avail;
      flags |= boost::match_not_bob;
   }
}]]></programlisting>
  </sect4>
</section>
