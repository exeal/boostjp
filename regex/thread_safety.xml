<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="background.thread_safety">
  <title>スレッド安全性</title>
  <para>
    Boost がスレッド安全であれば、Boost.Regex はスレッド安全である。Boost がスレッド安全モードであるかどうか確認するには、<symbol>BOOST_HAS_THREADS</symbol> が定義されているか調べるとよい。コンパイラがスレッドのサポートを有効にしていれば、設定システムがこのマクロを自動的に定義する。
  </para>
  <para>
    <classname linkend="ref.basic_regex">basic_regex</classname> クラスとその typedef である <type>regex</type> 、<type>wregex</type> は、コンパイル済み正規表現がスレッド間で安全に共有可能という意味でスレッド安全である。マッチアルゴリズム <function linkend="ref.regex_match">regex_match</function> 、<function linkend="ref.regex_search">regex_search</function> および <function linkend="ref.regex_replace">regex_replace</function> はすべて再入可能かつスレッド安全である。<classname linkend="ref.match_results">match_results</classname> クラスは、マッチ結果をあるスレッドから別のスレッドへ安全にコピー（例えばあるスレッドがマッチを検索して <classname linkend="ref.match_results">match_results</classname> インスタンスをキューに追加し、同時に別のスレッドが同じキューをポップすることが）可能という意味では、スレッド安全である。それ以外の場合はスレッドごとに個別の <classname linkend="ref.match_results">match_results</classname> インスタンスを使用しなければならない。
  </para>
  <para>
    <link linkend="ref.posix">POSIX API 関数</link>はすべて再入可能かつスレッド安全であり、<function>regcomp</function> でコンパイルした正規表現もスレッド間で共有可能である。
  </para>
  <para>
    <classname linkend="ref.deprecated.old_regex">RegEx</classname> クラスは、各スレッドが <classname>RegEx</classname> インスタンスを保持する場合のみスレッド安全である（アパートメントスレッディング）。これは <classname>RegEx</classname> が正規表現のコンパイルとマッチの両方を処理するためである。
  </para>
  <para>
    最後に、大域ロカールを変更するとあらゆるコンパイル済み正規表現が無効になるため、あるスレッドで正規表現を使用しているときに別のスレッドが <function>setlocale</function> を呼び出すと予期しない結果となることに注意していただきたい。
  </para>
  <para>
    また <function>main()</function> の開始前は、実行中のスレッドは 1 つだけでなければならないという要件がある。
  </para>
</section>
