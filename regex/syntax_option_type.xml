<?xml version="1.0" ?>
<!--
  Copyright 2006-2007 John Maddock.
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="ref.syntax_option_type">
  <title>syntax_option_type</title>

  <section xml:id="ref.syntax_option_type.syntax_option_type_synopsis">
    <title>syntax_option_type の概要</title>
    <para>
      <type linkend="ref.syntax_option_type">syntax_option_type</type> 型は実装固有のビットマスク型で、正規表現文字列の解釈方法を制御する。利便性のために、ここに挙げる定数はすべて <classname linkend="ref.basic_regex">basic_regex</classname> テンプレートクラスのスコープにも複製していることに注意していただきたい。
    </para>
    <programlisting language="C++">namespace std{ namespace regex_constants{

typedef <replaceable>implementation-specific-bitmask-type</replaceable> syntax_option_type;

// 以下のフラグは標準化されている：
static const syntax_option_type normal;
static const syntax_option_type ECMAScript = normal;
static const syntax_option_type JavaScript = normal;
static const syntax_option_type JScript = normal;
static const syntax_option_type perl = normal;
static const syntax_option_type basic;
static const syntax_option_type sed = basic;
static const syntax_option_type extended;
static const syntax_option_type awk;
static const syntax_option_type grep;
static const syntax_option_type egrep;
static const syntax_option_type icase;
static const syntax_option_type nosubs;
static const syntax_option_type optimize;
static const syntax_option_type collate;

//
// 残りのオプションは Boost.Regex 固有のものである：
//

// Perl および POSIX 正規表現共通のオプション：
static const syntax_option_type newline_alt;
static const syntax_option_type no_except;
static const syntax_option_type save_subexpression_location;

// Perl 固有のオプション：
static const syntax_option_type no_mod_m;
static const syntax_option_type no_mod_s;
static const syntax_option_type mod_s;
static const syntax_option_type mod_x;
static const syntax_option_type no_empty_expressions;

// POSIX 拡張固有のオプション：
static const syntax_option_type no_escape_in_lists;
static const syntax_option_type no_bk_refs;

// POSIX 基本のオプション：
static const syntax_option_type no_escape_in_lists;
static const syntax_option_type no_char_classes;
static const syntax_option_type no_intervals;
static const syntax_option_type bk_plus_qm;
static const syntax_option_type bk_vbar;

} // namespace regex_constants
} // namespace std</programlisting>
  </section>

  <section xml:id="ref.syntax_option_type.syntax_option_type_overview">
    <title>syntax_option_type の概観</title>
    <para>
      <type linkend="ref.syntax_option_type">syntax_option_type</type> 型は実装固有のビットマスク型である（C++ 標準 17.3.2.1.2 を見よ）。各要素の効果は以下の表に示すとおりである。<type linkend="ref.syntax_option_type">syntax_option_type</type> 型の値は <constant>normal</constant> 、<constant>basic</constant> 、<constant>extended</constant> 、<constant>awk</constant> 、<constant>grep</constant> 、<constant>egrep</constant> 、<constant>sed</constant> 、<constant>literal</constant> 、<constant>perl</constant> のいずれか 1 つの要素を必ず含んでいなければならない。
    </para>
    <para>
      利便性のために、ここに挙げる定数はすべて <classname linkend="ref.basic_regex">basic_regex</classname> テンプレートクラスのスコープにも複製していることに注意していただきたい。よって、次のコードは、
    </para>
    <programlisting language="C++">boost::regex_constants::constant_name</programlisting>
    <para>
      次のように書くことができる。
    </para>
    <programlisting language="C++">boost::regex::constant_name</programlisting>
    <para>
      あるいは次のようにも書ける。
    </para>
    <programlisting language="C++">boost::wregex::constant_name</programlisting>
    <para>
      以上はいずれも同じ意味である。
    </para>
  </section>

  <section xml:id="ref.syntax_option_type.syntax_option_type_perl">
    <title>Perl 正規表現のオプション</title>
    <para>
      Perl の正規表現では、以下のいずれか 1 つを必ず設定しなければならない。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>ECMAScript</constant></td>
	  <td>○</td>
	  <td>
	    <para>
	      正規表現エンジンが解釈する文法が通常のセマンティクスに従うことを指定する。ECMA-262, ECMAScript Language Specification, Chapter 15 part 10, RegExp (Regular Expression) Objects (FWD.1) に与えられているものと同じである。
	    </para>
	    <para>
	      これは <link linkend="syntax.perl_syntax">Perl の正規表現構文</link>と機能的には等価である。
	    </para>
	    <para>
	      このモードでは、Boost.Regex は Perl 互換の <phrase role="regex-pattern">(?…)</phrase> 拡張もサポートする。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><constant>perl</constant></td>
	  <td>×</td>
	  <td>上に同じ。</td>
	</tr>
	<tr>
	  <td><constant>normal</constant></td>
	  <td>×</td>
	  <td>上に同じ。</td>
	</tr>
	<tr>
	  <td><constant>JavaScript</constant></td>
	  <td>×</td>
	  <td>上に同じ。</td>
	</tr>
	<tr>
	  <td><constant>JScript</constant></td>
	  <td>×</td>
	  <td>上に同じ。</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      Perl スタイルの正規表現を使用する場合は、以下のオプションを組み合わせることができる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>icase</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対する正規表現マッチにおいて、大文字小文字を区別しないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>nosubs</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対して正規表現マッチしたときに、与えられた <classname linkend="ref.match_results">match_results</classname> 構造体に部分式マッチを格納しないように指定する。</td>
	</tr>
	<tr>
	  <td><constant>optimize</constant></td>
	  <td>○</td>
	  <td>正規表現エンジンに対し、正規表現オブジェクトの構築速度よりも正規表現マッチの速度についてより多くの注意を払うように指定する。設定しない場合でもプログラムの出力に検出可能な効果はない。Boost.Regex では現時点では何も起こらない。</td>
	</tr>
	<tr>
	  <td><constant>collate</constant></td>
	  <td>○</td>
	  <td><phrase role="regex-pattern">[a-b]</phrase> 形式の文字範囲がロカールを考慮するように指定する。</td>
	</tr>
	<tr>
	  <td><constant>newline_alt</constant></td>
	  <td>×</td>
	  <td><phrase role="regex-pattern">\n</phrase> 文字が選択演算子 <phrase role="regex-pattern">|</phrase> と同じ効果を持つように指定する。これにより、改行で区切られたリストが選択のリストとして動作する。</td>
	</tr>
	<tr>
	  <td><constant>no_except</constant></td>
	  <td>×</td>
	  <td>不正な式が見つかった場合に <classname linkend="ref.basic_regex">basic_regex</classname> が例外を投げるのを禁止する。</td>
	</tr>
	<tr>
	  <td><constant>no_mod_m</constant></td>
	  <td>×</td>
	  <td>通常 Boost.Regex は Perl の m 修飾子が設定された状態と同じ動作をし、表明 <phrase role="regex-pattern">^</phrase> および <phrase role="regex-pattern">$</phrase> はそれぞれ改行の直前および直後にマッチする。このフラグを設定するのは式の前に <phrase role="regex-pattern">(?-m)</phrase> を追加するのと同じである。</td>
	</tr>
	<tr>
	  <td><constant>no_mod_s</constant></td>
	  <td>×</td>
	  <td>通常 Boost.Regex において <phrase role="regex-pattern">.</phrase> が改行文字にマッチするかはマッチフラグ <constant>match_dot_not_newline</constant> により決まる。このフラグを設定するのは式の前に <phrase role="regex-pattern">(?-s)</phrase> を追加するのと同じであり、<phrase role="regex-pattern">.</phrase> はマッチフラグに <constant>match_dot_not_newline</constant> が設定されているかに関わらず改行文字にマッチしない。</td>
	</tr>
	<tr>
	  <td><constant>mod_s</constant></td>
	  <td>×</td>
	  <td>通常 Boost.Regex において <phrase role="regex-pattern">.</phrase> が改行文字にマッチするかはマッチフラグ <constant>match_dot_not_newline</constant> により決まる。このフラグを設定するのは式の前に <phrase role="regex-pattern">(?s)</phrase> を追加するのと同じであり、<phrase role="regex-pattern">.</phrase> はマッチフラグに <constant>match_dot_not_newline</constant> が設定されているかに関わらず改行文字にマッチする。</td>
	</tr>
	<tr>
	  <td><constant>mod_x</constant></td>
	  <td>×</td>
	  <td>Perl の x 修飾子を有効にする。正規表現中のエスケープされていない空白は無視される。</td>
	</tr>
	<tr>
	  <td><constant>no_empty_expressions</constant></td>
	  <td>×</td>
	  <td>空の部分式および選択を禁止する。</td>
	</tr>
	<tr>
	  <td><constant>save_subexpression_location</constant></td>
	  <td>×</td>
	  <td><emphasis>元の正規表現文字列</emphasis>における個々の部分式の位置に、<classname>basic_regex</classname> の <methodname linkend="ref.basic_regex.subexpression">subexpression()</methodname> メンバ関数でアクセス可能になる。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="ref.syntax_option_type.syntax_option_type_extended">
    <title>POSIX 拡張正規表現のオプション</title>
    <para>
      <link linkend="syntax.basic_extended">POSIX 拡張正規表現</link>では、以下のいずれか1つを必ず設定しなければならない。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>extended</constant></td>
	  <td>○</td>
	  <td>
	    <para>
	      正規表現エンジンが IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Base Definitions and Headers, Section 9, Regular Expressions (FWD.1) の POSIX 拡張正規表現で使用されているものと同じ文法に従うことを指定する。
	    </para>
	    <para>
	      詳細は <link linkend="syntax.basic_extended">POSIX 拡張正規表現ガイド</link>を参照せよ。
	    </para>
	    <para>
	      Perl スタイルのエスケープシーケンスもいくつかサポートする（POSIX 標準の定義では「特殊な」文字のみがエスケープ可能であり、他のエスケープシーケンスを使用したときの結果は未定義である）。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><constant>egrep</constant></td>
	  <td>○</td>
	  <td>
	    <para>
	      正規表現エンジンが IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, Utilities, grep (FWD.1) の POSIX ユーティリティに <option>-E</option> オプションを与えた場合と同じ文法に従うことを指定する。
	    </para>
	    <para>
	      つまり <link linkend="syntax.basic_extended">POSIX 拡張構文</link>と同じであるが、改行文字が <phrase role="regex-pattern">|</phrase> と同じく選択文字として動作する。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><constant>awk</constant></td>
	  <td>○</td>
	  <td>
	    <para>
	      正規表現エンジンが IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, awk (FWD.1) の POSIX ユーティリティ <command>awk</command> の文法に従うことを指定する。
	    </para>
	    <para>
	      つまり <link linkend="syntax.basic_extended">POSIX 拡張構文</link>と同じであるが、文字クラス中のエスケープシーケンスが許容される。
	    </para>
	    <para>
	      さらに Perl スタイルのエスケープシーケンスもいくつかサポートする（実際には <command>awk</command> の構文は <phrase role="regex-pattern">\a</phrase> 、<phrase role="regex-pattern">\b</phrase> 、<phrase role="regex-pattern">\t</phrase> 、<phrase role="regex-pattern">\v</phrase> 、<phrase role="regex-pattern">\f</phrase> 、<phrase role="regex-pattern">\n</phrase> および <phrase role="regex-pattern">\r</phrase> のみを要求しており、他のすべての Perl スタイルのエスケープシーケンスを使用したときの動作は未定義であるが、Boost.Regex では実際には後者も解釈する）。
	    </para>
	  </td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      POSIX 拡張正規表現を使用する場合は、以下のオプションを組み合わせることができる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>icase</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対する正規表現マッチにおいて、大文字小文字を区別しないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>nosubs</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対して正規表現マッチしたときに、与えられた <classname linkend="ref.match_results">match_results</classname> 構造体に部分式マッチを格納しないように指定する。</td>
	</tr>
	<tr>
	  <td><constant>optimize</constant></td>
	  <td>○</td>
	  <td>正規表現エンジンに対し、正規表現オブジェクトの構築速度よりも正規表現マッチの速度についてより多くの注意を払うように指定する。設定しない場合でもプログラムの出力に検出可能な効果はない。Boost.Regex では現時点では何も起こらない。</td>
	</tr>
	<tr>
	  <td><constant>collate</constant></td>
	  <td>○</td>
	  <td><phrase role="regex-pattern">[a-b]</phrase> 形式の文字範囲がロカールを考慮するように指定する。このビットは POSIX 拡張正規表現では既定でオンであるが、オフにして範囲をコードポイントのみで比較するようにすることが可能である。</td>
	</tr>
	<tr>
	  <td><constant>newline_alt</constant></td>
	  <td>×</td>
	  <td><phrase role="regex-pattern">\n</phrase> 文字が選択演算子 <phrase role="regex-pattern">|</phrase> と同じ効果を持つように指定する。これにより、改行で区切られたリストが選択のリストとして動作する。</td>
	</tr>
	<tr>
	  <td><constant>no_escape_in_lists</constant></td>
	  <td>×</td>
	  <td>設定するとエスケープ文字はリスト内で通常の文字として扱われる。よって <phrase role="regex-pattern">[\b]</phrase> は <phrase role="regex-input">\</phrase> か <phrase role="regex-input">b</phrase> にマッチする。このビットは POSIX 拡張正規表現では既定でオンであるが、オフにしてリスト内でエスケープが行われるようにすることが可能である。</td>
	</tr>
	<tr>
	  <td><constant>no_bk_refs</constant></td>
	  <td>×</td>
	  <td>設定すると後方参照が無効になる。このビットは POSIX 拡張正規表現では既定でオンであるが、オフにして後方参照を有効にすることが可能である。</td>
	</tr>
	<tr>
	  <td><constant>no_except</constant></td>
	  <td>×</td>
	  <td>不正な式が見つかった場合に <classname linkend="ref.basic_regex">basic_regex</classname> が例外を投げるのを禁止する。</td>
	</tr>
	<tr>
	  <td><constant>save_subexpression_location</constant></td>
	  <td>×</td>
	  <td><emphasis>元の正規表現文字列</emphasis>における個々の部分式の位置に、<classname>basic_regex</classname> の <methodname linkend="ref.basic_regex.subexpression">subexpression()</methodname> メンバ関数でアクセス可能になる。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="ref.syntax_option_type.syntax_option_type_basic">
    <title>POSIX 基本正規表現のオプション</title>
    <para>
      POSIX 基本正規表現では、以下のいずれか 1 つを必ず設定しなければならない。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>basic</constant></td>
	  <td>○</td>
	  <td>正規表現エンジンが IEEE　Std 1003.1-2001, Portable Operating System Interface　(POSIX), Base Definitions and Headers, Section 9, Regular Expressions (FWD.1) の <link linkend="syntax.basic_syntax">POSIX 基本正規表現</link>で使用されているものと同じ文法に従うことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>sed</constant></td>
	  <td>×</td>
	  <td>上に同じ。</td>
	</tr>
	<tr>
	  <td><constant>grep</constant></td>
	  <td>○</td>
	  <td>
	    <para>
	      正規表現エンジンが IEEE Std 1003.1-2001, Portable Operating System Interface (POSIX), Shells and Utilities, Section 4, Utilities, grep (FWD.1) の POSIX <command>grep</command> ユーティリティで使用されているものと同じ文法に従うことを指定する。
	    </para>
	    <para>
	      つまり <link linkend="syntax.basic_syntax">POSIX 基本構文</link>と同じであるが、改行文字が選択文字として動作する。式は改行区切りの選択リストとして扱われる。
	    </para>
	  </td>
	</tr>
	<tr>
	  <td><constant>emacs</constant></td>
	  <td>×</td>
	  <td>使用する文法が emacs プログラムで使われている <link linkend="syntax.basic_syntax">POSIX 基本構文</link>のスーパーセットであることを指定する。</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      POSIX 基本正規表現を使用する場合は、以下のオプションを組み合わせることができる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>icase</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対する正規表現マッチにおいて、大文字小文字を区別しないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>nosubs</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対して正規表現マッチしたときに、与えられた <classname linkend="ref.match_results">match_results</classname> 構造体に部分式マッチを格納しないように指定する。</td>
	</tr>
	<tr>
	  <td><constant>optimize</constant></td>
	  <td>○</td>
	  <td>正規表現エンジンに対し、正規表現オブジェクトの構築速度よりも正規表現マッチの速度についてより多くの注意を払うように指定する。設定しない場合でもプログラムの出力に検出可能な効果はない。Boost.Regex では現時点では何も起こらない。</td>
	</tr>
	<tr>
	  <td><constant>collate</constant></td>
	  <td>○</td>
	  <td><phrase role="regex-pattern">[a-b]</phrase> 形式の文字範囲がロカールを考慮するように指定する。このビットは <link linkend="syntax.basic_syntax">POSIX 基本正規表現</link>では既定でオンであるが、オフにして範囲をコードポイントのみで比較するようにすることが可能である。</td>
	</tr>
	<tr>
	  <td><constant>newline_alt</constant></td>
	  <td>○</td>
	  <td><phrase role="regex-pattern">\n</phrase> 文字が選択演算子 <phrase role="regex-pattern">|</phrase> と同じ効果を持つように指定する。これにより、改行で区切られたリストが選択のリストとしてはたらく。<constant>grep</constant> オプションの場合はこのビットは常にオンである。</td>
	</tr>
	<tr>
	  <td><constant>no_char_classes</constant></td>
	  <td>×</td>
	  <td>設定すると <phrase role="regex-pattern">[[:alnum:]]</phrase> のような文字クラスは認められないようになる。</td>
	</tr>
	<tr>
	  <td><constant>no_escape_in_lists</constant></td>
	  <td>×</td>
	  <td>設定するとエスケープ文字はリスト内で通常の文字として扱われる。よって <phrase role="regex-pattern">[\b]</phrase> は <phrase role="regex-input">\</phrase> か <phrase role="regex-input">b</phrase> にマッチする。このビットは <link linkend="syntax.basic_syntax">POSIX 基本正規表現</link>では既定でオンであるが、オフにしてリスト内でエスケープが行われるようにすることが可能である。</td>
	</tr>
	<tr>
	  <td><constant>no_intervals</constant></td>
	  <td>×</td>
	  <td>設定すると <phrase role="regex-pattern">{2,3}</phrase> のような境界付き繰り返しは認められないようになる。</td>
	</tr>
	<tr>
	  <td><constant>bk_plus_qm</constant></td>
	  <td>×</td>
	  <td>設定すると <phrase role="regex-pattern">\?</phrase> が 0 か 1 回の繰り返し演算子、<phrase role="regex-pattern">\+</phrase> が 1 回以上の繰り返し演算子として動作する。</td>
	</tr>
	<tr>
	  <td><constant>bk_vbar</constant></td>
	  <td>×</td>
	  <td>設定すると <phrase role="regex-pattern">\|</phrase> が選択演算子として動作する。</td>
	</tr>
	<tr>
	  <td><constant>no_except</constant></td>
	  <td>×</td>
	  <td>不正な式が見つかった場合に <classname linkend="ref.basic_regex">basic_regex</classname> が例外を投げるのを禁止する。</td>
	</tr>
	<tr>
	  <td><constant>save_subexpression_location</constant></td>
	  <td>×</td>
	  <td><emphasis>元の正規表現文字列</emphasis>における個々の部分式の位置に、<classname>basic_regex</classname> の <methodname linkend="ref.basic_regex.subexpression">subexpression()</methodname> メンバ関数でアクセス可能になる。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="ref.syntax_option_type.syntax_option_type_literal">
    <title>直値文字列のオプション</title>
    <para>
      直値文字列では、以下のいずれか 1 つを必ず設定しなければならない。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>literal</constant></td>
	  <td>○</td>
	  <td>文字列を直値として扱う（特殊文字が存在しない）。</td>
	</tr>
      </tbody>
    </informaltable>
    <para>
      <constant>literal</constant> フラグを使用する場合は、以下のオプションを組み合わせることができる。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>要素</th>
	  <th>標準か</th>
	  <th>設定した場合の効果</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><constant>icase</constant></td>
	  <td>○</td>
	  <td>文字コンテナシーケンスに対する正規表現マッチにおいて、大文字小文字を区別しないことを指定する。</td>
	</tr>
	<tr>
	  <td><constant>optimize</constant></td>
	  <td>○</td>
	  <td>正規表現エンジンに対し、正規表現オブジェクトの構築速度よりも正規表現マッチの速度についてより多くの注意を払うように指定する。設定しない場合でもプログラムの出力に検出可能な効果はない。Boost.Regex では現時点では何も起こらない。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>
</section>
