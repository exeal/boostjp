<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.type_id">
  <title>boost/python/type_id.hpp</title>

  <section xml:id="v2.type_id.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/type_id.hpp&gt;</filename> は、<filename class="headerfile">&lt;typeinfo&gt;</filename> のような実行時型識別のための型および関数を提供する。主にコンパイラのバグやプラットフォーム固有の共有ライブラリとの相互作用に対する回避策のために存在する。
    </para>
  </section>

  <section xml:id="v2.type_id.classes">
    <title>クラス</title>

    <section xml:id="v2.type_id.type_info-spec">
      <title><classname>type_info</classname> クラス</title>
      <para>
	<classname>type_info</classname> インスタンスは型を識別する。<classname>std::type_info</classname> が規定しているとおり（ただしコンパイラによっては異なる実装をしている場合もある）、<classname>boost::python::type_info</classname> はトップレベルの参照や CV 指定子を表現しない（C++ 標準の 5.2.8 節を見よ）。<classname>std::type_info</classname> と異なり <classname>boost::python::type_info</classname> インスタンスはコピー可能であり、共有ライブラリ境界をまたいで確実に動作する。
      </para>

      <section xml:id="v2.type_id.type_info-spec-synopsis">
	<title><classname>type_info</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  class type_info : <classname xlink:href="http://www.boost.org/libs/utility/operators.htm#totally_ordered1">totally_ordered</classname>&lt;type_info&gt;
  {
   public:
      // コンストラクタ
      type_info(std::type_info const&amp; = typeid(void));

      // 比較
      bool operator&lt;(type_info const&amp; rhs) const;
      bool operator==(type_info const&amp; rhs) const;

      // オブザーバ
      char const* name() const;
  };
}}</programlisting>
      </section>

      <section xml:id="v2.type_id.type_info-spec-ctors">
	<title><classname>type_info</classname> クラスのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>type_info</methodname>
	      <methodparam>
		<type>std::type_info const&amp;</type>
		<parameter/>
		<initializer>typeid(void)</initializer>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    引数と同じ型を識別する <classname>type_info</classname> オブジェクトを構築する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    <classname>type_info</classname> オブジェクトの配列の作成が必要になることがあるため、親切にも既定の引数が与えられている。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>注意：</term>
		<listitem>
		  <para>
		    このコンストラクタはコンパイラの <code language="C++">typeid()</code> 実装の非準拠を修正し<emphasis>ない</emphasis>。以下の <function linkend="v2.type_id.type_id-spec">type_id</function> を見よ。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.type_id.type_info-spec-comparisons">
	<title><classname>type_info</classname> クラスの比較関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>operator&lt;</methodname>
	      <methodparam>
		<type>type_info const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <classname>type_info</classname> オブジェクト間の全順序を与える。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>operator==</methodname>
	      <methodparam>
		<type>type_info const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    2 つの値が同じ型を示す場合は <constant>true</constant>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>注意：</term>
		<listitem>
		  <para>
		    <code language="C++"><classname xlink:href="http://www.boost.org/libs/utility/operators.htm#totally_ordered1">totally_ordered</classname>&lt;type_info&gt;</code> を非公開基底クラスとして使用すると、<code language="C++">&lt;=</code> 、<code language="C++">&gt;=</code> 、<code language="C++">&gt;</code> および <code language="C++">!=</code> が提供される。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.type_id.type_info-spec-observers">
	<title><classname>type_info</classname> クラスのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>char const*</type>
	      <methodname>name</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    オブジェクトの構築に使用した引数に対して <methodname>name()</methodname> を呼び出した結果。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.type_id.functions">
    <title>関数</title>

    <section xml:id="v2.type_id.lshift-spec">
      <title>operator&lt;&lt;</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>std::ostream&amp; <function>operator&lt;&lt;</function></funcdef>
	      <paramdef>std::ostream&amp; <parameter>s</parameter></paramdef>
	      <paramdef>type_info const&amp; <parameter>x</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <parameter>x</parameter> が指定する型の説明を <parameter>s</parameter> に書き込む。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>根拠：</term>
	      <listitem>
		<para>
		  すべての C++ 実装が真に可読可能な <methodname>type_info::name()</methodname> 文字列を提供するわけではないが、文字列を復号化して手ごろな表現を生成できる場合がある。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>


    <section xml:id="v2.type_id.type_id-spec">
      <title>type_id</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class T&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>type_info <function>type_id</function></funcdef>
	      <void/>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  <code language="C++">type_info(typeid(T))</code>
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>注意：</term>
	      <listitem>
		<para>
		  標準に非準拠ないくつかの C++ 実装において、コードは実際には上記のように単純ではない。その C++ 実装が標準に準拠している<emphasis>かのように</emphasis>動作するようセマンティクスを調整する。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="v2.type_id.examples">
    <title>例</title>
    <para>
      以下の例は、多少醜いが <function>type_id</function> 機能の使用方法を示している。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/python/type_id.hpp>

// ユーザが int の引数を渡した場合にtrueを返す
template <class T>
bool is_int(T x)
{
   using boost::python::type_id;
   return type_id<T>() == type_id<int>();
}]]></programlisting>
  </section>
</section>
