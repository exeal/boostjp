<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.instance_holder">
  <title>boost/python/instance_holder.hpp</title>

  <section xml:id="v2.instance_holder.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/instance_holder.hpp&gt;</filename> は、ラップするクラスの C++ インスタンスを保持する型の基底クラスである <classname>instance_holder</classname> クラスを提供する。
    </para>
  </section>

  <section xml:id="v2.instance_holder.classes">
    <title>クラス</title>

    <section xml:id="v2.instance_holder.instance_holder-spec">
      <title><classname>instance_holder</classname> クラス</title>
      <para>
	<classname>instance_holder</classname> は、その具象派生クラスが Python のオブジェクトラッパ内で C++ クラスインスタンスを保持する抽象基底クラスである。Python 内で C++ クラスラッパからの多重継承を可能にするために、そのような各 Python オブジェクトは数珠繋ぎの <classname>instance_holder</classname> を持つ。ラップする C++ クラスの <methodname>__init__</methodname> 関数が呼び出されると新しい <classname>instance_holder</classname> インスタンスが作成され、その <methodname>install()</methodname> 関数を使用して Python オブジェクトにインストールされる。<classname>instance_holder</classname> の各具象派生クラスは、保持する型について Boost.Python が問い合わせできるよう <methodname>holds()</methodname> の実装を提供しなければならない。保持する型をラップするコンストラクタをサポートするため、クラスは所有する Python オブジェクトを第 1 引数 <type>PyObject*</type> として受け取り、残りの引数を保持する型のコンストラクタに転送するコンストラクタも提供しなければならない。第 1 引数は Python 内で仮想関数をオーバーライド可能にするのに必要であり、<classname>instance_holder</classname> 派生クラスによっては無視される可能性がある。
      </para>

      <section xml:id="v2.instance_holder.instance_holder-spec-synopsis">
	<title><classname>instance_holder</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  class instance_holder : <classname xlink:href="http://www.boost.org/doc/libs/utility/utility.htm#Class_noncopyable">noncopyable</classname>
  {
   public:
      // デストラクタ
      virtual ~instance_holder();

      // instance_holder の変更関数
      void install(PyObject* inst) throw();

      // instance_holder のオブザーバ
      virtual void* holds(type_info) = 0;
  };
}}</programlisting>
      </section>

      <section xml:id="v2.instance_holder.instance_holder-spec-ctors">
	<title><classname>instance_holder</classname> クラスのデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <destructorsynopsis language="C++">
	      <modifier>virtual</modifier>
	      <methodname>~instance_holder</methodname>
	      <void/>
	    </destructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    オブジェクトを破壊する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.instance_holder.instance_holder-spec-modifiers">
	<title><classname>instance_holder</classname> クラスの変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>install</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>inst</parameter>
	      </methodparam>
	      <modifier>throw()</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>inst</parameter> が、ラップする C++ クラス型かその派生型の Python のインスタンスである。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    新しいインスタンスを、保持するインスタンスの Python オブジェクトの数珠繋ぎの先頭にインストールする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.instance_holder.instance_holder-spec-observers">
	<title><classname>instance_holder</classname> クラスのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>virtual</modifier>
	      <type>void*</type>
	      <methodname>holds</methodname>
	      <methodparam>
		<type>type_info</type>
		<parameter>x</parameter>
	      </methodparam>
	      <modifier>= 0</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> がオブジェクトを保持している場合、<parameter>x</parameter> が示す型のオブジェクトへのポインタ。それ以外の場合 0。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.instance_holder.examples">
    <title>例</title>
    <para>
      以下の例は、Boost.Python がスマートポイントが保持するクラスをラップするのに使用しているインスタンスホルダテンプレートの簡易バージョンである。
    </para>
    <programlisting language="C++"><![CDATA[template <class SmartPtr, class Value>
struct pointer_holder : instance_holder
{
   // SmartPtr 型から構築する
   pointer_holder(SmartPtr p)
       :m_p(p)

   // 保持する型の転送コンストラクタ
   pointer_holder(PyObject*)
       :m_p(new Value())
   {
   }

   template<class A0>
   pointer_holder(PyObject*,A0 a0)
       :m_p(new Value(a0))
   {
   }

   template<class A0,class A1>
   pointer_holder(PyObject*,A0 a0,A1 a1)
       :m_p(new Value(a0,a1))
   {
   }
   ...

 private: // ホルダに必要な実装
   void* holds(type_info dst_t)
   {
       // SmartPtr 型のインスタンスと...
       if (dst_t == python::type_id<SmartPtr>())
           return &this->m_p;

       // ...SmartPtr の element_type インスタンス
       // （ポインタが非 null の場合）を保持する
       return python::type_id<Value>() == dst_t ? &*this->m_p : 0;
   }

 private: // データメンバ
   SmartPtr m_p;
};]]></programlisting>
  </section>
</section>
