<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.to_python_indirect">
  <title>boost/python/to_python_indirect.hpp</title>

  <section xml:id="v2.to_python_indirect.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/to_python_indirect.hpp&gt;</filename> は、ラップした C++ クラスインスタンスをポインタかスマートポインタで保持する新しい Python オブジェクトを構築する手段を提供する。
    </para>
  </section>

  <section xml:id="v2.to_python_indirect.classes">
    <title>クラス</title>

    <section xml:id="v2.to_python_indirect.to_python_indirect-spec">
      <title><classname>to_python_indirect</classname> クラステンプレート</title>
      <para>
	<classname>to_python_indirect</classname> クラステンプレートは第 1 引数型のオブジェクトを拡張クラスのインスタンスとして Python に変換する。第 2 引数で与えた所有権ポリシーを使用する。
      </para>
      <para>
	以下の表で <varname>x</varname> は型 <type>T</type> のオブジェクト、<varname>h</varname> は <type>boost::python::objects::instance_holder*</type> 型のオブジェクト、<varname>p</varname> は型 <type>U*</type> のオブジェクトである。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>説明</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>T</type></td>
	    <td><type>U <replaceable>cv</replaceable>&amp;</type>（<replaceable>cv</replaceable> は省略可能な CV 指定子）か、<code language="C++">*x</code> が <type>U const&amp;</type> に変換可能な <link linkend="v2.Dereferenceable">Dereferenceable</link> 型のいずれか（<type>U</type> はクラス型）。</td>
	    <td><classname linkend="v2.class.class_-spec">class_</classname> クラステンプレートで Python へエクスポートする C++ クラスを参照剥がしする型。</td>
	  </tr>
	  <tr>
	    <td><type>MakeHolder</type></td>
	    <td><code language="C++">h = MakeHolder::execute(p);</code></td>
	    <td>静的関数 <methodname>execute()</methodname> が <classname>instance_holder</classname> を作成するクラス。</td>
	  </tr>
	</tbody>
      </informaltable>
      <para>
	<classname>to_python_indirect</classname> のインスタンスは <link linkend="v2.ResultConverter.ResultConverter-concept">ResultConverter</link> のモデルである。
      </para>

      <section xml:id="v2.to_python_indirect.to_python_indirect-spec-synopsis">
	<title><classname>to_python_indirect</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class T, class MakeHolder>
  struct to_python_indirect
  {
     static bool convertible();
     PyObject* operator()(T ptr_or_reference) const;
   private:
     static PyTypeObject* type();
  };
}}]]></programlisting>
      </section>

      <section xml:id="v2.to_python_indirect.to_python_indirect-spec-observers">
	<title><classname>to_python_indirect</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>T</type>
		<parameter>x</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>x</parameter> はオブジェクトへの参照（ポインタ型の場合、非 null)。かつ <code language="C++">convertible() == true</code>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    適切に型付けされた Boost.Python 拡張クラスのインスタンスを作成し、<type>MakeHolder</type> を使用して <parameter>x</parameter> から <classname>instance_holder</classname> を作成する。次に新しい拡張クラスインスタンス内に <classname>instance_holder</classname> をインストールし、最後にそれへのポインタを返す。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.to_python_indirect.to_python_indirect-spec-statics">
	<title><classname>to_python_indirect</classname> クラステンプレートの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>convertible</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    いずれかのモジュールが <type>U</type> に対応する Python 型を登録していれば <constant>true</constant>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.to_python_indirect.examples">
    <title>例</title>
    <para>
      <classname linkend="v2.reference_existing_object.reference_existing_object-spec">reference_existing_object</classname> の機能をコンパイル時のエラーチェックを省いて模造した例。
    </para>
    <programlisting language="C++">struct make_reference_holder
{
   typedef boost::python::objects::instance_holder* result_type;
   template &lt;class T&gt;
   static result_type execute(T* p)
   {
      return new boost::python::objects::pointer_holder&lt;T*, T&gt;(p);
   }
};

struct reference_existing_object
{
   // <link linkend="v2.ResultConverter.ResultConverter-concept">ResultConverter</link> を返すメタ関数
   template &lt;class T&gt;
   struct apply
   {
      typedef boost::python::to_python_indirect&lt;T,make_reference_holder&gt; type;
   };
};</programlisting>
  </section>
</section>
