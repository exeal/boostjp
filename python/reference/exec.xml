<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.exec">
  <title>boost/python/exec.hpp</title>

  <section xml:id="v2.exec.introduction">
    <title>はじめに</title>
    <para>
      Python のインタープリタを C++ コードへ組み込む機構をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.exec.functions">
    <title>関数</title>

    <section xml:id="v2.exec.eval-spec">
      <title><function>eval</function></title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>object <function>eval</function></funcdef>
	      <paramdef>str <parameter>expression</parameter></paramdef>
	      <paramdef>object <parameter>globals</parameter> = object()</paramdef>
	      <paramdef>object <parameter>locals</parameter> = object()</paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  辞書 <parameter>globals</parameter> および <parameter>locals</parameter> が指定した文脈で Python の式 <parameter>expression</parameter> を評価する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  式の値を保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="v2.exec.exec-spec">
      <title><function>exec</function></title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>object <function>exec</function></funcdef>
	      <paramdef>str <parameter>code</parameter></paramdef>
	      <paramdef>object <parameter>globals</parameter> = object()</paramdef>
	      <paramdef>object <parameter>locals</parameter> = object()</paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  辞書 <parameter>globals</parameter> および <parameter>locals</parameter> が指定した文脈で Python のソースコード <parameter>code</parameter> を実行する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  コードの実行結果を保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="v2.exec.exec_file-spec">
      <title><function>exec_file</function></title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>object <function>exec_file</function></funcdef>
	      <paramdef>str <parameter>filename</parameter></paramdef>
	      <paramdef>object <parameter>globals</parameter> = object()</paramdef>
	      <paramdef>object <parameter>locals</parameter> = object()</paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  辞書 <parameter>globals</parameter> および <parameter>locals</parameter> が指定した文脈で、<parameter>filename</parameter> で与えた名前のファイルから Python のソースコードを実行する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  コードの実行結果を保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="v2.exec.examples">
    <title>例</title>
    <para>
      以下の例は、<function>import</function> と <function>exec</function> を使用して Python で関数を定義し、後で C++ から呼び出している。
    </para>
    <programlisting language="C++"><![CDATA[#include <iostream>
#include <string>

using namespace boost::python;

void greet()
{ 
  // main モジュールを得る。
  object main = import("__main__");
  
  // main モジュールの名前空間を得る。
  object global(main.attr("__dict__"));

  // Python 内で greet 関数を定義する。
  object result = exec(
    "def greet():                   \n"
    "   return 'Hello from Python!' \n",
    global, global);

  // greet 関数への参照を作成する。
  object greet = global["greet"];

  // 呼び出す。
  std::string message = extract<std::string>(greet());
  std::cout << message << std::endl;
}]]></programlisting>
    <para>
      文字列に Python のスクリプトを組み込む代わりに、ファイルに格納しておいてもよい。
    </para>
    <programlisting language="Python"><![CDATA[def greet():
   return 'Hello from Python!']]></programlisting>
    <para>
      代わりにこれを実行する。
    </para>
    <programlisting language="C++"><![CDATA[ // ...
  // ファイルから greet 関数を読み込む。
  object result = exec_file(script, global, global);
  // ...
}]]></programlisting>
  </section>
</section>
