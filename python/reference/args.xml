<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.args">
  <title>boost/python/args.hpp</title>

  <section xml:id="v2.args.introduction">
    <title>はじめに</title>
    <para>
      ラップした C++ 関数にキーワード引数を指定する多重定義関数群を提供する。
    </para>
  </section>

  <section xml:id="v2.args.keyword-expression">
    <title><nonterminal def="">keyword-expression</nonterminal></title>
    <para>
      <nonterminal def="">keyword-expression</nonterminal> の結果は <glossterm baseform="ntbs">ntbs</glossterm> の列を保持するオブジェクトであり、その型は指定したキーワードの数を符号化する。<nonterminal def="">keyword-expression</nonterminal> は保持する一部またはすべてのキーワードについて既定値を持つことが可能である。
    </para>
  </section>

  <section xml:id="v2.args.classes">
    <title>クラス</title>

    <section xml:id="v2.args.arg-spec">
      <title>arg クラス</title>
      <para>
	<classname>arg</classname> クラスのオブジェクトは 1 つのキーワードを保持する（サイズが 1 である）<nonterminal def="">keyword-expression</nonterminal> である。
      </para>

      <section xml:id="v2.args.arg-synopsis">
	<title><classname>arg</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
        struct arg 
        {
          template <class T>
                  arg &operator = (T const &value);
          explicit arg (char const *name){elements[0].name = name;}
        };

}}]]></programlisting>
      </section>

      <section xml:id="v2.args.arg-ctor">
	<title><classname>arg</classname> クラスのコンストラクタ</title>
	<constructorsynopsis language="C++">
	  <methodname>arg</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>name</parameter>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		引数は <glossterm baseform="ntbs">ntbs</glossterm> でなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		名前 <parameter>name</parameter> のキーワードを保持する <classname>arg</classname> オブジェクトを構築する。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>

      <section xml:id="v2.args.arg-operator">
	<title><classname>arg</classname> クラスの <methodname>operator=</methodname> テンプレート</title>
	<methodsynopsis language="C++">
	  <modifier>template &lt;class T&gt;</modifier>
	  <type>arg &amp;</type>
	  <methodname>operator =</methodname>
	  <methodparam>
	    <type>T const &amp;</type>
	    <parameter>value</parameter>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		引数は Python へ変換可能でなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		キーワードの既定値を代入する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<code language="C++">this</code> への参照。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>
    </section>
  </section>

  <section xml:id="v2.args.keyword-expression-operators">
    <title><nonterminal def="">keyword-expression</nonterminal> の <function>operator ,</function></title>
    <funcsynopsis language="C++">
      <funcprototype>
	<?dbhtml funcsynopsis-style="ansi"?>
	<funcdef><replaceable>keyword-expression</replaceable> <function>operator ,</function></funcdef>
	<paramdef><parameter><replaceable>keyword-expression</replaceable></parameter></paramdef>
	<paramdef>const arg &amp;<parameter>kw</parameter></paramdef>
      </funcprototype>
      <funcsynopsisinfo>const</funcsynopsisinfo>
    </funcsynopsis>
    <funcsynopsis language="C++">
      <funcprototype>
	<?dbhtml funcsynopsis-style="ansi"?>
	<funcdef><replaceable>keyword-expression</replaceable> <function>operator ,</function></funcdef>
	<paramdef><parameter><replaceable>keyword-expression</replaceable></parameter></paramdef>
	<paramdef>const char *<parameter>name</parameter></paramdef>
      </funcprototype>
      <funcsynopsisinfo>const</funcsynopsisinfo>
    </funcsynopsis>
    <variablelist spacing="compact">
      <varlistentry>
	<term>要件：</term>
	<listitem>
	  <para>
	    引数 <parameter>name</parameter> は <glossterm baseform="ntbs">ntbs</glossterm> でなければならない。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>効果：</term>
	<listitem>
	  <para>
	    1 つ以上のキーワードで <nonterminal def="">keyword-expression</nonterminal> 引数を拡張する。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>戻り値：</term>
	<listitem>
	  <para>
	    拡張した <nonterminal def="">keyword-expression</nonterminal>。
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="v2.args.functions">
    <title>関数（非推奨）</title>

    <section xml:id="v2.args.args-spec">
      <title>args(...)</title>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><replaceable>unspecified1</replaceable> <function>args</function></funcdef>
	  <paramdef>char const*</paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><replaceable>unspecified2</replaceable> <function>args</function></funcdef>
	  <paramdef>char const*</paramdef>
	  <paramdef>char const*</paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>...</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><replaceable>unspecifiedN</replaceable> <function>args</function></funcdef>
	  <paramdef>char const*</paramdef>
	  <paramdef>char const*</paramdef>
	  <paramdef>... char const*</paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      引数はすべて <glossterm baseform="ntbs">ntbs</glossterm> でなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>戻り値：</term>
	  <listitem>
	    <para>
	      渡した引数をカプセル化する <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> を表すオブジェクト。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="v2.args.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/def.hpp>
using namespace boost::python;

int f(double x, double y, double z=0.0, double w=1.0);

BOOST_PYTHON_MODULE(xxx)
{
   def("f", f
            , ( arg("x"), "y", arg("z")=0.0, arg("w")=1.0 ) 
            );
}]]></programlisting>
  </section>
</section>
