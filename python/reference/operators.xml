<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.operators">
  <title>boost/python/operators.hpp</title>

  <section xml:id="v2.operators.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/operators.hpp&gt;</filename> は、Python の<link xlink:href="http://docs.python.jp/2/library/operator.html">特殊メソッド</link>を C++ の対応する構造から自動的に生成する型と関数を提供する。これらの構造の大半は演算子式であり、ヘッダの名前はそこから来ている。この機能を使用するには、エクスポートする式中でラップするクラス型のオブジェクトを <constant linkend="v2.operators.self-spec">self</constant> オブジェクトで置き換え、その結果を <methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def()</methodname> へ渡す。このヘッダがエクスポートするものの大半は実装部分と考えるべきであり、本稿では詳細について記述しない。
    </para>
  </section>

  <section xml:id="v2.operators.classes">
    <title>クラス</title>

    <section xml:id="v2.operators.self_t-spec">
      <title><classname>self_ns::self_t</classname> クラス</title>
      <para>
	<classname>self_ns::self_t</classname> は <constant linkend="v2.operators.self-spec">self</constant> オブジェクトの実際の型である。ライブラリは <classname>self_t</classname> を自身の名前空間 <package>self_ns</package> 内に分離し、他の文脈で引数依存の探索により一般化された演算子テンプレートが発見されるのを防ぐ。ユーザが直接 <classname>self_t</classname> に触れることはないため、これは実装の詳細と考えるべきである。
      </para>

      <section xml:id="v2.operators.self_t-spec-synopsis">
	<title><classname>self_ns::self_t</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python { namespace self_ns {
{
   <replaceable>unspecified-type-declaration</replaceable> self_t;

   // 複合演算子
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator+=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator-=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator*=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator/=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator%=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&gt;&gt;=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&lt;&lt;=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&amp;=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator^=(self_t, T);
   template &lt;class T&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator|=(self_t, T);

   // 比較演算子
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator==(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator!=(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&lt;(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&gt;(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&lt;=(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&gt;=(L const&amp;, R const&amp;);

   // 非メンバ演算子
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator+(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator-(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator*(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator/(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator%(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&gt;&gt;(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&lt;&lt;(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator&amp;(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator^(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator|(L const&amp;, R const&amp;);
   template &lt;class L, class R&gt; <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; pow(L const&amp;, R const&amp;);

   // 単項演算子
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator-(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator+(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator~(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; operator!(self_t);

   // 値操作
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; int_(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; long_(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; float_(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; complex_(self_t);
   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; str(self_t);

   <classname linkend="v2.operators.operator_-spec">operator_</classname>&lt;<replaceable>unspecified</replaceable>&gt; repr(self_t);

}}};</programlisting>
	<para>
	  各式の結果を <methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def()</methodname> の引数として渡したときに生成されるメソッドを以下の表に挙げる。<varname>x</varname> はラップするクラス型のオブジェクトである。
	</para>
      </section>

      <section xml:id="v2.operators.self_t-spec-inplace">
	<title><classname>self_t</classname> クラスの複合演算子</title>
	<para>
	  下表において <varname>r</varname> が<classname linkend="v2.operators.other-spec">other&lt;T&gt;</classname> 型のオブジェクトの場合、<varname>y</varname> は型 <type>T</type> のオブジェクトである。それ以外の場合、<varname>y</varname> は <varname>r</varname> と同じ型のオブジェクトである。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>C++ の式</th>
	      <th>Python のメソッド名</th>
	      <th>C++ の実装</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">self += r</code></td>
	      <td><methodname>__iadd__</methodname></td>
	      <td><code language="C++">x += y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self -= r</code></td>
	      <td><methodname>__isub__</methodname></td>
	      <td><code language="C++">x -= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self *= r</code></td>
	      <td><methodname>__imul__</methodname></td>
	      <td><code language="C++">x *= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self /= r</code></td>
	      <td><methodname>__idiv__</methodname></td>
	      <td><code language="C++">x /= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self %= r</code></td>
	      <td><methodname>__imod__</methodname></td>
	      <td><code language="C++">x %= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &gt;&gt;= r</code></td>
	      <td><methodname>__irshift__</methodname></td>
	      <td><code language="C++">x &gt;&gt;= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &lt;&lt;= r</code></td>
	      <td><methodname>__ilshift__</methodname></td>
	      <td><code language="C++">x &lt;&lt;= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &amp;= r</code></td>
	      <td><methodname>__iand__</methodname></td>
	      <td><code language="C++">x &amp;= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self ^= r</code></td>
	      <td><methodname>__ixor__</methodname></td>
	      <td><code language="C++">x ^= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self |= r</code></td>
	      <td><methodname>__ior__</methodname></td>
	      <td><code language="C++">x |= y</code></td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="v2.operators.self_t-spec-comparisons">
	<title><classname>self_t</classname> クラスの比較関数</title>
	<para>
	  下表において <varname>r</varname> が <classname linkend="v2.operators.self_t-spec">self_t</classname> 型の場合、<varname>y</varname> は <varname>x</varname> と同じ型のオブジェクトである。<varname>l</varname> か <varname>r</varname> が <classname linkend="v2.operators.other-spec">other&lt;T&gt;</classname> 型のオブジェクトの場合、<varname>y</varname> は型 <type>T</type> のオブジェクトである。それ以外の場合、<varname>y</varname> は <varname>l</varname> か <varname>r</varname> と同じ型のオブジェクトであり、<varname>l</varname> は <classname linkend="v2.operators.self_t-spec">self_t</classname> 型以外である。
	</para>
	<para>
	  「Python の式」の列は、<varname>x</varname> および <varname>y</varname> の型へ変換可能なオブジェクトについて Python がサポートする式を表す。2 番目の演算は Python の高水準比較演算子の<link xlink:href="http://docs.python.org/2/reference/datamodel.html">反射則</link>（可換則）により生じるもので、対応する演算が <varname>y</varname> オブジェクトのメソッドとして定義されない場合のみ使用される。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>C++ の式</th>
	      <th>Python のメソッド名</th>
	      <th>C++ の実装</th>
	      <th>Python の式（1 番目、2 番目）</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">self == r</code></td>
	      <td><methodname>__eq__</methodname></td>
	      <td><code language="C++">x == y</code></td>
	      <td><code language="Python">x == y, y == x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l == self</code></td>
	      <td><methodname>__eq__</methodname></td>
	      <td><code language="C++">y == x</code></td>
	      <td><code language="Python">y == x, x == y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self != r</code></td>
	      <td><methodname>__ne__</methodname></td>
	      <td><code language="C++">x != y</code></td>
	      <td><code language="Python">x != y, y != x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l != self</code></td>
	      <td><methodname>__ne__</methodname></td>
	      <td><code language="C++">y != x</code></td>
	      <td><code language="Python">y != x, x != y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &lt; r</code></td>
	      <td><methodname>__lt__</methodname></td>
	      <td><code language="C++">x &lt; y</code></td>
	      <td><code language="Python">x &lt; y, y &gt; x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &lt; self</code></td>
	      <td><methodname>__gt__</methodname></td>
	      <td><code language="C++">y &lt; x</code></td>
	      <td><code language="Python">y &gt; x, x &lt; y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &gt; r</code></td>
	      <td><methodname>__gt__</methodname></td>
	      <td><code language="C++">x &gt; y</code></td>
	      <td><code language="Python">x &gt; y, y &lt; x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &gt; self</code></td>
	      <td><methodname>__lt__</methodname></td>
	      <td><code language="C++">y &gt; x</code></td>
	      <td><code language="Python">y &lt; x, x &gt; y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &lt;= r</code></td>
	      <td><methodname>__le__</methodname></td>
	      <td><code language="C++">x &lt;= y</code></td>
	      <td><code language="Python">x &lt;= y, y &gt;= x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &lt;= self</code></td>
	      <td><methodname>__ge__</methodname></td>
	      <td><code language="C++">y &lt;= x</code></td>
	      <td><code language="Python">y &gt;= x, x &lt;= y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &gt;= r</code></td>
	      <td><methodname>__ge__</methodname></td>
	      <td><code language="C++">x &gt;= y</code></td>
	      <td><code language="Python">x &gt;= y, y &lt;= x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &gt;= self</code></td>
	      <td><methodname>__le__</methodname></td>
	      <td><code language="C++">y &gt;= x</code></td>
	      <td><code language="Python">y &lt;= x, x &gt;= y</code></td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="v2.operators.self_t-spec-ops">
	<title><classname>self_t</classname> クラスの非メンバ演算子</title>
	<para>
	  <link xlink:href="http://docs.python.jp/2/reference/datamodel.html#numeric-types">ここ</link>で述べられているように、以下の名前が「<code language="Python">__r</code>」で始まる演算は左オペランドが与えられた演算をサポートしない場合のみ呼び出される。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>C++ の式</th>
	      <th>Python のメソッド名</th>
	      <th>C++ の実装</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">self + r</code></td>
	      <td><methodname>__add__</methodname></td>
	      <td><code language="C++">x + y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l + self</code></td>
	      <td><methodname>__radd__</methodname></td>
	      <td><code language="C++">y + x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self - r</code></td>
	      <td><methodname>__sub__</methodname></td>
	      <td><code language="C++">x - y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l - self</code></td>
	      <td><methodname>__rsub__</methodname></td>
	      <td><code language="C++">y - x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self * r</code></td>
	      <td><methodname>__mul__</methodname></td>
	      <td><code language="C++">x * y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l * self</code></td>
	      <td><methodname>__rmul__</methodname></td>
	      <td><code language="C++">y * x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self / r</code></td>
	      <td><methodname>__div__</methodname></td>
	      <td><code language="C++">x / y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l / self</code></td>
	      <td><methodname>__rdiv__</methodname></td>
	      <td><code language="C++">y / x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self % r</code></td>
	      <td><methodname>__mod__</methodname></td>
	      <td><code language="C++">x % y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l % self</code></td>
	      <td><methodname>__rmod__</methodname></td>
	      <td><code language="C++">y % x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &gt;&gt; r</code></td>
	      <td><methodname>__rshift__</methodname></td>
	      <td><code language="C++">x &gt;&gt; y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &gt;&gt; self</code></td>
	      <td><methodname>__rrshift__</methodname></td>
	      <td><code language="C++">y &gt;&gt; x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &lt;&lt; r</code></td>
	      <td><methodname>__lshift__</methodname></td>
	      <td><code language="C++">x &lt;&lt; y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &lt;&lt; self</code></td>
	      <td><methodname>__rlshift__</methodname></td>
	      <td><code language="C++">y &lt;&lt; x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self &amp; r</code></td>
	      <td><methodname>__and__</methodname></td>
	      <td><code language="C++">x &amp; y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l &amp; self</code></td>
	      <td><methodname>__rand__</methodname></td>
	      <td><code language="C++">y &amp; x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self ^ r</code></td>
	      <td><methodname>__xor__</methodname></td>
	      <td><code language="C++">x ^ y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l ^ self</code></td>
	      <td><methodname>__rxor__</methodname></td>
	      <td><code language="C++">y ^ x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">self | r</code></td>
	      <td><methodname>__or__</methodname></td>
	      <td><code language="C++">x | y</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">l | self</code></td>
	      <td><methodname>__ror__</methodname></td>
	      <td><code language="C++">y | x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">pow(self, r)</code></td>
	      <td><methodname>__pow__</methodname></td>
	      <td><code language="C++">pow(x, y)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">pow(l, self)</code></td>
	      <td><methodname>__rpow__</methodname></td>
	      <td><code language="C++">pow(y, x)</code></td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="v2.operators.self_t-spec-value-unary-ops">
	<title><classname>self_t</classname> クラスの単項演算子</title>
	<informaltable>
	  <thead>
	    <tr>
	      <th>C++ の式</th>
	      <th>Python のメソッド名</th>
	      <th>C++ の実装</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">-self</code></td>
	      <td><code language="Python">__neg__</code></td>
	      <td><code language="C++">-x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">+self</code></td>
	      <td><code language="Python">__pos__</code></td>
	      <td><code language="C++">+x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">~self</code></td>
	      <td><code language="Python">__invert__</code></td>
	      <td><code language="C++">~x</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">not self</code> または <code language="C++">!self</code></td>
	      <td><code language="Python">__nonzero__</code></td>
	      <td><code language="C++">!!x</code></td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="v2.operators.self_t-spec-value-ops">
	<title><classname>self_t</classname> クラスの値演算</title>
	<informaltable>
	  <thead>
	    <tr>
	      <td>C++ の式</td>
	      <td>Python のメソッド</td>
	      <td>C++ の実装</td>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">int_(self)</code></td>
	      <td><methodname>__int__</methodname></td>
	      <td><code language="C++">long(x)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">long_</code></td>
	      <td><methodname>__long__</methodname></td>
	      <td><code language="C++">PyLong_FromLong(x)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">float_</code></td>
	      <td><methodname>__float__</methodname></td>
	      <td><code language="C++">double(x)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">complex_</code></td>
	      <td><methodname>__complex__</methodname></td>
	      <td><code language="C++">std::complex&lt;double&gt;(x)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">str</code></td>
	      <td><methodname>__str__</methodname></td>
	      <td><code language="C++"><function xlink:href="http://www.boost.org/libs/conversion/lexical_cast.htm">lexical_cast</function>&lt;std::string&gt;(x)</code></td>
	    </tr>
	    <tr>
	      <td><code language="C++">repr</code></td>
	      <td><methodname>__repr__</methodname></td>
	      <td><code language="C++"><function xlink:href="http://www.boost.org/libs/conversion/lexical_cast.htm">lexical_cast</function>&lt;std::string&gt;(x)</code></td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>
    </section>

    <section xml:id="v2.operators.other-spec">
      <title><classname>other</classname> クラステンプレート</title>
      <para>
	<classname>other&lt;T&gt;</classname> のインスタンスは <constant linkend="v2.operators.self-spec">self</constant> とともに演算子式中で使用し、結果は同じ式の <classname>other&lt;T&gt;</classname> を <type>T</type> オブジェクトで置き換えたものと等価である。<type>T</type> オブジェクトの構築が高価で避けたい場合、コンストラクタが利用できない場合、または単純にコードを明確にする場合に <classname>other&lt;T&gt;</classname> を使用するとよい。
      </para>

      <section xml:id="v2.operators.other-spec-synopsis">
	<title><classname>other</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
  template <class T>
  struct other
  {
  };
}}]]></programlisting>
      </section>
    </section>

    <section xml:id="v2.operators.operator_-spec">
      <title><classname>detail::operator</classname> _クラステンプレート</title>
      <para>
	<classname>detail::operator_&lt;&gt;</classname> のインスタンス化は、<constant linkend="v2.operators.self-spec">self</constant> を含む演算子式の戻り値型として使用する。これは実装の詳細として考えるべきであり、<code language="Python">self</code> 式の結果がどのように <methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def()</methodname> 呼び出しとマッチするか見るためとしてのみ、ここに記載する。
      </para>

      <section xml:id="v2.operators.operator_-spec-synopsis">
	<title><classname>detail::operator_</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python { namespace detail
{
  template &lt;<replaceable>unspecified</replaceable>&gt;
  struct operator_
  {
  };
}}}</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.operators.objects">
    <title>オブジェクト</title>

    <section xml:id="v2.operators.self-spec">
      <title>self</title>
      <programlisting language="C++">namespace boost { namespace python
{
  using self_ns::self;
}}</programlisting>
    </section>
  </section>

  <section xml:id="v2.operators.examples">
    <title>例</title>
    <programlisting language="C++">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/class.hpp&gt;
#include &lt;boost/python/operators.hpp&gt;
#include &lt;boost/operators.hpp&gt;

struct number
   : boost::<classname xlink:href="http://www.boost.org/libs/utility/operators.htm#grpd_oprs">integer_arithmetic</classname>&lt;number&gt;
{
    explicit number(long x_) : x(x_) {}
    operator long() const { return x; }

    template &lt;class T&gt;
    number&amp; operator+=(T const&amp; rhs)
    { x += rhs; return *this; }

    template &lt;class T&gt;
    number&amp; operator-=(T const&amp; rhs)
    { x -= rhs; return *this; }
    
    template &lt;class T&gt;
    number&amp; operator*=(T const&amp; rhs)
    { x *= rhs; return *this; }
    
    template &lt;class T&gt;
    number&amp; operator/=(T const&amp; rhs)
    { x /= rhs; return *this; }
    
    template &lt;class T&gt;
    number&amp; operator%=(T const&amp; rhs)
    { x %= rhs; return *this; }

   long x;
};

using namespace boost::python;
BOOST_PYTHON_MODULE(demo)
{
   class_&lt;number&gt;("number", init&lt;long&gt;())
      // self との組み合わせ
      .def(self += self)
      .def(self + self)
      .def(self -= self)
      .def(self – self)
      .def(self *= self)
      .def(self * self)
      .def(self /= self)
      .def(self / self)
      .def(self %= self)
      .def(self % self)

      // Python の int への変換
      .def(int_(self))

      // long との組み合わせ
      .def(self += long())
      .def(self + long())
      .def(long() + self)
      .def(self -= long())
      .def(self – long())
      .def(long() - self)
      .def(self *= long())
      .def(self * long())
      .def(long() * self)
      .def(self /= long())
      .def(self / long())
      .def(long() / self)
      .def(self %= long())
      .def(self % long())
      .def(long() % self)
      ;
}</programlisting>
  </section>
</section>
