<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.list">
  <title>boost/python/list.hpp</title>

  <section xml:id="v2.list.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/c-api/list.html">list</classname> 型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.list.classes">
    <title>クラス</title>

    <section xml:id="v2.list.list-spec">
      <title><classname>list</classname> クラス</title>
      <para>
	Python の組み込み <classname>list</classname> 型の<link xlink:href="http://docs.python.jp/2/c-api/sequence.html">シーケンス型プロトコル</link>をエクスポートする。以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>list</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>list</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.list.list-spec-synopsis">
	<title><classname>list</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  class list : public object
  {
   public:
      list(); // list を新規作成する

      template <class T>
      explicit list(T const& sequence);

      template <class T>
      void append(T const& x);

      template <class T>
      long count(T const& value) const;

      template <class T>
      void extend(T const& x);

      template <class T>
      long index(T const& x) const;

      template <class T>
      void insert(object const& index, T const& x); // index の前にオブジェクトを挿入する

      object pop(); // index 位置（既定は末尾）の要素を削除して返す
      object pop(long index);
      object pop(object const& index);

      template <class T>
      void remove(T const& value);

      void reverse(); // 「その場で」逆順に入れ替える

      void sort(); // 「その場で」ソートする。比較関数を与える場合の形式は cmpfunc(x, y) -> -1, 0, 1

      template <class T>
      void sort(T const& value);
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.list.examples">
    <title>例</title>
    <programlisting language="C++">using namespace boost::python;

// リスト内の 0 の数を返す
long zeroes(list l)
{
   return l.count(0);
}</programlisting>
  </section>
</section>
