<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.slice">
  <title>boost/python/slice.hpp</title>

  <section xml:id="v2.slice.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/c-api/slice.html">slice</classname> 型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.slice.classes">
    <title>クラス</title>

    <section xml:id="v2.slice.slice-spec">
      <title><classname>slice</classname> クラス</title>
      <para>
	Python の組み込み <classname>slice</classname> 型をラップして拡張スライシングプロトコルをエクスポートする。インターフェイス以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>slice</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>slice</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.slice.slice-spec-synopsis">
	<title><classname>slice</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  class slice : public object
  {
   public:
      slice(); // 空の slice を作成する。[::] と等価

      template <typename Int1, typename Int2>
      slice(Int1 start, Int2 stop);

      template <typename Int1, typename Int2, typename Int3>
      slice(Int1 start, Int2 stop, Int3 step);

      // この slice を作成したときの引数にアクセスする。
      object start();
      object stop();
      object step();

      // slice::get_indices() の戻り値の型
      template <typename RandomAccessIterator>
      struct range
      {
          RandomAccessIterator start;
          RandomAccessIterator stop;
          int step;
      };

      template <typename RandomAccessIterator>
      range<RandomAccessIterator>
      get_indices(
          RandomAccessIterator const& begin, 
          RandomAccessIterator const& end);
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.tuple.functions">
    <title>関数</title>

    <section xml:id="v2.tuple.make_tuple-spec">
      <title><function>make_tuple</function></title>
      <programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  tuple make_tuple();

  template <class A0>
  tuple make_tuple(A0 const& a0);

  template <class A0, class A1>
  tuple make_tuple(A0 const& a0, A1 const& a1);
  ...
  template <class A0, class A1,...class An> 
  tuple make_tuple(A0 const& a0, A1 const& a1,...An const& an);
}}]]></programlisting>
    </section>

    <section xml:id="v2.slice.slice-spec-ctors">
      <title><classname>slice</classname> クラスのコンストラクタ</title>
      <orderedlist>
	<listitem>
	  <constructorsynopsis language="C++">
	    <methodname>slice</methodname>
	    <void/>
	  </constructorsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  既定の stop 、start 、step 値で <classname>slice</classname> を構築する。Pythonの式 <code language="Python">base[::]</code> で作成したスライスオブジェクトと等価。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>
		  なし。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <constructorsynopsis language="C++">
	    <modifier>template &lt;typename Int1, typename Int2&gt;</modifier>
	    <methodname>slice</methodname>
	    <methodparam>
	      <type>Int1</type>
	      <parameter>start</parameter>
	    </methodparam>
	    <methodparam>
	      <type>Int2</type>
	      <parameter>stop</parameter>
	    </methodparam>
	  </constructorsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>start</parameter> および <parameter>stop</parameter> は <classname linkend="v2.object.slice_nil-spec">slice_nil</classname> 型、または <classname>object</classname> 型へ変換可能。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  既定の step 値と与えられた <parameter>start</parameter> 、<parameter>stop</parameter> 値で新しい <classname>slice</classname> を構築する。Python の組み込み関数 <code language="Python" xlink:href="http://docs.python.jp/2/library/functions.html#slice">slice(start,stop)</code> 、または Python の式 <code language="Python">base[start:stop]</code> で作成したスライスオブジェクトと等価。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>
		  引数を <classname>object</classname> 型へ変換できない場合、<exceptionname>error_already_set</exceptionname>（Python の <exceptionname>TypeError</exceptionname> 例外を設定する）。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <constructorsynopsis language="C++">
	    <modifier>template &lt;typename Int1, typename Int2, typename Int3&gt;</modifier>
	    <methodname>slice</methodname>
	    <methodparam>
	      <type>Int1</type>
	      <parameter>start</parameter>
	    </methodparam>
	    <methodparam>
	      <type>Int2</type>
	      <parameter>stop</parameter>
	    </methodparam>
	    <methodparam>
	      <type>Int3</type>
	      <parameter>step</parameter>
	    </methodparam>
	  </constructorsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>start</parameter> 、<parameter>stop</parameter> および <parameter>step</parameter> は <classname>slice_nil</classname> 、または <classname>object</classname> 型へ変換可能。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <parameter>start</parameter> 、<parameter>stop</parameter> 、<parameter>step</parameter> 値で新しい <classname>slice</classname> を構築する。Python の組み込み関数 <code language="Python" xlink:href="http://docs.python.jp/2/library/functions.html#slice">slice(start,stop,step)</code> 、または Python の式 <code language="Python">base[start:stop:step]</code> で作成したスライスオブジェクトと等価。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>
		  引数を <classname>object</classname> 型へ変換できない場合、<exceptionname>error_already_set</exceptionname>（Python の <exceptionname>TypeError</exceptionname> 例外を設定する）。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="v2.slice.slice-spec-observers">
      <title><classname>slice</classname> クラスのオブザーバ関数</title>
      <orderedlist>
	<listitem>
	  <methodsynopsis language="C++">
	    <type>object</type>
	    <methodname>start</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <methodsynopsis language="C++">
	    <type>object</type>
	    <methodname>stop</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <methodsynopsis language="C++">
	    <type>object</type>
	    <methodname>step</methodname>
	    <void/>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  なし。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>
		  なし。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  スライスを作成したときに使用した引数。スライスを作成したときに引数を省略したか <classname>slice_nil</classname> を使用した場合、その引数は <constant>PyNone</constant> への参照でありデフォルトコンストラクトされた <classname>object</classname> と等値である。原則的にはスライスオブジェクトを作成するのに任意の型を使用できるが、現実的には大抵は整数である。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <methodsynopsis language="C++">
	    <modifier>template &lt;typename RandomAccessIterator&gt;</modifier>
	    <type>slice::range&lt;RandomAccessIterator&gt;</type>
	    <methodname>get_indices</methodname>
	    <methodparam>
	      <type>RandomAccessIterator const&amp;</type>
	      <parameter>begin</parameter>
	    </methodparam>
	    <methodparam>
	      <type>RandomAccessIterator const&amp;</type>
	      <parameter>end</parameter>
	    </methodparam>
	    <modifier>const</modifier>
	  </methodsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>引数：</term>
	      <listitem>
		<para>
		  半開区間を形成する STL 準拠のランダムアクセスイテレータの組。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  引数の <code>[begin,end)</code> 範囲内の完全閉範囲を定義する RandomAccessIterator の組を作成する。<constant>PyNone</constant> か負の添字の効果、および 1 以外の step サイズをどう扱うか説明を求められたときに、この関数がスライスの添字を変換する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  非 0 の step 値と、この関数の引数が与える範囲を指し閉区間を定義する RandomAccessIterator の組で初期化した <classname>slice::range</classname>。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>例外：</term>
	      <listitem>
		<para>
		  このスライスの引数が <constant>PyNone</constant> への参照でも <type>int</type> へ変換可能でもない場合、Python の <exceptionname>TypeError</exceptionname> 例外を<glossterm baseform="raise">送出する</glossterm>。結果の範囲が空の場合、<exceptionname>std::invalid_argument</exceptionname> を投げる。<methodname>slice::get_indices()</methodname> を呼び出すときは常に <code language="C++">try { ...; } catch (std::invalid_argument) {}</code> で囲んでこのケースを処理し適切に処置しなければならない。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>根拠：</term>
	      <listitem>
		<para>
		  閉区間。開空間を使ったとすると、step サイズが 1 以外の場合、終端のイテレータが末尾の直後より後方の位置や指定した範囲より前方を指す状態が必要となる。
		</para>
		<para>
		  空のスライスに対する例外。空の範囲を表す閉区間を定義することは不可能であるので、未定義の動作を防止するために他の形式のエラーチェックが必要となる。例外が捕捉されない場合、単に既定の例外処理機構により Python に変換される。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="v2.slice.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[using namespace boost::python;

// Python リストの拡張スライス。
// 警告：組み込み型に対する拡張スライシングは Python 2.3 より前ではサポートされていない
list odd_elements(list l)
{
    return l[slice(_,_,2)];
}

// std::vector のスライスに対して合計をとる。
double partial_sum(std::vector<double> const& Foo, const slice index)
{
    slice::range<std::vector<double>::const_iterator> bounds;
    try {
        bounds = index.get_indices<>(Foo.begin(), Foo.end());
    }
    catch (std::invalid_argument) {
        return 0.0;
    }
    double sum = 0.0;
    while (bounds.start != bounds.stop) {
        sum += *bounds.start;
        std::advance( bounds.start, bounds.step);
    }
    sum += *bounds.start;
    return sum;
}]]></programlisting>
  </section>
</section>
