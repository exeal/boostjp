<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.pytype_function">
  <title>boost/python/pytype_function.hpp</title>

  <section xml:id="v2.pytype_function.introduction">
    <title>はじめに</title>
    <para>
      Python のシグニチャをサポートするには、変換器は関連する <type>PyTypeObject</type> へのポインタを返す <function>get_pytype</function> 関数を提供しなければならない。例として <link linkend="v2.ResultConverter.ResultConverter-concept">ResultConverter</link> か <classname linkend="v2.to_python_converter.to_python_converter-spec">to_python_converter</classname> を見るとよい。このヘッダファイルのクラスは <function>get_pytype</function> の実装に使用することを想定している。修飾無しの引数型とともに使用する <type>T</type> に対するテンプレートの <code language="C++">_direct</code> 版
      <footnote>
	<para>
	  訳注　<classname>expected_from_python_type_direct</classname> 、<classname>registered_pytype_direct</classname> 、<classname>to_python_target_type_direct</classname> の 3 つ。
	</para>
      </footnote>
      もある（これらはモジュールを読み込んだときに変換レジストリ内にあると考えてしかるべきものである）。
    </para>
  </section>

  <section xml:id="v2.pytype_function.classes">
    <title>クラス</title>

    <section xml:id="v2.pytype_function.wrap_pytype-spec">
      <title><classname>wrap_pytype</classname> クラス</title>
      <para>
	このテンプレートは、テンプレート引数を返す静的メンバ <methodname>get_pytype</methodname> を生成する。
      </para>

      <section xml:id="v2.pytype_function.wrap_pytype-spec-synopsis">
	<title><classname>wrap_pytype</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace converter{

    template < PyTypeObject const *pytype >
    class wrap_pytype 
    {
      public:
          static PyTypeObject const *get_pytype(){return pytype; }
    };

}}}]]></programlisting>
      </section>
    </section>

    <section xml:id="v2.pytype_function.registered_pytype-spec">
      <title><classname>registered_pytype</classname> クラス</title>
      <para>
	このテンプレートは、<classname linkend="v2.class">class_</classname> で Python へエクスポートする型（修飾子があってもよい）のテンプレート引数とともに使用すべきである。生成された静的メンバ <methodname>get_pytype</methodname> は対応する Python の型を返す。
      </para>

      <section xml:id="v2.pytype_function.registered_pytype-spec-synopsis">
	<title><classname>registered_pytype</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace converter{

    template < class T >
    class registered_pytype 
    {
      public:
          static PyTypeObject const *get_pytype();
    };

}}}]]></programlisting>
      </section>
    </section>

    <section xml:id="v2.pytype_function.expected_from_python_type-spec">
      <title><classname>expected_from_python_type</classname> クラス</title>
      <para>
	このテンプレートは、型 <type>T</type> について登録済みの <wordasword>from_python</wordasword> 変換器を問い合わせし合致した Python 型を返す静的メンバ <methodname>get_pytype</methodname> を生成する。
      </para>

      <section xml:id="v2.pytype_function.expected_from_python_type-spec-synopsis">
	<title><classname>expected_from_python_type</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace converter{

    template < class T >
    class expected_from_python_type 
    {
      public:
          static PyTypeObject const *get_pytype();
    };

}}}]]></programlisting>
      </section>
    </section>

    <section xml:id="v2.pytype_function.to_python_target_type-spec">
      <title><classname>to_python_target_type</classname> クラス</title>
      <para>
	このテンプレートは、<type>T</type> から変換可能な Python の型を返す静的メンバ <methodname>get_pytype</methodname> を生成する。
      </para>

      <section xml:id="v2.pytype_function.to_python_target_type-spec-synopsis">
	<title><classname>to_python_target_type</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace converter{

    template < class T >
    class to_python_target_type 
    {
      public:
          static PyTypeObject const *get_pytype();
    };

}}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.pytype_function.examples">
    <title>例</title>
    <para>
      以下の例では、Python のドキュメントにある標準的な <link xlink:href="http://docs.python.jp/2/extending/newtypes.html#dnt-basics">noddy モジュール例</link>を実装したとして、関連する宣言を <filename class="headerfile">noddy.h</filename> に置いたものと仮定する。<type>noddy_NoddyObject</type> は極限なまでに単純な拡張型であるので、この例は少しばかりわざとらしい。すべての情報がその戻り値の型に含まれる関数をラップしている。
    </para>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/reference.hpp>
#include <boost/python/module.hpp>
#include "noddy.h"

struct tag {};
tag make_tag() { return tag(); }

using namespace boost::python;

struct tag_to_noddy 
#if defined BOOST_PYTHON_SUPPORTS_PY_SIGNATURES // Python のシグニチャがサポートされない場合は不要なオーバーヘッドが発生
: wrap_pytype<&noddy_NoddyType> // wrap_pytype から get_pytype を継承する
#endif
{
    static PyObject* convert(tag const& x)
    {
        return PyObject_New(noddy_NoddyObject, &noddy_NoddyType);
    }
};

BOOST_PYTHON_MODULE(to_python_converter)
{
    def("make_tag", make_tag);
    to_python_converter<tag, tag_to_noddy
#if defined BOOST_PYTHON_SUPPORTS_PY_SIGNATURES // Python のシグニチャがサポートされない場合は不正
          , true
#endif
          >(); // tag_to_noddy がメンバ get_pytype を持つので「真」
}]]></programlisting>
      <para>
	以下の例は、テンプレート <classname>expected_from_python_type</classname> および <classname>to_python_target_type</classname> を使用して Python との双方向変換器を登録している。
      </para>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/def.hpp>
#include <boost/python/extract.hpp>
#include <boost/python/to_python_converter.hpp>
#include <boost/python/class.hpp>

using namespace boost::python;

struct A
{
};

struct B
{
  A a;
  B(const A& a_):a(a_){}
};

// A から Python の整数への変換器
struct BToPython 
#if defined BOOST_PYTHON_SUPPORTS_PY_SIGNATURES // Python のシグニチャがサポートされていない場合は不要なオーバーヘッドが発生
   : converter::to_python_target_type<A>  // get_pytype を継承する
#endif
{
  static PyObject* convert(const B& b)
  {
    return incref(object(b.a).ptr());
  }
};

// Python の整数から A への変換
struct BFromPython
{
  BFromPython()
  {
    boost::python::converter::registry::push_back
        ( &convertible
        , &construct
        , type_id< B >()
#if defined BOOST_PYTHON_SUPPORTS_PY_SIGNATURES // Python のシグニチャがサポートされていない場合は不正
        , &converter::expected_from_python_type<A>::get_pytype// A へ変換可能なものは B へ変換可能
#endif
        );
  }

  static void* convertible(PyObject* obj_ptr)
  {
      extract<const A&> ex(obj_ptr);
      if (!ex.check()) return 0;
      return obj_ptr;
  }

  static void construct(
      PyObject* obj_ptr,
      converter::rvalue_from_python_stage1_data* data)
  {
    void* storage = (
        (converter::rvalue_from_python_storage< B >*)data)-> storage.bytes;

    extract<const A&> ex(obj_ptr);
    new (storage) B(ex());
    data->convertible = storage;
  }
};


B func(const B& b) { return b ; }

BOOST_PYTHON_MODULE(pytype_function_ext)
{
  to_python_converter< B , BtoPython
#if defined BOOST_PYTHON_SUPPORTS_PY_SIGNATURES // Python のシグニチャがサポートされていない場合は不正
             ,true 
#endif
             >(); // get_pytype を持つ
  BFromPython();

  class_<A>("A") ;

  def("func", &func);

}]]></programlisting>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from pytype_function_ext import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print func.__doc__</userinput>
<computeroutput>func( (A)arg1) -> A :
    C++ signature:
         struct B func(struct B)</computeroutput></screen>
    </section>
  </section>
</section>
