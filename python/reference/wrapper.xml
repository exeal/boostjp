<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.wrapper">
  <title>boost/python/wrapper.hpp</title>

  <section xml:id="v2.wrapper.introduction">
    <title>はじめに</title>
    <para>
      仮想関数を「Python でオーバーライド」可能なクラス <classname>T</classname> をラップするため、つまり C++ から仮想関数を呼び出すときに Python における派生クラスの当該メソッドが呼び出されるよう、これらの仮想関数を Python から呼び出せるようオーバーライドする C++ ラッパクラスをTから派生させて作成しなければならない。このヘッダのクラスを使用して、そういった作業を容易にできる。
    </para>
  </section>

  <section xml:id="v2.wrapper.classes">
    <title>クラス</title>

    <section xml:id="v2.wrapper.override-spec">
      <title><classname>override</classname> クラス</title>
      <para>
	C++ 仮想関数の Python オーバーライドをカプセル化する。<classname>override</classname> オブジェクトは Python の呼び出し可能オブジェクトか <constant>None</constant> のいずれかを保持する。
      </para>

      <section xml:id="v2.wrapper.override-spec-synopsis">
	<title><classname>override</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost
{
  class override : object
  {
   public:
      <replaceable>unspecified</replaceable> operator() const;
      template &lt;class A0&gt;
      <replaceable>unspecified</replaceable> operator(A0) const;
      template &lt;class A0, class A1&gt;
      <replaceable>unspecified</replaceable> operator(A0, A1) const;
      ...
      template &lt;class A0, class A1, ...class An&gt;
      <replaceable>unspecified</replaceable> operator(A0, A1, ...An) const;
  };
};</programlisting>
      </section>

      <section xml:id="v2.wrapper.override-spec-observers">
	<title><classname>override</classname> クラスのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>operator()</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0&gt;</modifier>
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0, class A1&gt;</modifier>
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>A1</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <para>
	      <code language="C++">...</code>
	    </para>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0, class A1, ...class An&gt;</modifier>
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>A1</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>...An</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> が Python の呼び出し可能オブジェクトを保持している場合、<link linkend="v2.callbacks">ここ</link>に示す方法で指定した引数で呼び出す。それ以外の場合、<exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname> を投げる。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    Python の呼び出し結果を保持する未規定型のオブジェクト。C++ 型 <type>R</type> への変換は、結果のオブジェクトの <type>R</type> への変換により行われる。変換に失敗した場合、<exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname> を投げる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.wrapper.wrapper-spec">
      <title><classname>wrapper</classname> クラステンプレート</title>
      <para>
	ラッパクラスを <type>T</type> と <classname>wrapper&lt;T&gt;</classname> の両方から派生することで、その派生クラスの記述が容易になる。
      </para>

      <section xml:id="v2.wrapper.wrapper-spec-synopsis">
	<title><classname>wrapper</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost
{
  class wrapper
  {
   protected:
      override get_override(char const* name) const;
  };
};</programlisting>
      </section>

      <section xml:id="v2.wrapper.wrapper-spec-observers">
	<title><classname>wrapper</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>override</type>
	      <methodname>get_override</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    Python 派生クラスインスタンスが名前 <parameter>name</parameter> の関数をオーバーライドしているとして、<code language="C++">*this</code> がその C++ 基底クラスのサブオブジェクトである場合、Python のオーバーライドに委譲する <classname>override</classname> オブジェクトを返す。それ以外の場合、<constant>None</constant> を保持する <classname>override</classname> オブジェクトを返す。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.wrapper.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/wrapper.hpp>
#include <boost/python/call.hpp>

using namespace boost::python;

// 純粋仮想関数を 1 つ持つクラス
struct P
{
    virtual ~P(){}
    virtual char const* f() = 0;
    char const* g() { return "P::g()"; }
};

struct PCallback : P, wrapper<P>
{
    char const* f()
    {
#if BOOST_WORKAROUND(BOOST_MSVC, <= 1300) // vc6/vc7 のための workaround
        return call<char const*>(this->get_override("f").ptr());
#else 
        return this->get_override("f")();
#endif 
    }
};

// 非純粋仮想関数を 1 つ持つクラス
struct A
{
    virtual ~A(){}
    virtual char const* f() { return "A::f()"; }
};

struct ACallback :  A, wrapper<A>
{
    char const* f()
    {
        if (override f = this->get_override("f"))
#if BOOST_WORKAROUND(BOOST_MSVC, <= 1300) // vc6/vc7 のための workaround
            return call<char const*>(f.ptr());
#else 
            return f();
#endif 

        return A::f();
    }

    char const* default_f() { return this->A::f(); }
};

BOOST_PYTHON_MODULE_INIT(polymorphism)
{
    class_<PCallback,boost::noncopyable>("P")
        .def("f", pure_virtual(&P::f))
        ;

    class_<ACallback,boost::noncopyable>("A")
        .def("f", &A::f, &Acallback::default_f)
        ;
}]]></programlisting>
  </section>
</section>
