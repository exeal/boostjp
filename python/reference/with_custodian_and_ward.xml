<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.with_custodian_and_ward">
  <title>boost/python/with_custodian_and_ward.hpp</title>

  <section xml:id="v2.with_custodian_and_ward.introduction">
    <title>はじめに</title>
    <para>
      このヘッダは、関数の Python 引数および戻り値オブジェクトの 2 つの間の寿命依存性を確立する機能を提供する。<emphasis>非後見人</emphasis>（<foreignphrase xml:lang="en">ward</foreignphrase>）オブジェクトは<emphasis>管理人</emphasis>（<foreignphrase xml:lang="en">custodian</foreignphrase>）オブジェクトが<link xlink:href="http://docs.python.jp/2/library/weakref.html">弱い参照</link>をサポートしている限り（Boost.Python の拡張クラスはすべて弱い参照をサポートする）管理人オブジェクトが破壊されるまで破壊されない。<emphasis>管理人</emphasis>オブジェクトが弱い参照をサポートしておらず <constant>None</constant> でもない場合、適切な例外が投げられる。2 つのクラステンプレート <classname>with_custodian_and_ward</classname> および <classname>with_custodian_and_ward_postcall</classname> の違いはそれらが効果を発揮する場所である。
    </para>
    <para>
      不注意で懸垂ポインタを作成してしまう可能性を減らすため、既定では寿命の束縛は背後にある C++ オブジェクトが呼び出される<emphasis>前に</emphasis>行う。しかしながら結果のオブジェクトは呼び出すまで無効であるので、呼び出し後に寿命の束縛を行う <classname>with_custodian_and_ward_postcall</classname> を提供している。また <methodname>with_custodian_and_ward&lt;&gt;::precall</methodname> の後だが背後にある C++ オブジェクトが実際にポインタを格納するより前に C++ 例外が投げられた場合、管理人オブジェクトと非後見人オブジェクトの寿命は意図的にともに束縛されるため、ラップする関数のセマンティクスに応じて代わりに <classname>with_custodian_and_ward_postcall</classname> を選択するとよい。
    </para>
    <para>
      関数呼び出し境界を超えて生のポインタの<emphasis>所有権を譲渡する</emphasis>関数をラップする場合、これは適したツールでは<emphasis>ない</emphasis>ことに注意していただきたい。必要があれば<link linkend="v2.faq.ownership">よくある質問と回答</link>を参照されたい。
    </para>
  </section>

  <section xml:id="v2.with_custodian_and_ward.classes">
    <title>クラス</title>

    <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward-spec">
      <title><classname>with_custodian_and_ward</classname> クラステンプレート</title>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>
	      説明
	      <footnote>
		<para>
		  訳注　<parameter>custodian</parameter> および <parameter>ward</parameter> テンプレート引数に 0 や引数列の範囲を超える値を指定することはできません。また両者に同じ値を指定することもできません。
		</para>
	      </footnote>
	    </th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><parameter>custodian</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>確立する寿命関係において依存される側を指すテンプレート引数の 1 から始まる添字。メンバ関数をラップする場合、引数 1 は対象オブジェクト（<code language="C++">*this</code>）である。対象の Python オブジェクト型が弱い参照をサポートしない場合、ラップする C++ オブジェクトを呼び出すと Python の <exceptionname>TypeError</exceptionname> 例外を送出することに注意していただきたい。</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><parameter>ward</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>確立する寿命関係において依存する側を指すテンプレート引数の 1 から始まる添字。メンバ関数をラップする場合、引数 1 は対象オブジェクト（<code language="C++">*this</code>）である。</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><type>Base</type></td>
	    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
	    <td><link linkend="v2.CallPolicies.composition">ポリシーの合成</link>に使用する。</td>
	    <td><classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname></td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward-spec-synopsis">
	<title><classname>with_custodian_and_ward</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <std::size_t custodian, std::size_t ward, class Base = default_call_policies>
   struct with_custodian_and_ward : Base
   {
      static bool precall(PyObject* args);
   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward-spec-statics">
	<title><classname>with_custodian_and_ward</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>precall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>args</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/tuple.html#PyTuple_Check">PyTuple_Check</function>(args) != 0</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>ward</parameter> で指定した引数の寿命を <parameter>custodian</parameter> で指定した引数の寿命に依存させる。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    失敗時は <constant>false</constant>（<code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred</function>() != 0</code>）。それ以外は <constant>true</constant>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward_postcall-spec">
      <title><classname>with_custodian_and_ward_postcall</classname> クラステンプレート</title>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>
	      説明
	      <footnote>
		<para>
		  訳注　<parameter>custodian</parameter> および <parameter>ward</parameter> テンプレート引数に引数列の範囲を超える値を指定することはできません。また両者に同じ値を指定することもできません。
		</para>
	      </footnote>
	    </th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><parameter>custodian</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>確立する寿命関係において依存される側を指すテンプレート引数の添字。0 は戻り値、1 は第 1 引数を表す。メンバ関数をラップする場合、1 は対象オブジェクト（<code language="C++">*this</code>）である。対象の Python オブジェクト型が弱い参照をサポートしない場合、ラップする C++ オブジェクトを呼び出すと Python の <exceptionname>TypeError</exceptionname> 例外を送出することに注意していただきたい。</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><parameter>ward</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>確立する寿命関係において依存する側を指すテンプレート引数の添字。0 は戻り値、1 は第 1 引数を表す。メンバ関数をラップする場合、引数 1 は対象オブジェクト（<code language="C++">*this</code>）である。</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><type>Base</type></td>
	    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
	    <td><link linkend="v2.CallPolicies.composition">ポリシーの合成</link>に使用する。</td>
	    <td><classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname></td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward_postcall-spec-synopsis">
	<title><classname>with_custodian_and_ward_postcall</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <std::size_t custodian, std::size_t ward, class Base = default_call_policies>
   struct with_custodian_and_ward_postcall : Base
   {
      static PyObject* postcall(PyObject* args, PyObject* result);
   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.with_custodian_and_ward.with_custodian_and_ward_postcall-spec-statics">
	<title><classname>with_custodian_and_ward_postcall</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>postcall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>args</parameter>
	      </methodparam>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>result</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/tuple.html#PyTuple_Check">PyTuple_Check</function>(args) != 0</code> かつ <code language="C++">result != 0</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>ward</parameter> で指定した引数の寿命を <parameter>custodian</parameter> で指定した引数の寿命に依存させる。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    失敗時は <literal>0</literal>（<code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred</function>() != 0</code>）。それ以外は <constant>true</constant>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.with_custodian_and_ward.examples">
    <title>例</title>
    <para>
      以下はライブラリの <classname linkend="v2.return_internal_reference.return_internal_reference-spec">return_internal_reference</classname> の実装に <classname>with_custodian_and_ward_postcall</classname> を使用している例である。
    </para>
    <programlisting language="C++">template &lt;std::size_t owner_arg = 1, class Base = default_call_policies&gt;
struct return_internal_reference
    : with_custodian_and_ward_postcall&lt;0, owner_arg, Base&gt;
{
   typedef <classname linkend="v2.reference_existing_object.reference_existing_object-spec">reference_existing_object</classname> result_converter;
};</programlisting>
  </section>
</section>
