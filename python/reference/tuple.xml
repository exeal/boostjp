<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.tuple">
  <title>boost/python/tuple.hpp</title>

  <section xml:id="v2.tuple.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/tutorial/datastructures.html#tuples-and-sequences">tuple</classname> 型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.tuple.classes">
    <title>クラス</title>

    <section xml:id="v2.tuple.tuple-spec">
      <title><classname>tuple</classname> クラス</title>
      <para>
	Python の組み込み <classname>tuple</classname> インターフェイスをエクスポートする。以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>tuple</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>tuple</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.tuple.tuple-spec-synopsis">
	<title><classname>tuple</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   class tuple : public object
   {
      // tuple() は空の tuple を作成
      tuple();

      // tuple(sequence) はシーケンスの要素で初期化した tuple を作成
      template <class T>
      explicit tuple(T const& sequence)
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.tuple.functions">
    <title>関数</title>

    <section xml:id="v2.tuple.make_tuple-spec">
      <title><function>make_tuple</function></title>
      <programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  tuple make_tuple();

  template <class A0>
  tuple make_tuple(A0 const& a0);

  template <class A0, class A1>
  tuple make_tuple(A0 const& a0, A1 const& a1);
  ...
  template <class A0, class A1,...class An> 
  tuple make_tuple(A0 const& a0, A1 const& a1,...An const& an);
}}]]></programlisting>
      <para>
	<code language="C++">object(a0),...object(a<replaceable>n</replaceable>)</code> を組み合わせて新しいタプルオブジェクトを構築する。
      </para>
    </section>
  </section>

  <section xml:id="v2.tuple.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[using namespace boost::python;
tuple head_and_tail(object sequence)
{
    return make_tuple(sequence[0],sequence[-1]);
}]]></programlisting>
  </section>
</section>
