<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.indexing">
  <title>添字アクセスのサポート</title>
  <subtitle>ヘッダ &lt;boost/python/indexing/indexing_suite.hpp&gt; 、ヘッダ &lt;boost/python/indexing/vector_indexing_suite.hpp&gt;</subtitle>

  <section xml:id="v2.indexing.introduction">
    <title>はじめに</title>
    <para>
      indexing は、添字アクセス可能（<foreignphrase xml:lang="en">indexable</foreignphrase>）な C++ コンテナを Python へ容易にエクスポートするための Boost.Python の機能である。添字アクセス可能なコンテナとは <methodname>operator[]</methodname> によりランダムアクセス可能なコンテナである（例：<classname>std::vector</classname>）。
    </para>
    <para>
      <classname>std::vector</classname> のようなどこにでもある添字アクセス可能な C++ コンテナを Python へエクスポートするのに必要な機能は Boost.Python はすべて有しているが、その方法はあまり直感的ではない。Python のコンテナから C++ コンテナへの変換は容易ではない。Python のコンテナを Boost.Python を使用して C++ 内でエミュレート（Python リファレンスマニュアルの「<link xlink:href="http://docs.python.jp/2/library/stdtypes.html#str-unicode-list-tuple-bytearray-buffer-xrange">コンテナ型をエミュレートする</link>」を見よ）するのは簡単ではない。C++ コンテナを Python へ変換する以前に考慮すべきことが多数ある。これには <methodname>__len__</methodname> 、<methodname>__getitem__</methodname> 、<methodname>__setitem__</methodname> 、<methodname>__delitem__</methodname> 、<methodname>__iter__</methodname> および <methodname>__contains__</methodname> メソッドに対するラッパ関数の実装が含まれる。
    </para>
    <para>
      目的は、
    </para>
    <orderedlist>
      <listitem>
	<para>
	  添字アクセス可能な C++ コンテナの振る舞いを、Python コンテナの振る舞いに一致させる。
	</para>
      </listitem>
      <listitem>
	<para>
	  <code language="C++">c[i]</code> が変更可能であるといった、コンテナ要素のインデクス（<methodname>__getitem__</methodname>）に対する既定の参照セマンティクスを提供する。要件は以下のとおり（<methodname>m</methodname> は非 const（可変）メンバ関数（メソッド））。
	</para>
	<programlisting language="C++">val = c[i]
c[i].m()
val == c[i]</programlisting>
      </listitem>
      <listitem>
	<para>
	  <methodname>__getitem__</methodname> から安全な参照を返す：後でコンテナに追加、コンテナから削除しても懸垂参照が発生しない（Python をクラッシュさせない）。
	</para>
      </listitem>
      <listitem>
	<para>
	  スライスの添字をサポート。
	</para>
      </listitem>
      <listitem>
	<para>
	  適切な場合は Python のコンテナ引数（例：<classname>list</classname> 、<classname>tuple</classname>）を受け付ける。
	</para>
      </listitem>
      <listitem>
	<para>
	  再定義可能なポリシークラスによる拡張性。
	</para>
      </listitem>
      <listitem>
	<para>
	  ほとんどの STL および STL スタイルの添字アクセス可能なコンテナに対する定義済みサポートを提供する。
	</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.indexing.interface">
    <title>Boost.Python の indexing インターフェイス</title>

    <section xml:id="v2.indexing.indexing_suite">
      <title>indexing_suite［ヘッダ &lt;boost/python/indexing/indexing_suite.hpp&gt;］</title>
      <para>
	<interfacename>indexing_suite</interfacename> クラスは、Python に調和させる C++ コンテナを管理するための基底クラスである。目的は C++ コンテナの外観と振る舞いを Python コンテナのそれに一致させることである。このクラスは自動的に（Python リファレンスの「<link xlink:href="http://docs.python.jp/2/library/stdtypes.html#str-unicode-list-tuple-bytearray-buffer-xrange">コンテナ型をエミュレートする</link>」の）Python の特殊メソッドをラップする。
      </para>
      <variablelist>
	<varlistentry>
	  <term><methodname>__len__</methodname>(<parameter>self</parameter>)</term>
	  <listitem>
	    <para>
	      組み込み関数 <function>len()</function> を実装するために呼び出される。オブジェクトの長さ（0 以上の整数）を返さなければならない。また <methodname>__nonzero__()</methodname> メソッドを定義せず <methodname>__len__()</methodname> メソッドが 0 を返すオブジェクトは、論理値の文脈で偽として扱われる。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>__getitem__</methodname>(<parameter>self</parameter>, <parameter>key</parameter>)</term>
	  <listitem>
	    <para>
	      <code language="Python">self[key]</code> の評価を実装するために呼び出される。シーケンス型では、受け取るキーは整数およびスライスオブジェクトでなければならない。負の添字に対する特殊な解釈（クラスがシーケンス型をエミュレートする場合）は <methodname>__getitem__()</methodname> メソッドの仕事であることに注意していただきたい。<parameter>key</parameter> が不適な型な場合は <exceptionname>TypeError</exceptionname> を送出し、値が（負の値に対する特殊な解釈の後）シーケンスの添字の集合外である場合は <exceptionname>IndexError</exceptionname> を送出しなければならない。注意：シーケンスの終了を適切に検出するため、<code language="Python">for</code> ループは不正な添字に対して <exceptionname>IndexError</exceptionname> が送出することを想定している。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>__setitem__</methodname>(<parameter>self</parameter>, <parameter>key</parameter>, <parameter>value</parameter>)</term>
	  <listitem>
	    <para>
	      <code language="Python">self[key]</code> への代入を実装するために呼び出される。注意すべき点は <methodname>__getitem__()</methodname> と同じである。このメソッドは、マップ型についてはオブジェクトがキーに対する値の変更をサポートするか新しいキーを追加可能な場合、シーケンス型については要素が置換可能な場合のみ実装すべきである。不適な <parameter>key</parameter> 値に対しては <methodname>__getitem__()</methodname>メソッドと同様の例外を送出しなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>__delitem__</methodname>(<parameter>self</parameter>, <parameter>key</parameter>)</term>
	  <listitem>
	    <para>
	      <code language="Python">self[key]</code> の削除を実装するために呼び出される。注意すべき点は <methodname>__getitem__()</methodname> と同じである。このメソッドは、マップ型についてはオブジェクトがキーの削除をサポートする場合、シーケンス型については要素をシーケンスから削除可能な場合のみ実装すべきである。不適な <parameter>key</parameter> 値に対しては <methodname>__getitem__()</methodname> メソッドと同様の例外を送出しなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>__iter__</methodname>(<parameter>self</parameter>)</term>
	  <listitem>
	    <para>
	      このメソッドは、コンテナに対してイテレータが要求されたときに呼び出される。このメソッドは、コンテナ内のすべてのオブジェクトを走査する新しいイテレータオブジェクトを返さなければならない。マップ型については、コンテナのキーを走査しなければならず、<methodname>iterkeys()</methodname> メソッドとしても利用可能でなければならない。
	    </para>
	    <para>
	      イテレータオブジェクトもまたこのメソッドを実装する必要があり、自分自身を返さなければならない。イテレータオブジェクトの詳細については、<link xlink:href="https://docs.python.jp/3/library/index.html">Python ライブラリリファレンス</link>の「<link xlink:href="https://docs.python.jp/3/library/stdtypes.html#iterator-types">イテレータ型</link>」を見よ。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><methodname>__contains__</methodname>(<parameter>self</parameter>, <parameter>item</parameter>)</term>
	  <listitem>
	    <para>
	      メンバ関係テスト操作を実装するために呼び出される。<parameter>self</parameter> 内に <parameter>item</parameter> があれば真を、そうでなければ偽を返さなければならない。マップ型オブジェクトについては、値やキー・値の組ではなくキーを対象とすべきである。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section xml:id="v2.indexing.indexing_suite_subclasses">
      <title>indexing_suite の派生クラス</title>
      <para>
	<interfacename>indexing_suite</interfacename> はそのままで使用することを意図していない。<interfacename>indexing_suite</interfacename> の派生クラスにより 2 、3 のポリシー関数を提供しなければならない。しかしながら、標準的な添字アクセス可能な STL コンテナのための <interfacename>indexing_suite</interfacename> 派生クラス群が提供されている。ほとんどの場合、単に定義済みのクラス群を使用すればよい。場合によっては必要に応じて定義済みクラスを改良してもよい。
      </para>
    </section>

    <section xml:id="v2.indexing.vector_indexing_suite">
      <title>vector_indexing_suite［ヘッダ &lt;boost/python/indexing/vector_indexing_suite.hpp&gt;］</title>
      <para>
	<classname>vector_indexing_suite</classname> クラスは、<classname>std::vector</classname> クラス（および <classname>std::vector</classname> スタイルのクラス（例：<classname>std::vector</classname> のインターフェイスを持つクラス））をラップするために設計された定義済みの <classname>indexing_suite</classname> 派生クラスである。<classname>indexing_suite</classname> が要求するポリシーをすべて提供する。
      </para>
      <para>
	使用例：
      </para>
      <programlisting language="C++"><![CDATA[class X {...};
...

class_<std::vector<X> >("XVec")
    .def(vector_indexing_suite<std::vector<X> >())
;]]></programlisting>
      <para>
	<classname>XVec</classname> は完全な Python コンテナとなる（完全な例と Python のテストも見よ）。
      </para>
    </section>

    <section xml:id="v2.indexing.map_indexing_suite">
      <title>map_indexing_suite［ヘッダ &lt;boost/python/indexing/map_indexing_suite.hpp&gt;］</title>
      <para>
	<classname>map_indexing_suite</classname> クラスは、<classname>std::map</classname> クラス（および <classname>std::map</classname> スタイルのクラス（例：<classname>std::map</classname> のインターフェイスを持つクラス））をラップするために設計された定義済みの <interfacename>indexing_suite</interfacename> 派生クラスである。<interfacename>indexing_suite</interfacename> が要求するポリシーをすべて提供する。
      </para>
      <para>
	使用例：
      </para>
      <programlisting language="C++"><![CDATA[class X {...};
...

class_<std::map<X> >("XMap")
    .def(map_indexing_suite<std::map<X> >())
;]]></programlisting>
      <para>
	既定では添字アクセスした要素はプロキシで返される。<parameter>NoProxy</parameter> テンプレート引数で <constant>true</constant> を与えるとこれは無効化できる。<classname>XMap</classname> は完全な Python コンテナとなる（<link xlink:href="http://www.boost.org/libs/python/test/map_indexing_suite.cpp">完全な例</link>と <link xlink:href="http://www.boost.org/libs/python/test/map_indexing_suite.py">Python のテスト</link>も見よ）。
      </para>
    </section>
  </section>

  <section xml:id="v2.indexing.indexing_suite_class">
    <title>indexing_suite クラス</title>
    <informaltable>
      <thead>
	<tr>
	  <th>テンプレート引数</th>
	  <th>要件</th>
	  <th>セマンティクス</th>
	  <th>既定</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><type>Container</type></td>
	  <td>クラス型</td>
	  <td>Python に対してラップするコンテナ型。</td>
	  <td/>
	</tr>
	<tr>
	  <td><type>DerivedPolicies</type></td>
	  <td><interfacename>indexing_suite</interfacename> の派生クラス</td>
	  <td>ポリシーフックを提供する派生クラス群。以下の <link linkend="v2.indexing.DerivedPolicies">DerivedPolicies</link> を見よ。</td>
	  <td/>
	</tr>
	<tr>
	  <td><parameter>NoProxy</parameter></td>
	  <td>論理値</td>
	  <td>既定では添字アクセスした要素は Python の参照のセマンティクスを持ち、プロキシにより返される。これは <parameter>NoProxy</parameter> テンプレート引数に真を与えることで無効化できる。</td>
	  <td><constant>false</constant></td>
	</tr>
	<tr>
	  <td><parameter>NoSlice</parameter></td>
	  <td>論理値</td>
	  <td>スライスを許可しない。</td>
	  <td><constant>false</constant></td>
	</tr>
	<tr>
	  <td><type>Data</type></td>
	  <td/>
	  <td>コンテナのデータ型。</td>
	  <td><type>Container::value_type</type></td>
	</tr>
	<tr>
	  <td><type>Index</type></td>
	  <td/>
	  <td>コンテナの添字型。</td>
	  <td><type>Container::size_type</type></td>
	</tr>
	<tr>
	  <td><type>Key</type></td>
	  <td/>
	  <td>コンテナのキー型。</td>
	  <td><type>Container::value_type</type></td>
	</tr>
      </tbody>
    </informaltable>
    <programlisting language="C++">template &lt;
      class Container
    , class DerivedPolicies
    , bool NoProxy = false
    , bool NoSlice = false
    , class Data = typename Container::value_type
    , class Index = typename Container::size_type
    , class Key = typename Container::value_type
&gt;
class indexing_suite
    : <replaceable>unspecified</replaceable>
{
public:

    indexing_suite(); // デフォルトコンストラクタ
}</programlisting>

    <section xml:id="v2.indexing.DerivedPolicies">
      <title><type>DerivedPolicies</type></title>
      <para>
	派生クラスは <classname>indexing_suite</classname> が必要なフックを提供する。
      </para>
      <programlisting language="C++"><![CDATA[data_type&
get_item(Container& container, index_type i);

static object
get_slice(Container& container, index_type from, index_type to);

static void
set_item(Container& container, index_type i, data_type const& v);

static void
set_slice(
    Container& container, index_type from,
    index_type to, data_type const& v
);

template <class Iter>
static void
set_slice(Container& container, index_type from,
    index_type to, Iter first, Iter last
);

static void
delete_item(Container& container, index_type i);

static void
delete_slice(Container& container, index_type from, index_type to);

static size_t
size(Container& container);

template <class T>
static bool
contains(Container& container, T const& val);

static index_type
convert_index(Container& container, PyObject* i);

static index_type
adjust_index(index_type current, index_type from,
    index_type to, size_type len
);]]></programlisting>
      <para>
	これらのポリシーの大部分は自己説明的であるが、<methodname>convert_index</methodname> と <methodname>adjust_index</methodname> は少し説明が必要である。
      </para>
      <para>
	<methodname>convert_index</methodname> は Python の添字をコンテナが処理可能な C++ の添字に変換する。例えば Python における負の添字は右から数え始める（例：<code language="Python">C[-1]</code> は <varname>C</varname> 内の最も右の要素を差す）。<methodname>convert_index</methodname> は C++ コンテナのために必要な変換を処理しなければならない（例：<literal>-1</literal> は <code language="C++">C.size()-1</code> である）。<methodname>convert_index</methodname> はまた、添字の型（Python の動的型）を C++ コンテナが想定する実際の型に変換できなければならない。
      </para>
      <para>
	コンテナが拡張か縮小すると、要素への添字はデータの移動に追従して調整しなければならない。例えば 5 要素から成るベクタの 0 番目（a）から 3 つの要素を削除すると、添字 4 は添字 1 となる。
      </para>
      <literallayout><![CDATA[[a][b][c][d][e] ---> [d][e]
             ^           ^
             4           1]]></literallayout>
      <para>
	<methodname>adjust_index</methodname> の仕事は調整である。添字 <parameter>current</parameter> を与えると、この関数はコンテナにおける添字 <parameter>from</parameter>..<parameter>to</parameter> におけるデータを <parameter>len</parameter> 個の要素で置換したときの調整後の添字を返す。
      </para>
    </section>
  </section>

  <section xml:id="v2.indexing.vector_indexing_suite_class">
    <title>vector_indexing_suite クラス</title>
    <informaltable>
      <thead>
	<tr>
	  <th>テンプレート引数</th>
	  <th>要件</th>
	  <th>セマンティクス</th>
	  <th>既定</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><type>Container</type></td>
	  <td>クラス型</td>
	  <td>Python に対してラップするコンテナ型。</td>
	  <td/>
	</tr>
	<tr>
	  <td><parameter>NoProxy</parameter></td>
	  <td>論理値</td>
	  <td>既定では添字アクセスした要素は Python の参照のセマンティクスを持ち、プロキシにより返される。これは <parameter>NoProxy</parameter> テンプレート引数に真を与えることで無効化できる。</td>
	  <td><constant>false</constant></td>
	</tr>
	<tr>
	  <td><type>DerivedPolicies</type></td>
	  <td><interfacename>indexing_suite</interfacename> の派生クラス</td>
	  <td><classname>vector_indexing_suite</classname> はさらに定義済みのポリシーに派生している可能性がある。CRTP（<personname>James Coplien</personname> の「奇妙に再帰したテンプレートパターン」、C++ レポート、1995 年 2 月）を介した静的な多態により基底クラス <interfacename>indexing_suite</interfacename> が最派生クラスのポリシー関数を呼び出せる。</td>
	  <td/>
	</tr>
      </tbody>
    </informaltable>
    <programlisting language="C++">template &lt;
    class Container,
    bool NoProxy = false,
    class DerivedPolicies = <replaceable>unspecified_default</replaceable>
class vector_indexing_suite : <replaceable>unspecified_base</replaceable>
{
public:

    typedef typename Container::value_type data_type;
    typedef typename Container::value_type key_type;
    typedef typename Container::size_type index_type;
    typedef typename Container::size_type size_type;
    typedef typename Container::difference_type difference_type;

    data_type&amp;
    get_item(Container&amp; container, index_type i);

    static object
    get_slice(Container&amp; container, index_type from, index_type to);

    static void
    set_item(Container&amp; container, index_type i, data_type const&amp; v);

    static void
    set_slice(Container&amp; container, index_type from, 
        index_type to, data_type const&amp; v);

    template &lt;class Iter&gt;
    static void
    set_slice(Container&amp; container, index_type from,
        index_type to, Iter first, Iter last);

    static void 
    delete_item(Container&amp; container, index_type i);

    static void 
    delete_slice(Container&amp; container, index_type from, index_type to);
 
    static size_t
    size(Container&amp; container);
 
    static bool
    contains(Container&amp; container, key_type const&amp; key);
 
    static index_type
    convert_index(Container&amp; container, PyObject* i);
 
    static index_type
    adjust_index(index_type current, index_type from, 
        index_type to, size_type len);
};</programlisting>
  </section>

  <section xml:id="v2.indexing.map_indexing_suite_class">
    <title>map_indexing_suite クラス</title>
    <informaltable>
      <thead>
	<tr>
	  <th>テンプレート引数</th>
	  <th>要件</th>
	  <th>セマンティクス</th>
	  <th>既定</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><type>Container</type></td>
	  <td>クラス型</td>
	  <td>Python に対してラップするコンテナ型。</td>
	  <td/>
	</tr>
	<tr>
	  <td><parameter>NoProxy</parameter></td>
	  <td>論理値</td>
	  <td>既定では添字アクセスした要素は Python の参照のセマンティクスを持ち、プロキシにより返される。これは <parameter>NoProxy</parameter> テンプレート引数に真を与えることで無効化できる。</td>
	  <td><constant>false</constant></td>
	</tr>
	<tr>
	  <td><type>DerivedPolicies</type></td>
	  <td><interfacename>indexing_suite</interfacename> の派生クラス</td>
	  <td><classname>map_indexing_suite</classname> はさらに定義済みのポリシーに派生している可能性がある。CRTP（<personname>James Coplien</personname> の「奇妙に再帰したテンプレートパターン」、C++ レポート、1995 年 2 月）を介した静的な多態により基底クラス <interfacename>indexing_suite</interfacename> が最派生クラスのポリシー関数を呼び出せる。</td>
	  <td/>
	</tr>
      </tbody>
    </informaltable>
    <programlisting language="C++">template &lt;
    class Container,
    bool NoProxy = false,
    class DerivedPolicies = <replaceable>unspecified_default</replaceable>
class map_indexing_suite : <replaceable>unspecified_base</replaceable>
{
public:

    typedef typename Container::value_type value_type;
    typedef typename Container::value_type::second_type data_type;
    typedef typename Container::key_type key_type;
    typedef typename Container::key_type index_type;
    typedef typename Container::size_type size_type;
    typedef typename Container::difference_type difference_type;

    static data_type&amp;
    get_item(Container&amp; container, index_type i);

    static void
    set_item(Container&amp; container, index_type i, data_type const&amp; v);

    static void 
    delete_item(Container&amp; container, index_type i);
 
    static size_t
    size(Container&amp; container);
 
    static bool
    contains(Container&amp; container, key_type const&amp; key);
 
    static bool
    compare_index(Container&amp; container, index_type a, index_type b);

    static index_type
    convert_index(Container&amp; container, PyObject* i);
};</programlisting>
  </section>
</section>
