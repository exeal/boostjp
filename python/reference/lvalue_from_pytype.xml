<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.lvalue_from_pytype">
  <title>boost/python/lvalue_from_pytype.hpp</title>

  <section xml:id="v2.lvalue_from_pytype.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/lvalue_from_pypytype.hpp&gt;</filename> は、与えられた型の Python インスタンスから C++ オブジェクトを抽出する機能を提供する。典型的には、「伝統的な」Python の拡張型を取り扱う場合に有用である。
    </para>
  </section>

  <section xml:id="v2.lvalue_from_pytype.classes">
    <title>クラス</title>

    <section xml:id="v2.lvalue_from_pytype.lvalue_from_pytype-spec">
      <title><classname>lvalue_from_pytype</classname> クラステンプレート</title>
      <para>
	<classname>lvalue_from_pytype</classname> クラステンプレートは <wordasword>from_python</wordasword> 変換器を登録する。この変換器は与えられた Python 型のオブジェクトから個々の C++ 型への参照およびポインタを抽出できる。テンプレート引数は次のとおり。
	<!-- ここの from_python は型名じゃないの？ -->
      </para>
      <para>
	以下の表において <varname>x</varname> は <type>PythonObject&amp;</type> 型のオブジェクトである。
	<footnote>
	  <para>
	    訳注　<varname>x</varname> も <type>PythonObject</type> も見当たりませんが…。
	  </para>
	</footnote>
      </para>
      <table>
	<caption><classname>lvalue_from_python</classname> の要件</caption>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>セマンティクス</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>Extractor</type></td>
	    <td>参照型を返す <methodname>execute</methodname> 関数を持つ <link linkend="v2.Extractor.Extractor-concept">Extractor</link> モデル。</td>
	    <td>Python オブジェクトから lvalue を抽出する（オブジェクトの型が適合していれば）。</td>
	  </tr>
	  <tr>
	    <td><type>python_type</type></td>
	    <td><type><link xlink:href="http://docs.python.jp/2/c-api/typeobj.html">PyTypeObject</link>*</type> コンパイル時定数。</td>
	    <td>この変換器が変換可能なインスタンスの Python 型。Python の派生型もまた変換可能である。</td>
	  </tr>
	</tbody>
      </table>

      <section xml:id="v2.lvalue_from_pytype.lvalue_from_pytype-spec-synopsis">
	<title><classname>lvalue_from_pytype</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <class Extractor, PyTypeObject const* python_type>
   struct lvalue_from_pytype
   {
       lvalue_from_pytype();
   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.lvalue_from_pytype.lvalue_from_pytype-spec-ctors">
	<title><classname>lvalue_from_pytype</classname> クラステンプレートのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>lvalue_from_pytype</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    与えられた型の Python オブジェクトを <methodname>Extractor::execute</methodname> が返す型の lvalue へ変換する変換器を登録する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.extract_identity.extract_identity-spec">
      <title><classname>extract_identity</classname> クラステンプレート</title>
      <para>
	<classname>extract_identity</classname> は、抽出する C++ 型と Python オブジェクト型が同一であるありふれた場合に使用する <link linkend="v2.Extractor.Extractor-concept">Extractor</link> モデルである。
      </para>

      <section xml:id="v2.extract_identity.extract_identity-spec-synopsis">
	<title><classname>extract_identity</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <class InstanceType>
   struct extract_identity
   {
      static InstanceType& execute(InstanceType& c);
   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.extract_identity.extract_identity-spec-statics">
	<title><classname>extract_identity</classname> クラステンプレートの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>InstanceType&amp;</type>
	      <methodname>execute</methodname>
	      <methodparam>
		<type>InstanceType&amp;</type>
		<parameter>c</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <parameter>c</parameter>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.extract_member-spec">
      <title><classname>extract_member</classname> クラステンプレート</title>
      <para>
	<classname>extract_member</classname> は、抽出する C++ 型が Python オブジェクトのメンバであるありふれた場合に使用する <link linkend="v2.Extractor.Extractor-concept">Extractor</link> モデルである。
      </para>

      <section xml:id="v2.extract_member.extract_member-spec-synopsis">
	<title><classname>extract_member</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <class InstanceType, class MemberType, MemberType (InstanceType::*member)>
   struct extract_member
   {
      static MemberType& execute(InstanceType& c);
   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.extract_member.extract_member-spec-statics">
	<title><classname>extract_member</classname> クラステンプレートの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>MemberType&amp;</type>
	      <methodname>execute</methodname>
	      <methodparam>
		<type>InstanceType&amp;</type>
		<parameter>c</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">c.*member</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.lvalue_from_pytype.examples">
    <title>例</title>
    <para>
      以下の例では、Python のドキュメントにある標準的な <link xlink:href="http://docs.python.jp/2/extending/newtypes.html#dnt-basics">noddy モジュール例</link>を実装したとして、<classname>Noddy</classname> を操作するモジュールをビルドしたいとする。<type>noddy_NoddyObject</type> は特に気を引くような情報を持たない単純なものであるので、この例は少しばかりわざとらしい（何らかの理由で、特定の 1 つのオブジェクトに対する追跡を維持したいものとする）。このモジュールは <type>noddy_NoddyType</type> を定義するモジュールに動的にリンクしなければならない。
    </para>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/handle.hpp>
#include <boost/python/borrowed.hpp>
#include <boost/python/lvalue_from_pytype.hpp>

// Python のドキュメントから引っ張り出した定義
typedef struct {
   PyObject_HEAD
} noddy_NoddyObject;

using namespace boost::python;
static handle<noddy_NoddyObject> cache;

bool is_cached(noddy_NoddyObject* x)
{
   return x == cache.get();
}

void set_cache(noddy_NoddyObject* x)
{
   cache = handle<noddy_NoddyObject>(borrowed(x));
}

BOOST_PYTHON_MODULE(noddy_cache)
{
   def("is_cached", is_cached);
   def("set_cache", set_cache);

   // Noddy の lvalue を扱う変換器
   lvalue_from_pytype<extract_identity<noddy_NoddyObject>,&noddy_NoddyType>();
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import noddy</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>n = noddy.new_noddy()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>import noddy_cache</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>noddy_cache.is_cached(n)</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>noddy_cache.set_cache(n)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>noddy_cache.is_cached(n)</userinput>
<computeroutput>1</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>noddy_cache.is_cached(noddy.new_noddy())</userinput>
<computeroutput>0</computeroutput></screen>
    </section>
  </section>
</section>
