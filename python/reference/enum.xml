<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.enum">
  <title>boost/python/enum.hpp</title>

  <section xml:id="v2.enum.introduction">
    <title>はじめに</title>
    <para>
      <filename>&lt;boost/python/enum.hpp&gt;</filename> は、ユーザが C++ 列挙型を Python へエクスポートするためのインターフェイスを定義する。エクスポートする列挙型を引数に持つ <classname>enum_</classname> クラステンプレートを宣言する。
    </para>
  </section>

  <section xml:id="v2.enum.classes">
    <title>クラス</title>

    <section xml:id="v2.enum.enum_-spec">
      <title><classname>enum_&lt;T&gt;</classname> クラステンプレート</title>
      <para>
	第 1 引数に渡した C++ 型に対応する、Python の <type>int</type> 型から派生した Python クラスを作成する。
      </para>

      <section xml:id="v2.enum.enum_-spec-synopsis">
	<title><classname>enum_</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;class T&gt;
  class enum_ : public <classname linkend="v2.object.object-spec">object</classname>
  {
    enum_(char const* name, char const* doc = 0);
    enum_&lt;T&gt;&amp; value(char const* name, T);
    enum_&lt;T&gt;&amp; export_values();
  };
}}</programlisting>
      </section>

      <section xml:id="v2.enum.enum_-spec-ctors">
	<title><classname>enum_</classname> クラステンプレートのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>enum_</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>doc</parameter>
		<initializer>0</initializer>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    名前 <parameter>name</parameter> の <type>int</type> から派生した Python 拡張型を保持する <classname>enum_</classname> オブジェクトを構築する。<link linkend="v2.scope.introduction">現在のスコープ</link>の名前 <parameter>name</parameter> の属性を新しい列挙型に束縛する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.enum.enum_-spec-modifiers">
	<title><classname>enum_</classname> クラステンプレートの変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>inline</modifier>
	      <type>enum_&lt;T&gt;&amp;</type>
	      <methodname>value</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>T</type>
		<parameter>x</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    ラップした列挙型のインスタンスを名前 <parameter>name</parameter> 、値 <parameter>x</parameter> とともに型の辞書へ追加する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>inline</modifier>
	      <type>enum_&lt;T&gt;&amp;</type>
	      <methodname>export_values</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <methodname>value()</methodname> の呼び出しでエクスポートしたすべての列挙値を同じ名前で現在の <classname linkend="v2.scope.scope-spec">scope</classname> の属性として設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.enum.examples">
    <title>例</title>
    <para>
      C++ のモジュール定義：
    </para>
    <programlisting language="C++">#include &lt;boost/python/enum.hpp&gt;
#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/module.hpp&gt;

using namespace boost::python;

enum color { red = 1, green = 2, blue = 4 };

color identity_(color x) { return x; }

BOOST_PYTHON_MODULE(enums)
{
    enum_&lt;color&gt;("color")
        .value("red", red)
        .value("green", green)
        .export_values()
        .value("blue", blue)
        ;
    
    def("identity", identity_);
}</programlisting>
    <para>
      Python の対話コード：
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from enums import *</userinput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(red)</userinput>
<computeroutput>enums.color.red</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color.red)</userinput>
<computeroutput>enums.color.red</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(green)</userinput>
<computeroutput>enums.color.green</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color.green)</userinput>
<computeroutput>enums.color.green</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(blue)</userinput>
<computeroutput>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name blue' is not defined</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color.blue)</userinput>
<computeroutput>enums.color.blue</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color(1))</userinput>
<computeroutput>enums.color.red</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color(2))</userinput>
<computeroutput>enums.color.green</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color(3))</userinput>
<computeroutput>enums.color(3)</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(color(4))</userinput>
<computeroutput>enums.color.blue</computeroutput>

<prompt>&gt;&gt;&gt; </prompt><userinput>identity(1)</userinput>
<computeroutput>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: bad argument type for built-in operation</computeroutput></screen>
  </section>
</section>
