<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.def">
  <title>boost/python/def.hpp</title>

  <section xml:id="v2.def.introduction">
    <title>はじめに</title>
    <para>
      <function linkend="v2.def.def-spec">def()</function> は現在の <classname linkend="v2.scope">scope</classname> で C++ の関数や呼び出し可能オブジェクトを Python の関数としてエクスポートする関数である。
    </para>
  </section>

  <section xml:id="v2.def.functions">
    <title>関数</title>

    <section xml:id="v2.def.def-spec">
      <title>def</title>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class Fn&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>void <function>def</function></funcdef>
	  <paramdef>char const* <parameter>name</parameter></paramdef>
	  <paramdef>Fn <parameter>fn</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class Fn, class A1&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>void <function>def</function></funcdef>
	  <paramdef>char const* <parameter>name</parameter></paramdef>
	  <paramdef>Fn <parameter>fn</parameter></paramdef>
	  <paramdef>A1 const&amp;</paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class Fn, class A1, class A2&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>void <function>def</function></funcdef>
	  <paramdef>char const* <parameter>name</parameter></paramdef>
	  <paramdef>Fn <parameter>fn</parameter></paramdef>
	  <paramdef>A1 const&amp;</paramdef>
	  <paramdef>A2 const&amp;</paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class Fn, class A1, class A2, class A3&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>void <function>def</function></funcdef>
	  <paramdef>char const* <parameter>name</parameter></paramdef>
	  <paramdef>Fn <parameter>fn</parameter></paramdef>
	  <paramdef>A1 const&amp;</paramdef>
	  <paramdef>A2 const&amp;</paramdef>
	  <paramdef>A3 const&amp;</paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
	    </para>
	    <itemizedlist>
	      <listitem>
		<para>
		  <type>Fn</type> が <classname linkend="v2.object.object-spec">object</classname> かその派生型である場合、現在のスコープに多重定義の1つとして追加される。<parameter>fn</parameter> は<link xlink:href="http://docs.python.jp/2/library/functions.html#callable">呼び出し可能</link>でなければならない。
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <parameter>a1</parameter> が <nonterminal def="" linkend="v2.overloads.overload-dispatch-expression">overload-dispatch-expression</nonterminal> の結果である場合、有効なのは 2 番目の形式のみであり <parameter>fn</parameter> は<glossterm baseform="arity">引数長</glossterm>が <type>A1</type> の<link linkend="v2.overloads.overload-dispatch-expression">最大引数長</link>と同じ関数へのポインタかメンバ関数へのポインタでなければならない。
		</para>
		<variablelist spacing="compact">
		  <varlistentry>
		    <term>効果：</term>
		    <listitem>
		      <para>
			<type>Fn</type> の引数型列の接頭辞 <replaceable>P</replaceable> それぞれについて、その長さが <type>A1</type> の<link linkend="v2.overloads.overload-dispatch-expression">最小引数長</link>であるものから、<link linkend="v2.scope">現在のスコープ</link>に <function>name(...)</function> 関数の多重定義を追加する。生成された各多重定義は、<parameter>a1</parameter> の<link linkend="v2.CallPolicies">呼び出しポリシー</link>のコピーを使用して <parameter>a1</parameter> の <nonterminal def="">call-expression</nonterminal> を <replaceable>P</replaceable> とともに呼び出す。<type>A1</type> の合法な接頭辞の最長のものが <replaceable>N</replaceable> 個の型を有しており <parameter>a1</parameter> が <replaceable>M</replaceable> 個のキーワードを保持しているとすると、各多重定義の先頭の <replaceable>N</replaceable> – <replaceable>M</replaceable> 個の引数に使用される。
		      </para>
		    </listitem>
		  </varlistentry>
		</variablelist>
	      </listitem>
	      <listitem>
		<para>
		  それ以外の場合、<parameter>fn</parameter> は null でない関数へのポインタかメンバ関数へのポインタでなければならず、<link linkend="v2.scope">現在のスコープ</link>に <parameter>fn</parameter> の多重定義を 1 つ追加する。<parameter>a1</parameter> から <parameter>a3</parameter> のいずれかが与えられた場合、下表から任意の順番であってよい。
		</para>
		<informaltable>
		  <thead>
		    <tr>
		      <th>名前</th>
		      <th>要件・型の特性</th>
		      <th>効果</th>
		    </tr>
		  </thead>
		  <tbody>
		    <tr>
		      <td>docstring</td>
		      <td><glossterm baseform="ntbs">ntbs</glossterm>。</td>
		      <td>値は結果の多重定義メソッドの <property>__doc__</property> 属性に束縛される。</td>
		    </tr>
		    <tr>
		      <td>policies</td>
		      <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
		      <td>結果の多重定義メソッドの呼び出しポリシーとしてコピーが使用される。</td>
		    </tr>
		    <tr>
		      <td>keywords</td>
		      <td><parameter>fn</parameter> の<glossterm baseform="arity">引数長</glossterm>を超えることがないことを指定する <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> の結果。</td>
		      <td>結果の多重定義メソッドの呼び出しポリシーとしてコピーが使用される。</td>
		    </tr>
		  </tbody>
		</informaltable>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="v2.def.examples">
    <title>例</title>
    <programlisting language="C++">#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/args.hpp&gt;

using namespace boost::python;

char const* foo(int x, int y) { return "foo"; }

BOOST_PYTHON_MODULE(def_test)
{
    def("foo", foo, args("x", "y"), "foo のドキュメンテーション文字列");
}</programlisting>
  </section>
</section>
