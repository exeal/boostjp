<?xml version="1.0" ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="concepts">
  <title>コンセプト</title>
  
  <section xml:id="concepts.callpolicies">
    <title>CallPolicies コンセプト</title>

    <section xml:id="concepts.callpolicies.introduction">
      <title>はじめに</title>
      <para>
	CallPolicies コンセプトのモデルは、Boost.Python が生成した Python の呼び出し可能オブジェクトの振る舞いを、関数やメンバ関数ポインタのようなラップした C++ オブジェクトに対して特殊化するのに使用する。以下の 4 つの振る舞いを提供する。
      </para>
      <orderedlist>
	<listitem>
	  <para><methodname>precall</methodname> ― ラップしたオブジェクトが呼び出される前の Python 引数タプルの管理</para>
	</listitem>
	<listitem>
	  <para><type>result_converter</type> ― C++ 戻り値の処理</para>
	</listitem>
	<listitem>
	  <para><methodname>postcall</methodname> ― ラップしたオブジェクトが呼び出された後の Python 引数タプルと戻り値の管理</para>
	</listitem>
	<listitem>
	  <para><type>extract_return_type</type> ― 与えられたシグニチャ型並びから戻り値の型を抽出するメタ関数</para>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="concepts.callpolicies.callpolicies_composition">
      <title>CallPolicies の合成</title>
      <para>
	ユーザが同じ呼び出し可能オブジェクトで複数の CallPolicies モデルを使用可能にするため、Boost.Python の CallPolicies クラステンプレートは再帰的に合成可能な数珠繋ぎのインターフェイスを提供する。このインターフェイスは省略可能なテンプレート引数 <type>Base</type> を取り、既定は <classname linkend="default_call_policies.default_call_policies-spec">default_call_policies</classname> である。慣習に従って、<type>Base</type> の <methodname>precall</methodname> 関数はより外側のテンプレートが与えた <methodname>precall</methodname> 関数の<emphasis>後で</emphasis>呼び出され、<type>Base</type> の <methodname>postcall</methodname> 関数はより外側のテンプレートの <methodname>postcall</methodname> 関数より<emphasis>前に</emphasis>呼び出される。より外側のテンプレートで <type>result_converter</type> が与えられた場合、<type>Base</type> で与えた <type>result_converter</type> は<emphasis>上書きされる</emphasis>。例えば <classname linkend="return_internal_reference.return_internal_reference-spec">return_internal_reference</classname> を見よ。
      </para>
    </section>

    <section xml:id="concepts.callpolicies.concept_requirements">
      <title>コンセプトの要件</title>

      <section xml:id="CallPolicies.CallPolicies-concept">
	<title>CallPolicies コンセプト</title>
	<para>
	  以下の表で <varname>x</varname> は CallPolicies のモデルである型 <type>P</type> のオブジェクト、<varname>a</varname> は Python の引数タプルオブジェクトを指す <type>PyObject*</type> 、<varname>r</varname> は「予備的な」戻り値オブジェクトを参照する <type>PyObject*</type> を表す。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>型</th>
	      <th>結果・セマンティクス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">x.precall(a)</code></td>
	      <td><type>bool</type> へ変換可能</td>
	      <td>失敗時は <literal>false</literal> および <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred</function>() != 0</code> 、それ以外は <literal>true</literal>。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">P::result_converter</code></td>
	      <td><link linkend="ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデル</td>
	      <td>「予備的な」戻り値オブジェクトを生成する MPL の単項<link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/metafunction-class.html">メタ関数クラス</link>。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">x.postcall(a, r)</code></td>
	      <td><type>PyObject*</type> へ変換可能</td>
	      <td>失敗時は <literal>0</literal> および <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred</function>() != 0</code>。例外送出中であっても「参照を保持」しなければならない。言い換えると、<varname>r</varname> を返さない場合はその参照カウントを減らさなければならず、別の生存しているオブジェクトを返す場合はその参照カウントを増やさなければならない。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">P::extract_return_type</code></td>
	      <td><link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/metafunction.html">Metafunction</link> のモデル</td>
	      <td>与えられたシグニチャから戻り値の型を抽出する MPL の単項 <link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/metafunction.html">Metafunction</link>。既定では <classname>mpl::front</classname> から導出する。</td>
	    </tr>
	  </tbody>
	</informaltable>
	<para>
	  CallPolicies のモデルは <link xlink:href="http://www.boost.org/libs/utility/CopyConstructible.html">CopyConstructible</link> であることが要求される。
	</para>
      </section>
    </section>
  </section>

  <section xml:id="concepts.dereferenceable">
    <title>Dereferenceable コンセプト</title>

    <section xml:id="concepts.dereferenceable.introduction">
      <title>はじめに</title>
      <para>
	Dereferenceable 型のインスタンスは lvalue へアクセスするポインタのように使用できる。
      </para>
    </section>

    <section xml:id="concepts.dereferenceable.concept_requirements">
      <title>コンセプトの要件</title>

      <section xml:id="Dereferenceable.Dereferenceable-concept">
	<title>Dereferenceable コンセプト</title>
	<para>
	  以下の表で <type>T</type> は Dereferenceable のモデル、<varname>x</varname> は型 <type>T</type> のオブジェクトを表す。またポインタはすべて Dereferenceable とする。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>結果</th>
	      <th>操作上のセマンティクス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">get_pointer(x)</code></td>
	      <td><code language="C++"><classname linkend="pointee.pointee-spec">pointee</classname>&lt;T&gt;::type*</code> へ変換可能</td>
	      <td><code language="C++">&amp;*x</code> かヌルポインタ</td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>
    </section>
  </section>

  <section xml:id="concepts.extractor">
    <title>Extractor コンセプト</title>

    <section xml:id="concepts.extractor.introduction">
      <title>はじめに</title>
      <para>
	Extractor は、Boost.Python が Python オブジェクトから C++ オブジェクトを抽出するのに使用するクラスである。典型的には、「伝統的な」Python 拡張型について <token>from_python</token> 変換を定義するのに使用する。
      </para>
    </section>

    <section xml:id="concepts.extractor.concept_requirements">
      <title>コンセプトの要件</title>

      <section xml:id="Extractor.Extractor-concept">
	<title>Extractor コンセプト</title>
	<para>
	  以下の表で <type>X</type> は Extractor のモデル、<varname>a</varname> は Python オブジェクト型のインスタンスを表す。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>型</th>
	      <th>セマンティクス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">X::execute(a)</code></td>
	      <td>非 void</td>
	      <td>抽出する C++ オブジェクトを返す。<methodname>execute</methodname> 関数は多重定義してはならない。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">&amp;a.ob_type</code></td>
	      <td><code language="C++"><type xlink:href="http://docs.python.jp/2/c-api/typeobj.html">PyTypeObject</type>**</code></td>
	      <td><type>PyObject</type> とレイアウト互換なオブジェクトの <varname>ob_type</varname> フィールドを指す。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="concepts.extractor.notes">
	<title>注意事項</title>
	<para>
	  簡単に言うと、Extractor の <methodname>execute</methodname> メンバは多重定義のない、Python オブジェクト型を 1 つだけ引数にとる静的関数でなければならない。<type>PyObject</type> から公開派生した（かつあいまいでない継承関係にある）型、および <type>PyObject</type> とレイアウト互換な <acronym>POD</acronym> 型もこの Python オブジェクト型に含まれる。
	</para>
      </section>
    </section>
  </section>

  <section xml:id="concepts.holdergenerator">
    <title>HolderGenerator コンセプト</title>

    <section xml:id="concepts.holdergenerator.introduction">
      <title>はじめに</title>
      <para>
	HolderGenerator はその引数のインスタンスを、ラップした C++ クラスインスタンス内に保持するのに適した型を返す単項メタ関数クラスである。
      </para>
    </section>

    <section xml:id="concepts.holdergenerator.concept-requirements">
      <title>コンセンプトの要件</title>

      <section xml:id="HolderGenerator.HolderGenerator-concept">
	<title>HolderGenerator コンセプト</title>
	<para>
	  以下の表で <type>G</type> は HolderGenerator のモデル型、<classname>X</classname> はクラス型を表す。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>要件</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">G::apply&lt;X&gt;::type</code></td>
	      <td>型 <classname>X</classname> のオブジェクトを保持できる <classname linkend="instance_holder.instance_holder-spec">instance_holder</classname> の具象派生クラス。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>
    </section>
  </section>

  <section xml:id="concepts.resultconverter">
    <title>ResultConverter/ResultConverterGenerator コンセプト</title>

    <section xml:id="concepts.resultconverter.introduction">
      <title>はじめに</title>
      <para>
	型 <type>T</type> に対する ResultConverter は、型 <type>T</type> の C++ 戻り値を <token>to_python</token> 変換するのにそのインスタンスが使用可能な型である。ResultConverterGenerator は、C++ 関数の戻り値型が与えられたときにその型に対する ResultConverter を返す MPL の単項メタ関数クラスである。Boost.Python における ResultConverter は一般的にライブラリの変換器レジストリを探索して適切な変換器を探すが、レジストリを使用しない変換器もありうる。
      </para>
    </section>

    <section xml:id="concepts.resultconverter.resultconverter_concept_requirem">
      <title>コンセプトの要件</title>

      <section xml:id="ResultConverter.ResultConverter-concept">
	<title>ResultConverter コンセプト</title>
	<para>
	  以下の表で <type>C</type> は型 <type>R</type> に対する ResultConverter 、<varname>c</varname> は型 <type>C</type> のオブジェクト、<varname>r</varname> は型 <type>R</type> のオブジェクトを表す。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>型</th>
	      <th>セマンティクス</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">C c;</code></td>
	      <td/>
	      <td><type>C</type> のオブジェクトを構築する。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">c.convertible()</code></td>
	      <td><type>bool</type> へ変換可能</td>
	      <td><type>R</type> の値から Python オブジェクトへの変換が不可能な場合は <literal>false</literal>。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">c(r)</code></td>
	      <td><type>PyObject*</type> へ変換可能</td>
	      <td><varname>r</varname> に対応する Python オブジェクトへのポインタ。<varname>r</varname> が <token>to_python</token> 変換不可能な場合は <literal>0</literal> で、<function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred</function> は非 <literal>0</literal> を返すはずである。</td>
	    </tr>
	    <tr>
	      <td><code language="C++">c.get_pytype()</code></td>
	      <td><type>PyTypeObject const*</type></td>
	      <td>変換の結果に対応する Python の型オブジェクトへのポインタか <literal>0</literal>。ドキュメンテーションの生成に使用する。<literal>0</literal> を返した場合はドキュメンテーション内で生成された型は <emphasis><type>object</type></emphasis> になる。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>

      <section xml:id="concepts.resultconverter.resultconvertergenerator_concept">
	<title>ResultConverterGenerator コンセプト</title>
	<para>
	  以下の表で <type>G</type> は ResultConverterGenerator 型、<type>R</type> は C++ 関数の戻り値型。
	</para>
	<informaltable>
	  <thead>
	    <tr>
	      <th>式</th>
	      <th>要件</th>
	    </tr>
	  </thead>
	  <tbody>
	    <tr>
	      <td><code language="C++">G::apply&lt;R&gt;::type</code></td>
	      <td><type>R</type> に対する ResultConverter 型。</td>
	    </tr>
	  </tbody>
	</informaltable>
      </section>
    </section>
  </section>

  <section xml:id="concepts.objectwrapper">
    <title>ObjectWrapper/TypeWrapper コンセプト</title>

    <section xml:id="concepts.objectwrapper.introduction">
      <title>はじめに</title>
      <para>
	Python オブジェクトを管理するクラスと Python 風の構文をサポートするクラスを表現する、2 つのコンセプトを定義する。
      </para>
    </section>

    <section xml:id="concepts.objectwrapper.objectwrapper_concept_requiremen">
      <title>コンセプトの要件</title>

      <section xml:id="ObjectWrapper.ObjectWrapper-concept">
	<title>ObjectWrapper コンセプト</title>
	<para>
	  ObjectWrapper コンセプトのモデルは公開アクセス可能な基底クラスとして <classname linkend="object.object-spec">object</classname> を持ち、特殊な構築の振る舞いとメンバ関数（テンプレートメンバ関数であることが多い）による便利な機能を提供する。戻り値の型 <type>R</type> 自身が <link linkend="ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> である場合を除いて、次のメンバ関数呼び出し形式は
	</para>
	<programlisting language="C++">x.<replaceable>some_function</replaceable>(a1, a2,...a<replaceable>n</replaceable>)</programlisting>
	<para>
	  常に以下と同じセマンティクスを持つ。
	</para>
	<programlisting language="C++"><classname linkend="extract.extract-spec">extract</classname>&lt;R&gt;(x.attr("some_function")(<methodname linkend="object.object-spec-ctors">object</methodname>(a1), <methodname linkend="object.object-spec-ctors">object</methodname>(a2),...<methodname linkend="object.object-spec-ctors">object</methodname>(an)))()</programlisting>
	<para>
	  <type>R</type> が <link linkend="ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> である場合、戻り値の型は直接以下により構築する。
	</para>
	<programlisting language="C++">x.attr("some_function")(<methodname linkend="object.object-spec-ctors">object</methodname>(a1), <methodname linkend="object.object-spec-ctors">object</methodname>(a2),...<methodname linkend="object.object-spec-ctors">object</methodname>(a<replaceable>n</replaceable>)).ptr()</programlisting>
	<para>
	  （ただし以下の<link linkend="ObjectWrapper.caveat">注意</link>も見よ。）
	</para>
      </section>

      <section xml:id="concepts.objectwrapper.typewrapper_concept_requirements">
	<title>TypeWrapper コンセプト</title>
	<para>
	  TypeWrapper は個々の Python の型 <type>X</type> と一体となった ObjectWrapper の改良版である。TypeWrapper として <type>T</type> があるとすると、
	</para>
	<programlisting language="C++">T(a1, a2,...a<replaceable>n</replaceable>)</programlisting>
	<para>
	  上記の合法なコンストラクタ式は、以下に相当する引数列で <type>X</type> を呼び出した結果を管理する新しい <type>T</type> オブジェクトを構築する。
	</para>
	<programlisting language="C++"><methodname linkend="object.object-spec-ctors">object</methodname>(a1), <methodname linkend="object.object-spec-ctors">object</methodname>(a2),...<methodname linkend="object.object-spec-ctors">object</methodname>(a<replaceable>n</replaceable>)</programlisting>
	<para>
	  ラップした C++ 関数の引数、あるいは <classname linkend="extract.extract-spec">extract&lt;&gt;</classname> のテンプレート引数として使用した場合、対応する Python 型のインスタンスだけがマッチするとみなされる。
	</para>
      </section>
    </section>

    <section xml:id="concepts.objectwrapper.caveat">
      <title>注意</title>
      <para>
	戻り値の型が TypeWrapper である場合の特殊なメンバ関数の呼び出し規則は結論として、返されたオブジェクトが不適切な型の Python オブジェクトを管理している可能がある。これは大抵の場合、深刻な問題とはならない（最悪の場合の結果は、エラーが実行時に検出される場合、つまり他のあらゆる場合よりも少し遅いタイミングだ）。このようなことが起こる例として、<classname linkend="dict.dict-spec">dict</classname> のメンバ関数 <methodname>items</methodname> が <classname linkend="list.list-spec">list</classname> 型のオブジェクトを返すことに注意していただきたい。今、ユーザがこの <classname>dict</classname> の派生クラスを Python 内で定義すると、
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>class mydict(dict):</userinput>
<prompt>... </prompt><userinput>    def items(self):</userinput>
<prompt>... </prompt><userinput>        return tuple(dict.items(self)) # タプルを返す</userinput></screen>
      <para>
	<classname>mydict</classname> のインスタンスは <classname>dict</classname> のインスタンスでもあるため、ラップした C++ 関数の引数として使用すると、<classname linkend="dict.dict-spec">boost::python::dict</classname> は Python の <classname>mydict</classname> 型オブジェクトも受け取る。このオブジェクトに対して <methodname>items()</methodname> を呼び出すと、実際には Python のタプルを保持した <classname linkend="list.list-spec">boost::python::list</classname> のインスタンスが返る。このオブジェクトで続けて <classname>list</classname> のメソッド（例えば <methodname>append</methodname> 等、変更を伴う操作）を使用すると、同じことを Python で行った場合と同様の例外が送出する。
      </para>
    </section>
  </section>
</chapter>
