<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.init">
  <title>boost/python/init.hpp</title>

  <section xml:id="v2.init.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/init.hpp&gt;</filename> は、C++ コンストラクタを Python へ拡張クラスの <methodname>__init__</methodname> 関数としてエクスポートするインターフェイスを定義する。
    </para>
  </section>

  <section xml:id="v2.init.init-expressions">
    <title><nonterminal def="">init-expressions</nonterminal></title>
    <para>
      <nonterminal def="">init-expression</nonterminal> は、拡張クラスについて生成される <methodname>__init__</methodname> メソッド群を記述するのに使用する。結果は以下のプロパティを持つ。
    </para>
    <variablelist spacing="compact">
      <varlistentry>
	<term>docstring：</term>
	<listitem>
	  <para>
	    モジュールの <property>__doc__</property> 属性に束縛する値を持つ <glossterm baseform="ntbs">ntbs</glossterm>。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>keywords：</term>
	<listitem>
	  <para>
	    生成される <methodname>__init__</methodname> 関数の引数（の残りの部分列）に名前をつけるのに使用する <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal>。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>call policies：</term>
	<listitem>
	  <para>
	    <link linkend="v2.CallPolicies">CallPolicies</link> モデルのインスタンス。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>argument types：</term>
	<listitem>
	  <para>
	    ラップした C++ オブジェクトを構築するのに使用する C++ 引数型の MPL 列。<nonterminal def="">init-expression</nonterminal> は、引数型の接頭辞列が与える<emphasis>合法な接頭辞</emphasis>を 1 つ以上持つ。
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="v2.init.classes">
    <title>クラス</title>

    <section xml:id="v2.init.init-spec">
      <title><classname>init&lt;T1 = <replaceable>unspecified</replaceable>, T2 = <replaceable>unspecified</replaceable>, ...Tn = <replaceable>unspecified</replaceable>&gt;</classname> クラステンプレート</title>
      <para>
	1 つ以上の <methodname>__init__</methodname> 関数群を指定するのに使用する <link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/forward-sequence.html">MPL 列</link>。末尾の T<subscript>i</subscript> のみ <classname linkend="v2.init.optional-spec">optional&lt;...&gt;</classname> のインスタンスであってもよい。
      </para>

      <section xml:id="v2.init.init-spec-synopsis">
	<title><classname>init</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;T1 = <replaceable>unspecified</replaceable>,...T<replaceable>n</replaceable> = <replaceable>unspecified&gt;</replaceable>
  struct init
  {
      init(char const* doc = 0);
      template &lt;class Keywords&gt; init(Keywords const&amp; kw, char const* doc = 0);
      template &lt;class Keywords&gt; init(char const* doc, Keywords const&amp; kw);

      template &lt;class CallPolicies&gt;
      <replaceable>unspecified</replaceable> operator[](CallPolicies const&amp; policies) const
  };
}}</programlisting>
      </section>

      <section xml:id="v2.init.init-spec-ctors">
	<title><classname>init</classname> クラステンプレートのコンストラクタ</title>
	<constructorsynopsis language="C++">
	  <methodname>init</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>doc</parameter>
	    <initializer>0</initializer>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <modifier>template &lt;class Keywords&gt;</modifier>
	  <methodname>init</methodname>
	  <methodparam>
	    <type>Keywords const&amp;</type>
	    <parameter>kw</parameter>
	  </methodparam>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>doc</parameter>
	    <initializer>0</initializer>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <modifier>template &lt;class Keywords&gt;</modifier>
	  <methodname>init</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>doc</parameter>
	  </methodparam>
	  <methodparam>
	    <type>Keywords const&amp;</type>
	    <parameter>kw</parameter>
	  </methodparam>
	</constructorsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		<parameter>doc</parameter> は与えられた場合 <glossterm baseform="ntbs">ntbs</glossterm>。<parameter>kw</parameter> は与えられた場合 <nonterminal def="">keyword-expression</nonterminal> の結果でなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		結果は、docstring が <parameter>doc</parameter> 、keywords が <parameter>kw</parameter> への参照である <nonterminal def="">init-expression</nonterminal> である。第 1 形式を使用した場合、結果の式の keywords は空。式の call policies は <classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname> のインスタンス。<type>T<replaceable>n</replaceable></type> が <code language="C++"><classname linkend="v2.init.optional-spec">optional</classname>&lt;U1, U2, ...Um&gt;</code> である場合、式の合法な接頭辞群は次のとおり与えられる。
	      </para>
	      <equation>
		<title/>
		<mathphrase>
		  (T1, T2,...T<replaceable>n-1</replaceable>), (T1, T2,...T<replaceable>n-1</replaceable>  , U1), (T1, T2,...T<replaceable>n-1</replaceable>  , U1, U2), ...(T1, T2,...T<replaceable>n-1</replaceable>  , U1, U2,...U<replaceable>m</replaceable>)
		</mathphrase>
	      </equation>
	      <para>
		それ以外の場合、式の<emphasis>合法な接頭辞</emphasis>はユーザが指定したテンプレート引数で与えたものとなる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>

      <section xml:id="v2.init.init-spec-observers">
	<title><classname>init</classname> クラスのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Policies&gt;</modifier>
	      <type><replaceable>unspecified</replaceable></type>
	      <methodname>operator[]</methodname>
	      <methodparam>
		<type>Policies const&amp;</type>
		<parameter>policies</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <type>Policies</type> は <link linkend="v2.CallPolicies">CallPolicies</link> のモデル。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <classname>init</classname> オブジェクトとすべて同じプロパティを持ち、call policies のみ <parameter>policies</parameter> への参照である新しい <nonterminal def="" linkend="v2.init.init-expressions">init-expression</nonterminal> を返す。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.init.optional-spec">
      <title><classname>optional&lt;T1 = <replaceable>unspecified</replaceable>, T2 = <replaceable>unspecified</replaceable>, ...Tn = <replaceable>unspecified</replaceable>&gt;</classname> クラステンプレート</title>
      <para>
	<methodname>__init__</methodname> 関数の省略可能引数を指定するのに使用する <link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/forward-sequence.html">MPL 列</link>。
      </para>

      <section xml:id="v2.init.optional-spec-synopsis">
	<title><classname>optioanal</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;T1 = <replaceable>unspecified</replaceable>,...T<replaceable>n</replaceable> = <replaceable>unspecified</replaceable>&gt;
  struct optional {};
}}</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.init.examples">
    <title>例</title>
    <para>
      次の C++ 宣言があるとすると、
    </para>
    <programlisting language="C++"><![CDATA[class Y;
class X
{
 public:
   X(int x, Y* y) : m_y(y) {}
   X(double);
 private:
   Y* m_y;
};]]></programlisting>
      <para>
	以下のように対応する Boost.Python 拡張クラスを作成できる。
      </para>
      <programlisting language="C++"><![CDATA[using namespace boost::python;

class_<X>("X", "X のドキュメンテーション文字列。",
          init<int,char const*>(args("x","y"), "X.__init__ のドキュメンテーション文字列")[
                with_custodian_and_ward<1,3>()]
          )
   .def(init<double>())
   ;]]></programlisting>
  </section>
</section>
