<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.errors">
  <title>boost/python/errors.hpp</title>

  <section xml:id="v2.errors.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/errors.hpp&gt;</filename> は、Python と C++ の間で例外を管理、変換するための型と関数を提供する。これは Boost.Python でほぼ内部的にのみ使用している、比較的低水準な機能である。ユーザにはほぼ必要ない。
    </para>
  </section>

  <section xml:id="v2.errors.classes">
    <title>クラス</title>

    <section xml:id="v2.errors.error_already_set-spec">
      <title><classname>error_already_set</classname> クラス</title>
      <para>
	<classname>error_already_set</classname> は、Python のエラーが発生したことを示すのに投げられる例外型である。これが投げられた場合、その事前条件は <function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">PyErr_Occurred()</function> が <literal>true</literal> に変換可能な値を返すことである。移植可能なコードではこの例外型を直接投げるべきではなく、代わりに以下の <code language="C++"><methodname linkend="v2.errors.throw_error_already_set-spec">throw_error_already_set</methodname>()</code> を使用すべきである。
      </para>

      <section xml:id="v2.errors.error_already_set-spec-synopsis">
	<title><classname>error_already_set</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
    class error_already_set {};
}}</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.errors.functions">
    <title>関数</title>
    <orderedlist>
      <listitem xml:id="v2.errors.handle_exception-spec">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class T&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>bool <function>handle_exception</function></funcdef>
	    <paramdef>T <parameter>f</parameter></paramdef>
	  </funcprototype>
	  <funcsynopsisinfo>throw();</funcsynopsisinfo>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style='ansi'?>
	    <funcdef>void <function>handle_exception</function></funcdef>
	    <void/>
	  </funcprototype>
	  <funcsynopsisinfo>throw()</funcsynopsisinfo>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		第 1 の形式では、式 <code language="C++"><classname xlink:href="http://www.boost.org/doc/html/boost/functionN.html">function0</classname>&lt;void&gt;(f)</code> が合法でなければならない。第 2 の形式では、C++ 例外が現在処理中（C++ 標準の 15.1 節を見よ）でなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		第 1 の形式では、<code language="C++">try</code> ブロック内で <code language="C++">f()</code> を呼び出す。最初にすべての登録済みの<link linkend="v2.exception_translator">例外変換器</link>を試す。それらの中で例外を変換できるものがなければ、<code language="C++">catch</code> 節で捕捉した C++ 例外に対する適切な Python 例外を設定し、例外が投げられた場合は <literal>true</literal> を、そうでなければ <literal>false</literal> を返す。第 2 の形式は、現在処理中の例外を再スローする関数を第 1 形式に渡す。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>事後条件：</term>
	    <listitem>
	      <para>
		処理中の例外が 1 つもない
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		なし
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>根拠：</term>
	    <listitem>
	      <para>
		言語間の境界においては、C++ 例外を見逃さないようにすることが重要である。大抵の場合、呼び出し側の言語はスタックを正しい方法で巻き戻す機能を持っていないからである。C++ コードを Python API から直接呼び出すときは、例外変換の管理に常に <function>handle_exception</function> を使用せよ。大体の関数ラッピング機能（<function linkend="v2.make_function.make_function-spec">make_function()</function> 、<function linkend="v2.make_function.make_constructor-spec">make_constructor()</function> 、<function linkend="v2.def.class_-spec-modifiers">def()</function> および <methodname linkend="v2.class.def-spec">class_::def()</methodname>）は自動的にこれを行う。第 2 形式はより便利（以下の<link linkend="v2.errors.examples">例</link>を見よ）だが、内側の <code language="C++">try</code> ブロックから例外を再スローした場合に問題を起こすコンパイラが多数ある。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="v2.errors.expect_non_null-spec">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class T&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>T* <function>expect_non_null</function></funcdef>
	    <paramdef>T* <parameter>x</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<parameter>x</parameter>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		<code language="C++">x == 0</code> の場合、<code language="C++"><classname linkend="v2.errors.error_already_set-spec">error_already_set</classname>()</code>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>根拠：</term>
	    <listitem>
	      <para>
		エラー発生時に 0 を返す <link xlink:href="http://docs.python.jp/2/c-api/index.html">Python/C API</link> 関数を呼び出すときのエラー処理を容易にする。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="v2.errors.throw_error_already_set-spec">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>void <function>throw_error_already_set</function></funcdef>
	    <void/>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">throw <classname linkend="v2.errors.error_already_set-spec">error_already_set</classname>();</code>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>根拠：</term>
	    <listitem>
	      <para>
		多くのプラットフォームおよびコンパイラでは、共有ライブラリの境界をまたいで投げられた例外を捕捉する首尾一貫した方法がない。Boost.Python ライブラリのこの関数を使用することで、<function linkend="v2.errors.handle_exception-spec">handle_exception()</function> 内で適切な <code language="C++">catch</code> ブロックが例外を捕捉できる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.errors.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <string>
#include <boost/python/errors.hpp>
#include <boost/python/object.hpp>
#include <boost/python/handle.hpp>

// obj の "__name__" 属性と同じ値を持つ std::string を返す。
std::string get_name(boost::python::object obj)
{
   // __name__ 属性がなければ例外を投げる
   PyObject* p = boost::python::expect_non_null(
      PyObject_GetAttrString(obj.ptr(), "__name__"));

   char const* s = PyString_AsString(p);
   if (s != 0) 
        Py_DECREF(p);

   // Python の文字列でなければ例外を投げる
   std::string result(
      boost::python::expect_non_null(
         PyString_AsString(p)));

   Py_DECREF(p); // p の後始末
   
   return result;
}

//
// handle_exception の第 1 形式のデモンストレーション
//

// a と b が同じ "__name__" 属性を持つ場合は 1 、それ以外は 0 の Python Int オブジェクトを
// result に書き込む。
void same_name_impl(PyObject*& result, boost::python::object a, boost::python::object b)
{
   result = PyInt_FromLong(
      get_name(a) == get_name(a2));
}

object borrowed_object(PyObject* p)
{
   return boost::python::object(
        boost::python::handle<>(
             boost::python::borrowed(a1)));
}

// Python 'C' API インターフェイス関数の例
extern "C" PyObject*
same_name(PyObject* args, PyObject* keywords)
{
   PyObject* a1;
   PyObject* a2;
   PyObject* result = 0;

   if (!PyArg_ParseTuple(args, const_cast<char*>("OO"), &a1, &a2))
      return 0;
   
   // boost::bind を使用してオブジェクトを boost::Function0<void> 互換にする
   if (boost::python::handle_exception(
         boost::bind<void>(same_name_impl, boost::ref(result), borrowed_object(a1),
borrowed_object(a2))))
   {
      // 例外が投げられた（Python のエラーが handle_exception() により設定された）
      return 0;
   }

   return result;
}

//
// handle_exception の第 2 形式のデモンストレーション。すべてのコンパイラで
// サポートされているわけではない。
//
extern "C" PyObject*
same_name2(PyObject* args, PyObject* keywords)
{
   PyObject* a1;
   PyObject* a2;
   PyObject* result = 0;

   if (!PyArg_ParseTuple(args, const_cast<char*>("OO"), &a1, &a2))
      return 0;

   try {
      return PyInt_FromLong(
         get_name(borrowed_object(a1)) == get_name(borrowed_object(a2)));
   }
   catch(...)
   {
      // 例外が投げられたら、Python へ変換する
      boost::python::handle_exception();
      return 0;
   }
}]]></programlisting>
  </section>
</section>
