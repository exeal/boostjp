<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.overloads">
  <title>boost/python/overloads.hpp</title>

  <section xml:id="v2.overloads.introduction">
    <title>はじめに</title>
    <para>
      C++ の関数、メンバ関数および多重定義群から既定の引数とともに Python の関数および拡張クラスのメソッドの多重定義群を生成する機能を定義する。
    </para>
  </section>

  <section xml:id="v2.overloads.overload-dispatch-expression">
    <title><nonterminal def="">overload-dispatch-expression</nonterminal></title>
    <para>
      <nonterminal def="">overload-dispatch-expression</nonterminal> は、拡張クラスのために生成するメソッドの多重定義群を記述するのに使用する。以下のプロパティを持つ。
    </para>
    <variablelist spacing="compact">
      <varlistentry>
	<term>docstring：</term>
	<listitem>
	  <para>
	    メソッドの <property>__doc__</property> 属性に束縛される値を持つ <glossterm baseform="ntbs">ntbs</glossterm>
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>keywords：</term>
	<listitem>
	  <para>
	    生成するメソッドの引数（の最後列）に名前を付ける <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal>。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>call policies：</term>
	<listitem>
	  <para>
	    <link linkend="v2.CallPolicies">CallPolicies</link> モデルの何らかの型。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>minimum <glossterm baseform="arity">arity</glossterm>：</term>
	<listitem>
	  <para>
	    生成するメソッド多重定義が受け付ける引数の最小数。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>maximum <glossterm baseform="arity">arity</glossterm>：</term>
	<listitem>
	  <para>
	    生成するメソッド多重定義が受け付ける引数の最大数。
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section xml:id="v2.overloads.OverloadDispatcher-concept">
    <title>OverloadDispatcher コンセプト</title>
    <para>
      OverloadDispatcher の <classname>X</classname> とは、minimum arity と maximum arity を持つクラスであり、以下がそれぞれ OverloadDispatcher と同じ最大・最小引数長を持つ合法な <nonterminal def="" linkend="v2.overloads.overload-dispatch-expression">overload-dispatch-expression</nonterminal> である。
    </para>
    <programlisting language="C++">X()
X(docstring)
X(docstring, keywords)
X(keywords, docstring)
X()[policies]
X(docstring)[policies]
X(docstring, keywords)[policies]
X(keywords, docstring)[policies]</programlisting>
    <itemizedlist>
      <listitem>
	<para>
	  <parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies.CallPolicies-concept">CallPolicies</link> モデルの型でなければならず、結果の呼び出しポリシーとなる。それ以外の場合、結果の呼び出しポリシーは <classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname> のインスタンスである。
	</para>
      </listitem>
      <listitem>
	<para>
	  <parameter>docstring</parameter> が与えられた場合、<glossterm baseform="ntbs">ntbs</glossterm> でなければならず、結果のドキュメンテーション文字列となる。それ以外の場合、結果のドキュメンテーション文字列は空である。
	</para>
      </listitem>
      <listitem>
	<para>
	  keywords が与えられた場合、長さが <classname>X</classname> の最大引数長以下である <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> の結果でなければならず、結果のキーワード引数列となる。それ以外の場合、結果のキーワード引数列は空である。
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="v2.overloads.macros">
    <title>マクロ</title>

    <section xml:id="v2.overloads.BOOST_PYTHON_FUNCTION_OVERLOADS-spec">
      <title>BOOST_PYTHON_FUNCTION_OVERLOADS(name, func_id, min_args, max_args)</title>
      <para>
	現在のスコープで名前 <parameter>name</parameter> の OverloadDispatcher の定義へ展開する。これは以下の関数呼び出し生成に使用できる（<code language="C++">min_args &lt;= <replaceable>i</replaceable> &lt;= max_args</code>）。
      </para>
      <programlisting language="C++">func_id(a1, a2,...a<replaceable>i</replaceable>);</programlisting>
    </section>

    <section xml:id="v2.overloads.BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS-spec">
      <title>BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(name, member_name, min_args, max_args)</title>
      <para>
	現在のスコープで名前 <parameter>name</parameter> の OverloadDispatcher の定義へ展開する。これは以下の関数呼び出し生成に使用できる（<code language="C++">min_args &lt;= <replaceable>i</replaceable> &lt;= max_args</code>、<varname>x</varname> はクラス型オブジェクトへの参照）。
      </para>
      <programlisting language="C++">x.member_name(a1, a2,...a<replaceable>i</replaceable>);</programlisting>
    </section>
  </section>

  <section xml:id="v2.overloads.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/def.hpp>
#include <boost/python/args.hpp>
#include <boost/python/tuple.hpp>
#include <boost/python/class.hpp>
#include <boost/python/overloads.hpp>
#include <boost/python/return_internal_reference.hpp>

using namespace boost::python;

tuple f(int x = 1, double y = 4.25, char const* z = "wow")
{
    return make_tuple(x, y, z);
}

BOOST_PYTHON_FUNCTION_OVERLOADS(f_overloads, f, 0, 3)

struct Y {};
struct X
{
    Y& f(int x, double y = 4.25, char const* z = "wow")
    {
        return inner;
    }
    Y inner;
};

BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS(f_member_overloads, f, 1, 3)

BOOST_PYTHON_MODULE(args_ext)
{
    def("f", f, 
        f_overloads(
            args("x", "y", "z"), "これは f のドキュメンテーション文字列"
        ));

    
    class_<Y>("Y")
        ;
            
    class_<X>("X", "これは X のドキュメンテーション文字列")
        .def("f1", &X::f, 
                f_member_overloads(
                    args("x", "y", "z"), "f のドキュメンテーション文字列"
                )[return_internal_reference<>()]
        )
        ;
}]]></programlisting>
  </section>
</section>
