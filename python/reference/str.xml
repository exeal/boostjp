<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.str">
  <title>boost/python/str.hpp</title>

  <section xml:id="v2.str.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/c-api/string.html">str</classname> 型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.str.classes">
    <title>クラス</title>

    <section xml:id="v2.str.str-spec">
      <title><classname>str</classname> クラス</title>
      <para>
	Python の組み込み <classname>str</classname> 型の<link xlink:href="http://docs.python.jp/2/c-api/string.html">文字列メソッド</link>をエクスポートする。文字の範囲から <classname>str</classname> オブジェクトを構築する2引数コンストラクタ以外の以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>str</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>str</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.str.str-spec-synopsis">
	<title><classname>str</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  class str : public object
  {
   public:
      str(); // str を新規作成する

      str(char const* s); // str を新規作成する

      str(char const* start, char const* finish); // str を新規作成する
      str(char const* start, std::size_t length); // str を新規作成する

      template <class T>
      explicit str(T const& other);

      str capitalize() const;

      template <class T>
      str center(T const& width) const;

      template<class T>
      long count(T const& sub) const;
      template<class T1, class T2>
      long count(T1 const& sub,T2 const& start) const;
      template<class T1, class T2, class T3>
      long count(T1 const& sub,T2 const& start, T3 const& end) const;

      object decode() const;
      template<class T>
      object decode(T const& encoding) const;
      template<class T1, class T2>
      object decode(T1 const& encoding, T2 const& errors) const;

      object encode() const;
      template <class T>
      object encode(T const& encoding) const;
      template <class T1, class T2>
      object encode(T1 const& encoding, T2 const& errors) const;

      template <class T>
      bool endswith(T const& suffix) const;
      template <class T1, class T2>
      bool endswith(T1 const& suffix, T2 const& start) const;
      template <class T1, class T2, class T3>
      bool endswith(T1 const& suffix, T2 const& start, T3 const& end) const;

      str expandtabs() const;
      template <class T>
      str expandtabs(T const& tabsize) const;

      template <class T>
      long find(T const& sub) const;
      template <class T1, class T2>
      long find(T1 const& sub, T2 const& start) const;
      template <class T1, class T2, class T3>
      long find(T1 const& sub, T2 const& start, T3 const& end) const;

      template <class T>
      long index(T const& sub) const;
      template <class T1, class T2>
      long index(T1 const& sub, T2 const& start) const;
      template <class T1, class T2, class T3>
      long index(T1 const& sub, T2 const& start, T3 const& end) const;

      bool isalnum() const;
      bool isalpha() const;
      bool isdigit() const;
      bool islower() const;
      bool isspace() const;
      bool istitle() const;
      bool isupper() const;

      template <class T>
      str join(T const& sequence) const;

      template <class T>
      str ljust(T const& width) const;

      str lower() const;
      str lstrip() const;

      template <class T1, class T2>
      str replace(T1 const& old, T2 const& new_) const;
      template <class T1, class T2, class T3>
      str replace(T1 const& old, T2 const& new_, T3 const& maxsplit) const;

      template <class T>
      long rfind(T const& sub) const;
      template <class T1, class T2>
      long rfind(T1 const& sub, T2 const& start) const;
      template <class T1, class T2, class T3>
      long rfind(T1 const& sub, T2 const& start, T3 const& end) const;

      template <class T>
      long rindex(T const& sub) const;
      template <class T1, class T2>
      long rindex(T1 const& sub, T2 const& start) const;
      template <class T1, class T2, class T3>
      long rindex(T1 const& sub, T2 const& start, T3 const& end) const;

      template <class T>
      str rjust(T const& width) const;

      str rstrip() const;

      list split() const; 
      template <class T>
      list split(T const& sep) const;
      template <class T1, class T2>
      list split(T1 const& sep, T2 const& maxsplit) const;

      list splitlines() const;
      template <class T>
      list splitlines(T const& keepends) const;

      template <class T>
      bool startswith(T const& prefix) const;
      template <class T1, class T2>
      bool startswidth(T1 const& prefix, T2 const& start) const;
      template <class T1, class T2, class T3>
      bool startswidth(T1 const& prefix, T2 const& start, T3 const& end) const;

      str strip() const;
      str swapcase() const;
      str title() const;

      template <class T>
      str translate(T const& table) const;
      template <class T1, class T2>
      str translate(T1 const& table, T2 const& deletechars) const;

      str upper() const;
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.str.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[using namespace boost::python;
str remove_angle_brackets(str x)
{
  return x.strip('<').strip('>');
}]]></programlisting>
  </section>
</section>
