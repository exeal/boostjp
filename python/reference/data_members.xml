<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.data_members">
  <title>boost/python/data_members.hpp</title>

  <section xml:id="v2.data_members.introduction">
    <title>はじめに</title>
    <para>
      <function linkend="v2.data_members.make_getter-spec">make_getter()</function> および <function linkend="v2.data_members.make_setter-spec">make_setter()</function> は、<methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def_readonly</methodname> および <methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def_readwrite</methodname> が C++ データメンバをラップする Python の呼び出し可能オブジェクトを生成するために内部的に使用する関数である。
    </para>
  </section>

  <section xml:id="v2.data_members.functions">
    <title>関数</title>

    <section xml:id="v2.data_members.make_getter-spec">
      <title>make_getter</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class C, class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D C::*<parameter>pm</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class C, class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D C::*<parameter>pm</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>Policies</parameter> は <link linkend="v2.CallPolicies">CallPolicies</link> のモデル。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <type>C*</type> へ <wordasword>from_python</wordasword> 変換可能な引数 1 つをとり、<type>C</type> オブジェクトの対応メンバ <type>D</type> を <wordasword>to_python</wordasword> 変換したものを返す Python の呼び出し可能オブジェクトを作成する。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">ここ</link>に述べるとおり関数に適用される。それ以外の場合、ライブラリは <type>D</type> がユーザ定義クラス型か判断し、そうであれば <type>Policies</type> に対して <classname>return_internal_reference&lt;&gt;</classname> を使用する。<type>D</type> がスマートポインタ型の場合、このテストで <classname>return_internal_reference&lt;&gt;</classname> が不適当に選択される可能性があることに注意していただきたい。これは既知の欠陥である。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D const&amp; <parameter>d</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D const&amp; <parameter>d</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D const* <parameter>p</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_getter</function></funcdef>
	      <paramdef>D const* <parameter>p</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>Policies</parameter> は <link linkend="v2.CallPolicies">CallPolicies</link> のモデル。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  引数をとらず、必要に応じて <wordasword>to_python</wordasword> 変換した <parameter>d</parameter> か <code language="C++">*p</code> を返す Python の呼び出し可能オブジェクトを作成する。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">ここ</link>に述べるとおり関数に適用される。それ以外の場合、ライブラリは <type>D</type> がユーザ定義クラス型か判断し、そうであれば <type>Policies</type> に対して <classname linkend="v2.reference_existing_object.reference_existing_object-spec">reference_existing_object</classname> を使用する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>

    <section xml:id="v2.data_members.make_setter-spec">
      <title>make_setter</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class C, class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D C::*<parameter>pm</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class C, class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D C::*<parameter>pm</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>Policies</parameter> は <link linkend="v2.CallPolicies">CallPolicies</link> のモデル。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  Python の呼び出し可能オブジェクトを作成する。このオブジェクトは Python から呼び出されるときに <type>C*</type> と <type>D const&amp;</type> にそれぞれ <wordasword>from_python</wordasword> 変換可能な 2 つの引数をとり、<type>C</type> オブジェクトの対応する <type>D</type> メンバを設定する。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">ここ</link>に述べるとおり関数に適用される。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>

	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D&amp; <parameter>d</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D&amp; <parameter>d</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D* <parameter>p</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class D, class Policies&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_setter</function></funcdef>
	      <paramdef>D* <parameter>p</parameter></paramdef>
	      <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	    </funcprototype>
	  </funcsynopsis>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  <parameter>Policies</parameter> は <link linkend="v2.CallPolicies">CallPolicies</link> のモデル。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  Python から <type>D const&amp;</type> に変換され、<parameter>d</parameter> または <code language="C++">*p</code> に書き込まれる 1 つの引数を受け取る Python の呼び出し可能オブジェクトを作成する。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">ここ</link>に述べるとおり関数に適用される。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>戻り値：</term>
	      <listitem>
		<para>
		  新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="v2.data_members.examples">
    <title>例</title>
    <para>
      以下のコードは、<function>make_getter</function> および <function>make_setter</function> を使用してデータメンバを関数としてエクスポートする。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/python/data_members.hpp>
#include <boost/python/module.hpp>
#include <boost/python/class.hpp>

struct X
{
    X(int x) : y(x) {}
    int y;
};

using namespace boost::python;

BOOST_PYTHON_MODULE_INIT(data_members_example)
{
    class_<X>("X", init<int>())
       .def("get", make_getter(&X::y))
       .def("set", make_setter(&X::y))
       ;
}]]></programlisting>
    <para>
      Python から次のように使用する。
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from data_members_example import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x = X(1)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x.get()</userinput>
<computeroutput>1</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x.set(2)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x.get()</userinput>
<computeroutput>2</computeroutput></screen>
  </section>
</section>
