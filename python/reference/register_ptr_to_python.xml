<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.register_ptr_to_python">
  <title>boost/python/register_ptr_to_python.hpp</title>

  <section xml:id="v2.register_ptr_to_python.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/register_ptr_to_python.hpp&gt;</filename> は、スマートポインタから Python への変換を登録する関数テンプレート <classname>register_ptr_to_python</classname> を提供する。結果の Python オブジェクトは変換したスマートポインタのコピーを保持するが、参照先のラップ済みコピーであるかのように振舞う。参照先の型が仮想関数を持ちそのクラスが動的（最派生）型を表現する場合、Python のオブジェクトは最派生型に対するラッパのインスタンスとなる。1 つの参照先クラスに対して 2 つ以上のスマートポインタ型を登録可能である。
    </para>
    <para>
      Python の <type>X</type> オブジェクトを <type>smart_ptr&lt;X&gt;&amp;</type>（非 const 参照）へ変換するため、組み込む C++ オブジェクトは <type>smart_ptr&lt;X&gt;</type> が保持しなければならない。またラップしたオブジェクトを Python からコンストラクタを呼び出して作成するとき、どのように保持するかは <classname>class_&lt;...&gt;</classname> インスタンスの <type>HeldType</type> 引数で決められることに注意していただきたい。
    </para>
  </section>

  <section xml:id="v2.register_ptr_to_python.functions">
    <title>関数</title>
    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class P&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>void <function>register_ptr_to_python</function></funcdef>
	    <void/>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		<type>P</type> が <link linkend="v2.Dereferenceable.Dereferenceable-concept">Dereferenceable</link>。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<type>P</type> のインスタンスの Python への変換を可能にする。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.register_ptr_to_python.examples">
    <title>例</title>

    <section>
      <title>C++ のラッパコード</title>
      <para>
	以下の例は仮想関数を持つクラス <classname>A</classname> と、<type>boost::shared_ptr&lt;A&gt;</type> を扱う関数を持つモジュールである。
      </para>
      <programlisting language="C++"><![CDATA[struct A
{
    virtual int f() { return 0; }
};

shared_ptr<A> New() { return shared_ptr<A>( new A() ); }

int Ok( const shared_ptr<A>& a ) { return a->f(); }

int Fail( shared_ptr<A>& a ) { return a->f(); }

struct A_Wrapper: A
{
    A_Wrapper(PyObject* self_): self(self_) {}
    int f() { return call_method<int>(self, "f"); }    
    int default_f() { return A::f(); }    
    PyObject* self;
};

BOOST_PYTHON_MODULE(register_ptr)
{
    class_<A, A_Wrapper>("A")
        .def("f", &A::f, &A_Wrapper::default_f)
    ;
    
    def("New", &New);
    def("Ok", &Call);
    def("Fail", &Fail);
    
    register_ptr_to_python< shared_ptr<A> >();
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from register_ptr import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>a = A()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>Ok(a)     # OK 、shared_ptr&lt;A&gt; として渡した</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>Fail(a)   # shared_ptr&lt;A&gt;&amp; として渡してしまった（Python 内で作成したのだった！）</userinput>
<computeroutput>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
TypeError: bad argument type for built-in operation</computeroutput>
<prompt>&gt;&gt;&gt; </prompt>
<prompt>&gt;&gt;&gt; </prompt><userinput>na = New()   # ここで "na" は実際は shared_ptr&lt;A&gt;</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>Ok(a)</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>Fail(a)</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt></screen>
      <para>
	<type>shared_ptr&lt;A&gt;</type> を以下のように登録したとすると、
      </para>
      <screen language="Python">    class_&lt;A, A_Wrapper, shared_ptr&lt;A&gt; &gt;("A")
        .def("f", &amp;A::f, &amp;A_Wrapper::default_f)
    ;</screen>
      <para>
	<type>shared_ptr&lt;A&gt;</type> を <type>shared_ptr&lt;A_Wrapper&gt;</type> に変換しようとするとエラーになる。
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>a = New()</userinput>
<computeroutput>Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in ?
TypeError: No to_python (by-value) converter found for C++ type: class boost::shared_ptr&lt;struct A&gt;</computeroutput>
<prompt>&gt;&gt;&gt; </prompt></screen>
    </section>
  </section>
</section>
