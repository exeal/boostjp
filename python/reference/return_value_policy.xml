<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.return_value_policy">
  <title>boost/python/return_value_policy.hpp</title>

  <section xml:id="v2.return_value_policy.introduction">
    <title>はじめに</title>
    <para>
      <classname>return_value_policy</classname> のインスタンスは、単純に <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> と省略可能な <type>Base</type> <link linkend="v2.CallPolicies">CallPolicies</link> を合成した <link linkend="v2.CallPolicies">CallPolicies</link> モデルである。
    </para>
  </section>

  <section xml:id="v2.return_value_policy.classes">
    <title>クラス</title>

    <section xml:id="v2.return_value_policy.return_value_policy-spec">
      <title><classname>return_value_policy</classname> クラステンプレート</title>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>ResultConverterGenerator</type></td>
	    <td><link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデル</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><type>Base</type></td>
	    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
	    <td><classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname></td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.return_value_policy.return_value_policy-spec-synopsis">
	<title><classname>return_value_policy</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class ResultConverterGenerator, class Base = default_call_policies>
  struct return_value_policy : Base
  {
      typedef ResultConverterGenerator result_converter;
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.return_value_policy.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/copy_const_reference.hpp>
#include <boost/python/return_value_policy.hpp>

// ラップするクラス群
struct Bar { int x; }

struct Foo {
   Foo(int x) : { b.x = x; }
   Bar const& get_bar() const { return b; }
 private:
   Bar b;
};

// ラッパコード
using namespace boost::python;
BOOST_PYTHON_MODULE(my_module)
{
   class_<Bar>("Bar");

   class_<Foo>("Foo", init<int>())
      .def("get_bar", &Foo::get_bar
          , return_value_policy<copy_const_reference>())
      ;
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from my_module import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f = Foo(3)         # Foo オブジェクトを作成</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = f.get_bar()    # 内部的な Bar オブジェクトのコピーを作成</userinput></screen>
    </section>
  </section>
</section>
