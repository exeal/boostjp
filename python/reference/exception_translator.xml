<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.exception_translator">
  <title>boost/python/exception_translator.hpp</title>

  <section xml:id="v2.exception_translator.introduction">
    <title>はじめに</title>
    <para>
      <link linkend="v2.errors.handle_exception-spec">他節</link>で述べたように、C++ コードが投げた例外が Python のインタープリタコアに渡らないようにすることが重要である。既定では、Boost.Python はラップした関数およびモジュール初期化関数が投げたすべての例外を Python へ変換するが、既定の変換器はきわめて限定的なものである（大半の C++ 例外は、Python においては <code language="Python">'Unidentifiable C++ Exception'</code> という表現を持つ <exceptionname xlink:href="http://www.python.org/doc/current/lib/module-exceptions.html">RuntimeError</exceptionname> 例外である）。以下に述べる例外変換器の登録を行うと、より優れたエラーメッセージを生成できる。
    </para>
  </section>

  <section xml:id="v2.exception_translator.functions">
    <title>関数</title>

    <section xml:id="v2.exception_translator.register_exception_translator-spec">
      <title><function>register_exception_translator</function></title>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template&lt;class ExceptionType, class Translate&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>void <function>register_exception_translator</function></funcdef>
	  <paramdef>Translate <parameter>translate</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      <type>Translate</type> は <link xlink:href="http://www.boost.org/libs/utility/CopyConstructible.html">CopyConstructible</link> 、かつ以下のコードが合法。
	    </para>
	    <programlisting language="C++">void f(ExceptionType x) { translate(x); }</programlisting>
	    <para>
	      式 <code language="C++">translate(x)</code> は C++ 例外を投げるか、後続の <function xlink:href="http://docs.python.jp/2/c-api/exceptions.html">PyErr_Occurred()</function> 呼び出しが 1 を返さなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>効果：</term>
	  <listitem>
	    <para>
	      <parameter>translate</parameter> のコピーを例外変換器の列に追加する。この列は Python のコアインタープリタへ渡そうとしている例外を Boost.Python が捕捉したときに試行するものである。新しい変換器は、上で見た <code language="C++">catch</code> 節群にマッチするすべての例外を変換するときに最初に呼び出される。後で登録した例外変換器は、より前の例外を変換してもよい。与えられた C++ 例外を変換できない変換器は再スローしてもよく、そのような例外はより前に登録した変換器（または既定の変換器）が処理する。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="v2.exception_translator.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/def.hpp>
#include <boost/python/exception_translator.hpp>
#include <exception>

struct my_exception : std::exception
{
  char const* what() throw() { return "どれかの例外"; }
};

void translate(my_exception const& e)
{
    // Python 'C' API を使用して例外オブジェクトをセットアップする
    PyErr_SetString(PyExc_RuntimeError, e.what());
}

void something_which_throws()
{
    ...
    throw my_exception();
    ...
}

BOOST_PYTHON_MODULE(exception_translator_ext)
{
  using namespace boost::python;
  register_exception_translator<my_exception>(&translate);
  
  def("something_which_throws", something_which_throws);
}]]></programlisting>
  </section>
</section>
