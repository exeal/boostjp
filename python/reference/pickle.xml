<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.pickle">
  <title>Boost.Python における pickle のサポート</title>
  <para>
    pickle はオブジェクトの直列化（または永続化、整列化、平坦化）のための Python モジュールである。
  </para>
  <para>
    オブジェクトの内容をファイルに保存、またはファイルから復元する必要があることはよくある。解法の 1 つは、特殊な形式でファイルへデータを読み書きする関数の組を書くことである。他の強力な解法は Python の pickle モジュールを使うことである。Python の自己記述機能を利用すると、pickle モジュールはほとんど任意の Python オブジェクトを再帰的にファイルに書き込み可能なバイトストリームへ変換する。
    <!-- 自己記述 = "introspection" -->
  </para>
  <para>
    Boost.Python ライブラリは、<link xlink:href="http://docs.python.jp/2/library/pickle.html">Python ライブラリリファレンスの pickle の項</link>に詳細記載のインターフェイスを通じて pickle モジュールをサポートする。このインターフェイスは以下に述べる特殊メソッド <methodname>__getinitargs__</methodname> 、<methodname>__getstate__</methodname> および <methodname>__setstate__</methodname> を必要とする。Boost.Python は Python の cPickle モジュールとも完全に互換であることに注意していただきたい。
  </para>

  <section>
    <title>Boost.Python の pickle インターフェイス</title>
    <para>
      ユーザレベルでは、Boost.Python の pickle インターフェイスは 3 つの特殊メソッドを伴う。
    </para>
    <variablelist>
      <varlistentry>
	<term><methodname>__getinitargs__</methodname></term>
	<listitem>
	  <para>
	    Boost.Python 拡張クラスのインスタンスを pickle 化するとき、pickler はインスタンスが <methodname>__getinitargs__</methodname> メソッドを持っているかテストする。このメソッドは Python のタプルを返さなければならない（<classname>boost::python::tuple</classname> を使うのが最も便利である）。インスタンスを unpickler が復元するとき、このタプルの内容をクラスのコンストラクタの引数として使用する。
	  </para>
	  <para>
	    <methodname>__getinitargs__</methodname> が定義されていない場合、<methodname>pickle.load</methodname> は引数無しでコンストラクタ（<methodname>__init__</methodname> ）を呼び出す。すなわちオブジェクトはデフォルトコンストラクト可能でなければならない。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><methodname>__getstate__</methodname></term>
	<listitem>
	  <para>
	    Boost.Python 拡張クラスのインスタンスを pickle 化するとき、pickler はインスタンスが <methodname>__getstate__</methodname> メソッドを持っているかテストする。このメソッドはインスタンスの状態を表す Python オブジェクトを返さなければならない。
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><methodname>__setstate__</methodname></term>
	<listitem>
	  <para>
	    Boost.Python 拡張クラスのインスタンスを unpickler により復元（<methodname>pickle.load</methodname>）するとき、はじめに <methodname>__getinitargs__</methodname> の結果を引数として構築する（上述）。次に unpickler は新しいインスタンスが <methodname>__setstate__</methodname> メソッドを持っているかテストする。テストが成功した場合、<methodname>__getstate__</methodname> の結果（Python オブジェクト）を引数としてこのメソッドを呼び出す。
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      上記 3 つの特殊メソッドは、ユーザが個別に <methodname>.def()</methodname> してもよい。しかしながら Boost.Python は簡単に使用できる高水準インターフェイスを <emphasis><classname>boost::python::pickle_suite</classname></emphasis> クラスで提供している。このクラスは、<methodname>__getstate__</methodname> および <methodname>__setstate__</methodname> を組として定義しなければならないという一貫性も強制する。このインターフェイスの使用方法は以下の例で説明する。
    </para>
  </section>

  <section>
    <title>例</title>
    <para>
      <filename class="directory">boost/libs/python/test</filename> に、pickle サポートを提供する方法を示したファイルが 3 つある。
    </para>

    <section>
      <title><filename xlink:href="http://www.boost.org/libs/python/test/pickle1.cpp">pickle1.cpp</filename></title>
      <para>
	この例の C++ クラスは、コンストラクタに適切な引数を渡すことで完全に復元できる。よって pickle インターフェイスのメソッド <methodname>__getinitargs__</methodname> を定義するのに十分である。以下のようにする。
      </para>
      <orderedlist>
	<listitem>
	  <para>C++ の pickle 関数の定義：</para>
	  <programlisting language="C++"><![CDATA[struct world_pickle_suite : boost::python::pickle_suite
{
  static
  boost::python::tuple
  getinitargs(world const& w)
  {
      return boost::python::make_tuple(w.get_country());
  }
};]]></programlisting>
	</listitem>
	<listitem>
	  <para>
	    Python の束縛を確立する。
	  </para>
	  <programlisting language="C++"><![CDATA[class_<world>("world", args<const std::string&>())
    // ...
    .def_pickle(world_pickle_suite())
    // ...]]></programlisting>
	</listitem>
      </orderedlist>
    </section>

    <section>
      <title><filename xlink:href="http://www.boost.org/libs/python/test/pickle2.cpp">pickle2.cpp</filename></title>
      <para>
	この例の C++ クラスは、コンストラクタで復元不可能なメンバデータを持つ。よって pickle インターフェイスのメソッド組 <methodname>__getstate__</methodname> 、<methodname>__setstate__</methodname> を提供する必要がある。
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    C++ の pickle 関数の定義：
	  </para>
	  <programlisting language="C++"><![CDATA[struct world_pickle_suite : boost::python::pickle_suite
{
  static
  boost::python::tuple
  getinitargs(const world& w)
  {
    // ...
  }

  static
  boost::python::tuple
  getstate(const world& w)
  {
    // ...
  }

  static
  void
  setstate(world& w, boost::python::tuple state)
  {
    // ...
  }
};]]></programlisting>
	</listitem>
	<listitem>
	  <para>
	    suite 全体の Python の束縛を確立する。
	  </para>
	  <programlisting language="C++"><![CDATA[class_<world>("world", args<const std::string&>())
    // ...
    .def_pickle(world_pickle_suite())
    // ...]]></programlisting>
	</listitem>
      </orderedlist>
      <para>
	簡単のために、<methodname>__getstate__</methodname> の結果に <property>__dict__</property> は含まれない。これは通常は推奨しないが、オブジェクトの <property>__dict__</property> が常に空であると分かっている場合は有効な方法である。この想定が崩れるケースは以下に述べる安全柵で捕捉できる。
      </para>
    </section>

    <section>
      <title><filename xlink:href="http://www.boost.org/libs/python/test/pickle3.cpp">pickle3.cpp</filename></title>
      <para>
	この例は <filename xlink:href="http://www.boost.org/libs/python/test/pickle2.cpp">pickle2.cpp</filename> と似ているが、<methodname>__getstate__</methodname> の結果にオブジェクトの <property>__dict__</property> が含まれる。より多くのコードが必要になるが、オブジェクトの <property>__dict__</property> が空とは限らない場合は避けられない。
      </para>
    </section>
  </section>

  <section>
    <title>落とし穴と安全柵</title>
    <para>
      上述の pickle プロトコルには、Boost.Python 拡張モジュールのエンドユーザが気にかけない重大な落とし穴がある。
    </para>
    <para>
      <emphasis><methodname>__getstate__</methodname> が定義されており、インスタンスの <property>__dict__</property> が空でない。</emphasis>
    </para>
    <para>
      Boost.Python 拡張クラスの作成者は、以下の可能性を考慮せずに <methodname>__getstate__</methodname> を提供する可能性がある。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  クラスが Python 内で基底クラスとして使用される。おそらく派生クラスのインスタンスの <property>__dict__</property> は、インスタンスを正しく復元するために pickle 化する必要がある。
	</para>
      </listitem>
      <listitem>
	<para>
	  ユーザがインスタンスの <property>__dict__</property> に直接要素を追加する。この場合もインスタンスの <property>__dict__</property> は pickle 化が必要である。
	</para>
      </listitem>
    </itemizedlist>
    <para>
      この高度に不明確な問題をユーザに警告するために、安全柵が提供されている。<methodname>__getstate__</methodname> が定義されており、インスタンスの <property>__dict__</property> が空でない場合は、Boost.Python はクラスが属性 <property>__getstate_manages_dict__</property> を持っているかテストする。この属性が定義されていなければ例外を送出する。
    </para>
    <screen><computeroutput>RuntimeError: Incomplete pickle support (__getstate_manages_dict__ not set)</computeroutput></screen>
    <para>
      この問題を解決するには、まず <methodname>__getstate__</methodname> および <methodname>__setstate__</methodname> メソッドがインスタンスの <property>__dict__</property> を正しく管理するようにしなければならない。これは C++ あるいは Python レベルのいずれでも達成可能であることに注意していただきたい。最後に安全柵を故意にオーバーライドしなければならない。例えば C++ では以下のとおり（<filename xlink:href="http://www.boost.org/libs/python/test/pickle3.cpp">pickle3.cpp</filename> から抜粋）。
    </para>
    <programlisting language="C++">struct world_pickle_suite : boost::python::pickle_suite
{
  // ...

  static bool getstate_manages_dict() { return true; }
};</programlisting>
    <para>
      あるいは Python では次のとおり。
    </para>
    <programlisting language="Python">import your_bpl_module
class your_class(your_bpl_module.your_class):
  __getstate_manages_dict__ = 1
  def __getstate__(self):
    # ここにコードを書く
  def __setstate__(self, state):
    # ここにコードを書く</programlisting>
  </section>

  <section>
    <title>実践的なアドバイス</title>
    <orderedlist>
      <listitem>
	<para>
	  多くの拡張クラスを持つ Boost.Python 拡張モジュールでは、すべてのクラスについて pickle の完全なサポートを提供すると著しいオーバーヘッドとなる。通常、完全な pickle サポートの実装は最終的に pickle 化する拡張クラスに限定すべきである。
	</para>
      </listitem>
      <listitem>
	<para>
	  インスタンスが <methodname>__getinitargs__</methodname> による再構築も可能な場合は <methodname>__getstate__</methodname> は避けよ。これは上記の落とし穴を自動的に避けることになる。
	</para>
      </listitem>
      <listitem>
	<para>
	  <methodname>__getstate__</methodname> が必要な場合、返す Python オブジェクトにインスタンスの <property>__dict__</property> を含めよ。
	</para>
      </listitem>
    </orderedlist>
  </section>

  <section>
    <title>軽量な代替：Python 側での pickle サポートの実装</title>

    <section>
      <title><filename xlink:href="http://www.boost.org/libs/python/test/pickle4.cpp">pickle4.cpp</filename></title>
      <para>
	<filename>pickle4.cpp</filename> の例は、pickle サポートの実装に関する別のテクニックのデモンストレーションである。はじめに <methodname>class_::enable_pickling()</methodname> メンバ関数で pickle 化に必要な基本的な属性だけを Boost.Python に定義させる。
      </para>
      <programlisting language="C++"><![CDATA[class_<world>("world", args<const std::string&>())
    // ...
    .enable_pickling()
    // ...]]></programlisting>
      <para>
	これで Python のドキュメントにある標準的な Python の pickle インターフェイスが有効になる。<methodname>__getinitargs__</methodname> メソッドをラップするクラス定義に「注入」することで、すべてのインスタンスを pickle 化可能にする。
      </para>
      <programlisting language="C++"><![CDATA[# ラップした world クラスをインポート
from pickle4_ext import world

# __getinitargs__ の定義
def world_getinitargs(self):
  return (self.get_country(),)

# ここで __getinitargs__ を注入（Python は動的言語！）
world.__getinitargs__ = world_getinitargs]]></programlisting>
      <para>
	Python から追加のメソッドを注入する方法については、<link linkend="tutorial.techniques.python.extending_wrapped_objects_in_python">チュートリアルの節</link>も見よ。
      </para>
    </section>
  </section>
</section>
