<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.has_back_reference">
  <title>boost/python/has_back_reference.hpp</title>

  <section xml:id="v2.has_back_reference.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">boost/python/has_back_reference.hpp&gt;</filename> は、述語メタ関数 <classname>has_back_reference&lt;&gt;</classname> を定義する。ユーザはこれを特殊化して、ラップするクラスのインスタンスが Python オブジェクトに対応する <type>PyObject*</type> を保持することを指定できる。
    </para>
  </section>

  <section xml:id="v2.has_back_reference.classes">
    <title>クラス</title>

    <section xml:id="v2.has_back_reference.has_back_reference-spec">
      <title><classname>has_back_reference</classname> クラステンプレート</title>
      <para>
	引数が <classname>pointer_wrapper&lt;&gt;</classname> である場合に <property>value</property> が真である単項メタ関数である。
      </para>

      <section xml:id="v2.has_back_reference.has_back_reference-spec-synopsis">
	<title><classname>has_back_reference</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    template<class WrappedClass> class has_back_reference
    { 
        typedef mpl::false_ type;
    };
}}]]></programlisting>
	<para>
	  ラップするクラスをどうように構築するか決定するため、Boost.Pythonがアクセスする「<link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/metafunction.html">メタ関数</link>」。
	</para>
	<para>
	  <property>type::value</property> は未規定型の論理値へ変換可能な整数定数である。<code language="C++">class_&lt;WrappedClass&gt;::def(init&lt;<replaceable>type-sequence</replaceable>...&gt;())</code> および暗黙のラップされたコピーコンストラクタ（<link linkend="v2.class.class_-spec">noncopyable</link> でない限り）の各呼び出しについて、対応するコンストラクタ <code language="C++">WrappedClass::WrappedClass(PyObject*, <replaceable>type-sequence</replaceable>...)</code> が存在する場合、<constant>true</constant> の値を持つ <type>type</type> の整数定数が特殊化により置換される可能性がある。そのような特殊化が存在する場合、<type>WrappedClass</type> のコンストラクタが Python から呼び出されるときは常に対応する Python オブジェクトへの「逆参照」ポインタが使用される。<classname>mpl::true_</classname> から特殊化を導出するのが、この入れ子の <type>type</type> を提供する最も簡単な方法である。
	</para>
      </section>
    </section>
  </section>

  <section xml:id="v2.has_back_reference.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/class.hpp>
#include <boost/python/module.hpp>
#include <boost/python/has_back_reference.hpp>
#include <boost/python/handle.hpp>
#include <boost/shared_ptr.hpp>

using namespace boost::python;
using boost::shared_ptr;

struct X
{
    X(PyObject* self) : m_self(self), m_x(0) {}
    X(PyObject* self, int x) : m_self(self), m_x(x) {}
    X(PyObject* self, X const& other) : m_self(self), m_x(other.m_x) {}
    
    handle<> self() { return handle<>(borrowed(m_self)); }
    int get() { return m_x; }
    void set(int x) { m_x = x; }

    PyObject* m_self;
    int m_x;
};

// X について has_back_reference を特殊化
namespace boost { namespace python
{
  template <>
  struct has_back_reference<X>
    : mpl::true_
  {};
}}

struct Y
{
    Y() : m_x(0) {}
    Y(int x) : m_x(x) {}
    int get() { return m_x; }
    void set(int x) { m_x = x; }

    int m_x;
};

shared_ptr<Y> 
Y_self(shared_ptr<Y> self) { return self; }

BOOST_PYTHON_MODULE(back_references)
{
    class_<X>("X")
       .def(init<int>())
       .def("self", &X::self)
       .def("get", &X::get)
       .def("set", &X::set)
       ;

    class_<Y, shared_ptr<Y> >("Y")
       .def(init<int>())
       .def("get", &Y::get)
       .def("set", &Y::set)
       .def("self", Y_self)
       ;
}]]></programlisting>
      <para>
	以下の Python セッションでは、<code language="Python">x.self()</code> が何度呼び出しても毎回同じ Python オブジェクトを返すいっぽうで、<code language="Python">y.self()</code> は同じ <classname>Y</classname> インスタンスを参照する新しい Python オブジェクトを作成する。
      </para>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from back_references import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x = X(1)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x2 = x.self()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x2 is x</userinput>
<computeroutput>1</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>(x.get(), x2.get())</userinput>
<computeroutput>(1, 1)</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x.set(10)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>(x.get(), x2.get())</userinput>
<computeroutput>(10, 10)</computeroutput>
<prompt>&gt;&gt;&gt; </prompt>
<prompt>&gt;&gt;&gt; </prompt>
<prompt>&gt;&gt;&gt; </prompt><userinput>y = Y(2)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>y2 = y.self()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>y2 is y</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>(y.get(), y2.get())</userinput>
<computeroutput>(2, 2)</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>y.set(20)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>(y.get(), y2.get())</userinput>
<computeroutput>(20, 20)</computeroutput></screen>
    </section>
  </section>
</section>
