<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.call_method">
  <title>boost/python/call_method.hpp</title>

  <section xml:id="v2.call_method.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/call_method.hpp&gt;</filename> は、C++ から Python の呼び出し可能属性を起動する <function linkend="v2.call.call_method-spec">call_method</function> 関数テンプレート多重定義群を定義する。
    </para>
  </section>

  <section xml:id="v2.call_method.functions">
    <title>関数</title>

    <section xml:id="v2.call_method.call_method-spec">
      <title>call_method</title>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class R, class A1, class A2, ... class A<replaceable>n</replaceable>&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef>R <function>call_method</function></funcdef>
	  <paramdef>PyObject* <parameter>self</parameter></paramdef>
	  <paramdef>char const* <parameter>method</parameter></paramdef>
	  <paramdef>A1 const&amp;</paramdef>
	  <paramdef>A2 const&amp;</paramdef>
	  <paramdef>... A<replaceable>n</replaceable> const&amp;</paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      <type>R</type> はポインタ型、参照型、またはアクセス可能なコピーコンストラクタを持つ完全型。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>効果：</term>
	  <listitem>
	    <para>
	      Python 内で <code language="C++">self.method(a1, a2, ...a<replaceable>n</replaceable>)</code> を起動する。<code language="C++">a1...a<replaceable>n</replaceable></code> は <function>call_method()</function> に対する引数で Python のオブジェクトに変換する。完全なセマンティクスの説明については、<link linkend="v2.callbacks">このページ</link>を見よ。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>戻り値：</term>
	  <listitem>
	    <para>
	      Python の呼び出し結果を C++ の型 <type>R</type> に変換したもの。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>根拠：</term>
	  <listitem>
	    <para>
	      下の例で見るように、Python でオーバーライド可能な C++ 仮想関数を実装するのに重要である。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="v2.call_method.examples">
    <title>例</title>
    <para>
      以下の C++ コードは、<function>call_method</function> を使用して Python でオーバーライド可能な仮想関数を持つクラスをラップする方法を示している。
    </para>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/utility.hpp>
#include <cstring>

// ラップするクラス
class Base
{
 public:
   virtual char const* class_name() const { return "Base"; }
   virtual ~Base();
};

bool is_base(Base* b)
{
   return !std::strcmp(b->class_name(), "Base");
}

// ここからラッパコード
using namespace boost::python;

// コールバッククラス
class Base_callback : public Base
{
 public:
   Base_callback(PyObject* self) : m_self(self) {}

   char const* class_name() const { return call_method<char const*>(m_self, "class_name"); }
   char const* Base_name() const { return Base::class_name(); }
 private:
   PyObject* const m_self;
};

using namespace boost::python;
BOOST_PYTHON_MODULE(my_module)
{
    def("is_base", is_base);

    class_<Base,Base_callback, noncopyable>("Base")
        .def("class_name", &Base_callback::Base_name)
        ;

}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from my_module import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>class Derived(Base):</userinput>
<prompt>... </prompt><userinput>   def __init__(self):</userinput>
<prompt>... </prompt><userinput>      Base.__init__(self)</userinput>
<prompt>... </prompt><userinput>   def class_name(self):</userinput>
<prompt>... </prompt><userinput>      return self.__class__.__name__</userinput>
<prompt>... </prompt><userinput/>
<prompt>&gt;&gt;&gt; </prompt><userinput>is_base(Base()) # C++ から class_name() メソッドを呼び出す</userinput>
<computeroutput>1</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>is_base(Derived())</userinput>
<computeroutput>0</computeroutput></screen>
    </section>
  </section>
</section>
