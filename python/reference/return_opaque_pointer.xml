<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.return_opaque_pointer">
  <title>boost/python/return_opaque_pointer.hpp</title>

  <section xml:id="v2.return_opaque_pointer.classes">
    <title>クラス</title>

    <section xml:id="v2.return_opaque_pointer-spec">
      <title><classname>return_opaque_pointer</classname> クラス</title>
      <para>
	<classname>return_opaque_pointer</classname> は、新しい Python オブジェクトに戻り値がコピーされる未定義型へのポインタを返す C++ 関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデルである。
      </para>
      <para>
	戻り値のポインタ先の型について <function linkend="v2.type_id.type_id-spec">type_id</function> 関数の特殊化を定義するには、<classname>return_opaque_pointer</classname> ポリシーを指定することに加え、<symbol linkend="v2.opaque.BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID-spec">BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID</symbol> マクロを使用しなければならない。
      </para>

      <section xml:id="v2.return_opaque_pointer.return_opaque_pointer-spec-synopsis">
	<title><classname>return_opaque_pointer</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct return_opaque_pointer
    {
        template <class R> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.return_opaque_pointer.return_opaque_pointer-spec-metafunctions">
	<title><classname>return_opaque_pointer</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef detail::opaque_conversion_holder&lt;R&gt; type;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.return_opaque_pointer.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[# include <boost/python/return_opaque_pointer.hpp>
# include <boost/python/def.hpp>
# include <boost/python/module.hpp>
# include <boost/python/return_value_policy.hpp>

typedef struct opaque_ *opaque;

opaque the_op   = ((opaque) 0x47110815);

opaque get () { return the_op; }
void use (opaque op) {
    if (op != the_op)
	throw std::runtime_error (std::string ("failed"));
}

void failuse (opaque op) {
    if (op == the_op)
	throw std::runtime_error (std::string ("success"));
}

BOOST_PYTHON_OPAQUE_SPECIALIZED_TYPE_ID(opaque_)

namespace bpl = boost::python;

BOOST_PYTHON_MODULE(opaque_ext)
{
    bpl::def (
        "get", &::get, bpl::return_value_policy<bpl::return_opaque_pointer>());
    bpl::def ("use", &::use);
    bpl::def ("failuse", &::failuse);
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <programlisting language="Python"><![CDATA[["""
>>> from opaque_ext import *
>>> #
>>> # 正しい変換のチェック
>>> use(get())
>>> failuse(get())
Traceback (most recent call last):
        ...
RuntimeError: success
>>> #
>>> # 整数から不透明なオブジェクトへの変換が存在しないことのチェック
>>> use(0)
Traceback (most recent call last):
        ...
TypeError: bad argument type for built-in operation
>>> #
>>> # 文字列から不透明なオブジェクトへの変換が存在しないことのチェック
>>> use("")
Traceback (most recent call last):
        ...
TypeError: bad argument type for built-in operation
"""
def run(args = None):
    import sys
    import doctest

    if args is not None:
        sys.argv = args
    return doctest.testmod(sys.modules.get(__name__))
    
if __name__ == '__main__':
    print "実行中..."
    import sys
    sys.exit(run()[0])]]></programlisting>
    </section>
  </section>

  <section xml:id="v2.return_opaque_pointer.see-also">
    <title>参照</title>
    <para>
      <classname linkend="v2.opaque">opaque</classname>
    </para>
  </section>
</section>
