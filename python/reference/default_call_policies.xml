<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.default_call_policies">
  <title>boost/python/default_call_policies.hpp</title>

  <section xml:id="v2.default_call_policies.classes">
    <title>クラス</title>

    <section xml:id="v2.default_call_policies.default_call_policies-spec">
      <title><classname>default_call_policies</classname> クラス</title>
      <para>
	<classname>default_call_policies</classname> は <methodname>precall</methodname> および <methodname>postcall</methodname> の振る舞いを持たない <link linkend="v2.CallPolicies">CallPolicies</link> のモデルであり、値返しを行う <classname>result_converter</classname> である。ラップする C++ の関数およびメンバ関数は、特に指定しなければ <classname>default_call_policies</classname> を使用する。新規の <link linkend="v2.CallPolicies">CallPolicies</link> は <classname>default_call_policies</classname> から派生すると便利である。
      </para>

      <section xml:id="v2.default_call_policies.default_call_policies-spec-synopsis">
	<title><classname>default_call_policies</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
    struct default_call_policies
    {
        static bool precall(PyObject*);
        static PyObject* postcall(PyObject*, PyObject* result);
        typedef <classname linkend="v2.default_call_policies.default_result_converter-spec">default_result_converter</classname> result_converter;
        template &lt;class Sig&gt; struct extract_return_type : mpl::front&lt;Sig&gt;{};
    };
}}</programlisting>
      </section>

      <section xml:id="v2.default_call_policies.default_call_policies-spec-statics">
	<title><classname>default_call_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>precall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <constant>true</constant>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>postcall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>result</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <parameter>result</parameter>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.default_call_policies.default_result_converter-spec">
      <title><classname>default_result_converter</classname> クラス</title>
      <para>
	<classname>default_result_converter</classname> は、非ポインタ型、<type>char const*</type> または <type>PyObject*</type> を値で返す C++ 関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> モデルである。
      </para>

      <section xml:id="v2.default_call_policies.default_result_converter-spec-synopsis">
	<title><classname>default_result_converter</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct default_result_converter
    {
        template <class T> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.default_call_policies.default_result_converter-spec-metafunctions">
	<title><classname>default_result_converter</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <type>T</type> が参照型でない。<type>T</type> がポインタ型の場合、<type>T</type> は <type>const char*</type> か <type>PyObject*</type>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef <classname linkend="v2.to_python_value.to_python_value-spec">to_python_value</classname>&lt;T const&amp;&gt; type;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.default_call_policies.examples">
    <title>例</title>
    <para>
      この例は Boost.Python の実装そのものからとった。<classname linkend="v2.return_value_policy.return_value_policy-spec">return_value_policy</classname> クラステンプレートは <methodname>precall</methodname> および <methodname>postcall</methodname> に対する振る舞いの実装を持たないので、その基底クラスは <classname>default_call_policies</classname> となっている。
    </para>
    <programlisting language="C++"><![CDATA[template <class Handler, class Base = default_call_policies>
struct return_value_policy : Base
{
   typedef Handler result_converter;
};]]></programlisting>
  </section>
</section>
