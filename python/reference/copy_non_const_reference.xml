<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.copy_non_const_reference">
  <title>boost/python/copy_non_const_reference.hpp</title>

  <section xml:id="v2.copy_non_const_reference.classes">
    <title>クラス</title>

    <section xml:id="v2.copy_non_const_reference-spec">
      <title><classname>copy_non_const_reference</classname> クラス</title>
      <para>
	<classname>copy_non_const_reference</classname> は、参照先の値を新しい Python オブジェクトにコピーする型への非 <code language="C++">const</code> 参照を返す C++ 関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデルである。
	<!-- わかりにくい -->
      </para>

      <section xml:id="v2.copy_non_const_reference.copy_non_const_reference-spec-synopsis">
	<title><classname>copy_non_const_reference</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct copy_non_const_reference
    {
        template <class T> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.copy_non_const_reference.copy_const_reference-spec-metafunctions">
	<title><classname>copy_non_const_reference</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    非 const な <type>U</type> に対して <type>T</type> が <type>U&amp;</type>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef <classname linkend="v2.to_python_value.to_python_value-spec">to_python_value</classname>&lt;T&gt; type;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.copy_const_reference.examples">
    <title>例</title>

    <section>
      <title>C++ のコード</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/copy_non_const_reference.hpp>
#include <boost/python/return_value_policy.hpp>

// ラップするクラス群
struct Bar { int x; }

struct Foo {
   Foo(int x) : { b.x = x; }
   Bar& get_bar() { return b; }
 private:
   Bar b;
};

// ラッパコード
using namespace boost::python;
BOOST_PYTHON_MODULE(my_module)
{
    class_<Bar>("Bar");

     class_<Foo>("Foo", init<int>())
        .def("get_bar", &Foo::get_bar
            , return_value_policy<copy_non_const_reference>())
       ;
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from my_module import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f = Foo(3)         # Foo オブジェクトを作成</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = f.get_bar()    # 内部的な Bar オブジェクトのコピーを作成</userinput></screen>
    </section>
  </section>
</section>
