<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.object">
  <title>boost/python/object.hpp</title>

  <section xml:id="v2.object.introduction">
    <title>はじめに</title>
    <para>
      汎用的な Python のオブジェクトラッパクラス <classname>object</classname> および関連クラスをエクスポートする。引数依存の探索および <classname>object</classname> が定義する汎化演算子に絡む潜在的な問題を避けるため、これらの機能はすべて <code language="C++">namespace boost::python::api</code> で定義され、<classname>object</classname> は <code language="C++">using</code> 宣言で <code language="C++">namespace boost::python</code> へインポートされている。
    </para>
  </section>

  <section xml:id="v2.object.types">
    <title>型</title>

    <section xml:id="v2.object.slice_nil-spec">
      <title>slice_nil</title>
      <programlisting language="C++">class slice_nil;
static const _ = slice_nil();</programlisting>
      <para>
	次のように、Python のスライス式で添字を省く効果を得る型。
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>x[:-1]</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x[::-1]</userinput></screen>
      <para>
	C++ で等価なことをするには、
      </para>
      <programlisting language="C++">x.slice(_,-1)
x[slice(_,_,-1)]</programlisting>
    </section>
  </section>

  <section xml:id="v2.object.classes">
    <title>クラス</title>

    <section xml:id="v2.object.const_attribute_policies-spec">
      <title><classname>const_attribute_policies</classname> クラス</title>
      <para>
	<type>const object</type> への属性アクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.const_attribute_policies-spec-synopsis">
	<title><classname>const_attribute_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct const_attribute_policies
  {
      typedef char const* key_type;
      static object get(object const& target, char const* key);
  };
}}}]]></programlisting>
    </section>

      <section xml:id="v2.object.const_attribute_policies-spec-statics">
	<title><classname>const_attribute_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object</type>
	      <methodname>get</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> にアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    属性アクセスの結果を管理する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.attribute_policies-spec">
      <title><classname>attribute_policies</classname> クラス</title>
      <para>
	変更可能な <classname>object</classname> への属性アクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.attribute_policies-spec-synopsis">
	<title><classname>attribute_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct attribute_policies : const_attribute_policies
  {
      static object const& set(object const& target, char const* key, object const& value);
      static void del(object const&target, char const* key);
  };
}}}]]></programlisting>
    </section>

      <section xml:id="v2.object.attribute_policies-spec-statics">
	<title><classname>attribute_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object const&amp;</type>
	      <methodname>set</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>key</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>value</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> に <parameter>value</parameter> を設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>void</type>
	      <methodname>del</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> を削除する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.const_objattribute_policies-spec">
      <title><classname>const_objattribute_policies</classname> クラス</title>
      <para>
	<type>const object</type> へのアクセス属性（属性名を <type>const object</type> で与える場合）を表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.const_objattribute_policies-spec-synopsis">
	<title><classname>const_objattribute_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct const_objattribute_policies
  {
      typedef object const& key_type;
      static object get(object const& target, object const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.const_objattribute_policies-spec-statics">
	<title><classname>const_objattribute_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object</type>
	      <methodname>get</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が文字列を保持する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> にアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    属性アクセスの結果を管理する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.objattribute_policies-spec">
      <title><classname>objattribute_policies</classname> クラス</title>
      <para>
	変更可能な <classname>object</classname> へのアクセス属性（属性名を <type>const object</type> で与える場合）を表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.objattribute_policies-spec-synopsis">
	<title><classname>objattribute_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct objattribute_policies : const_objattribute_policies
  {
      static object const& set(object const& target, object const& key, object const& value);
      static void del(object const&target, object const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.objattribute_policies-spec-statics">
	<title><classname>objattribute_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object const&amp;</type>
	      <methodname>set</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>value</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が文字列を保持する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> に <parameter>value</parameter> を設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>void</type>
	      <methodname>del</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>key</parameter> が文字列を保持する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の属性 <parameter>key</parameter> を削除する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.const_item_policies-spec">
      <title><classname>const_item_policies</classname> クラス</title>
      <para>
	<type>const object</type> への（Python の角括弧演算子 <methodname>[]</methodname> による）要素アクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.const_item_policies-spec-synopsis">
	<title><classname>const_item_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct const_item_policies
  {
      typedef object key_type;
      static object get(object const& target, object const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.const_item_policies-spec-statics">
	<title><classname>const_item_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object</type>
	      <methodname>get</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定する要素へアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    属性アクセスの結果を管理する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.item_policies-spec">
      <title><classname>item_policies</classname> クラス</title>
      <para>
	変更可能な <classname>object</classname> への（Python の角括弧演算子 <methodname>[]</methodname> による）要素アクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.item_policies-spec-synopsis">
	<title><classname>item_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct item_policies : const_item_policies
  {
      static object const& set(object const& target, object const& key, object const& value);
      static void del(object const& target, object const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.item_policies-spec-statics">
	<title><classname>item_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object const&amp;</type>
	      <methodname>set</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>value</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定する要素を <parameter>value</parameter> に設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>void</type>
	      <methodname>del</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定する要素を削除する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.const_slice_policies-spec">
      <title><classname>const_slice_policies</classname> クラス</title>
      <para>
	<type>const object</type> への（Python のスライス表記 <code language="Python">[<replaceable>x</replaceable>:<replaceable>y</replaceable>]</code> による）スライスアクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.const_slice_policies-spec-synopsis">
	<title><classname>const_slice_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct const_slice_policies
  {
      typedef std::pair<handle<>, handle<> > key_type;
      static object get(object const& target, key_type const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.const_slice_policies-spec-statics">
	<title><classname>const_slice_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object</type>
	      <methodname>get</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>key_type const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定するスライスへアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    スライスアクセスの結果を管理する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.slice_policies-spec">
      <title><classname>slice_policies</classname> クラス</title>
      <para>
	変更可能な <classname>object</classname> へのスライスアクセスを表現するプロキシのためのポリシー。
      </para>

      <section xml:id="v2.object.slice_policies-spec-synopsis">
	<title><classname>slice_policies</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  struct slice_policies : const_slice_policies
  {
      static object const& set(object const& target, key_type const& key, object const& value);
      static void del(object const& target, key_type const& key);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.slice_policies-spec-statics">
	<title><classname>slice_policies</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>object const&amp;</type>
	      <methodname>set</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>key_type const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>value</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定するスライスに <parameter>value</parameter> を設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>void</type>
	      <methodname>del</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>target</parameter>
	      </methodparam>
	      <methodparam>
		<type>key_type const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>target</parameter> の <parameter>key</parameter> で指定するスライスを削除する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    Python の例外が送出した場合 <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.object_operators-spec">
      <title><classname>object_operators&lt;U&gt;</classname> クラステンプレート</title>
      <para>
	これは <classname>object</classname> およびその <classname>proxy</classname> テンプレートの基底クラスであり、共通のインターフェイス（メンバ関数およびクラス本体内で定義しなければならない演算子）を提供する。テンプレート引数 <type>U</type> は <classname>object_operators&lt;U&gt;</classname> の派生型という想定である。実際にはユーザはこのクラスを直接使用すべきではないが、<classname>object</classname> とそのプロキシに対して重要なインターフェイスを提供するので、ここに記載する。
      </para>

      <section xml:id="v2.object.object_operators-spec-synopsis">
	<title><classname>object_operators</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  template <class U>
  class object_operators
  {
   public:
      // 関数呼び出し
      //
      object operator()() const;

      template <class A0>
      object operator()(A0 const&) const;
      template <class A0, class A1>
      object operator()(A0 const&, A1 const&) const;
      ...
      template <class A0, class A1,...class An>
      object operator()(A0 const&, A1 const&,...An const&) const;

      detail::args_proxy operator* () const; 
      object operator()(detail::args_proxy const &args) const; 
      object operator()(detail::args_proxy const &args, 
                        detail::kwds_proxy const &kwds) const; 

      // 真偽値のテスト
      //
      typedef unspecified bool_type;
      operator bool_type() const;

      // 属性アクセス
      //
      proxy<const_object_attribute> attr(char const*) const;
      proxy<object_attribute> attr(char const*);
      proxy<const_object_objattribute> attr(object const&) const;
      proxy<object_objattribute> attr(object const&);

      // 要素アクセス
      //
      template <class T>
      proxy<const_object_item> operator[](T const& key) const;
    
      template <class T>
      proxy<object_item> operator[](T const& key);

      // スライシング
      //
      template <class T, class V>
      proxy<const_object_slice> slice(T const& start, V const& end) const
    
      template <class T, class V>
      proxy<object_slice> slice(T const& start, V const& end);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.object_operators-spec-observers">
	<title><classname>object_operators</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0&gt;</modifier>
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0 const&amp;</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0, class A1&gt;</modifier>
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0 const&amp;</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>A1 const&amp;</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <para>
	      <code language="C++">...</code>
	    </para>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;class A0, class A1,...class An&gt;</modifier>
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>A0 const&amp;</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>A1 const&amp;</type>
		<parameter/>
	      </methodparam>
	      <methodparam>
		<type>...An const&amp;</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++"><![CDATA[call<object>(object(*static_cast<U*>(this)).ptr(), a1, a2,...aN)]]></code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>detail::args_proxy const &amp;</type>
		<parameter>args</parameter>
		<modifier>const</modifier>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    タプル <parameter>args</parameter> で与えた引数で <classname>object</classname> を呼び出す。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>object</type>
	      <methodname>operator()</methodname>
	      <methodparam>
		<type>detail::args_proxy const &amp;</type>
		<parameter>args</parameter>
	      </methodparam>
	      <methodparam>
		<type>detail::kwds_proxy const &amp;</type>
		<parameter>kwds</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    タプル <parameter>args</parameter> で与えた引数と辞書 <parameter>kwds</parameter> で与えた名前付き引数で <classname>object</classname> を呼び出す。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <methodname>operator bool_type</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> の真偽値をテストする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++"><![CDATA[call<object>(object(*static_cast<U*>(this)).ptr(), a1, a2,...aN)]]></code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>proxy&lt;const_object_attribute&gt;</type>
	      <methodname>attr</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>proxy&lt;object_attribute&gt;</type>
	      <methodname>attr</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> が <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> の名前 <parameter>name</parameter> の属性にアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    ターゲットに <code language="C++"><![CDATA[object(*static_cast<U*>(this))]]></code> を、キーに <parameter>name</parameter> を束縛した <classname>proxy</classname> オブジェクト。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>proxy&lt;const_object_objattribute&gt;</type>
	      <methodname>attr</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter/>
		<modifier>const</modifier>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>proxy&lt;object_objattribute&gt;</type>
	      <methodname>attr</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は文字列を保持する <classname>object</classname>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> の名前 <parameter>name</parameter> の属性にアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    ターゲットに <code language="C++"><![CDATA[object(*static_cast<U*>(this))]]></code> を、キーに <parameter>name</parameter> を束縛した <classname>proxy</classname> オブジェクト。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class T&gt;</modifier>
	      <type>proxy&lt;const_object_item&gt;</type>
	      <methodname>operator[]</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>key</parameter>
		<modifier>const</modifier>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class T&gt;</modifier>
	      <type>proxy&lt;object_item&gt;</type>
	      <methodname>operator[]</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>key</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> の <parameter>key</parameter> が示す要素にアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    ターゲットに <code language="C++"><![CDATA[object(*static_cast<U*>(this))]]></code> を、キーに <code language="C++">object(key)</code> を束縛した <classname>proxy</classname> オブジェクト。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class T, class V&gt;</modifier>
	      <type>proxy&lt;const_object_slice&gt;</type>
	      <methodname>slice</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>start</parameter>
	      </methodparam>
	      <methodparam>
		<type>V const&amp;</type>
		<parameter>end</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class T, class V&gt;</modifier>
	      <type>proxy&lt;object_slice&gt;</type>
	      <methodname>slice</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>start</parameter>
	      </methodparam>
	      <methodparam>
		<type>V const&amp;</type>
		<parameter>end</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code> の <code language="C++"><![CDATA[std::make_pair(object(start), object(finish))]]></code> が示すスライスにアクセスする。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    ターゲットに <code language="C++"><![CDATA[object(*static_cast<U*>(this))]]></code> を、キーに <code language="C++"><![CDATA[std::make_pair(object(start), object(finish))]]></code> を束縛した <classname>proxy</classname> オブジェクト。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.object-spec">
      <title><classname>object</classname> クラス</title>
      <para>
	目的は <classname>object</classname> が可能な限り Python の変数のように振舞うことである。これにより Python で動作する式は概して C++ でも同じ方法で動作するはずである。<classname>object</classname> の大部分のインターフェイスは、基底クラス <code language="C++"><classname linkend="v2.object.object_operators-spec">object_operators</classname>&lt;object&gt;</code> とこのヘッダが定義する<link linkend="v2.object.functions">自由関数</link>が提供する。
      </para>

      <section xml:id="v2.object.object-spec-synopsis">
	<title><classname>object</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
{
  class object : public object_operators<object>
  {
   public:
      object();

      object(object const&);
      
      template <class T>
      explicit object(T const& x);

      ~object();

      object& operator=(object const&); 

      PyObject* ptr() const;

      bool is_none() const;
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.object-spec-ctors">
	<title><classname>object</classname> クラスのコンストラクタおよびデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>object</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    Python の <constant>None</constant> オブジェクトへの参照を管理するオブジェクトを構築する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class T&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>object</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>x</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>x</parameter> を Python に変換し、それへの参照を管理する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    上記の変換が不可能な場合、<exceptionname>error_already_set</exceptionname>（Python の <exceptionname>TypeError</exceptionname> 例外を設定する）。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <destructorsynopsis language="C++">
	      <methodname>~object</methodname>
	      <void/>
	    </destructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    内部で保持するオブジェクトの参照カウントを減らす。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.object.object-spec-modifiers">
	<title><classname>object</classname> クラスの変更メソッド</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>object&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>rhs</parameter> が保持するオブジェクトの参照カウントを増やし、<code language="C++">*this</code> が保持するオブジェクトの参照カウントを減らす。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.object.object-spec-observers">
	<title><classname>object</classname> クラスのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>ptr</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    内部で保持している Python オブジェクトへのポインタ。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>is_none</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">(ptr() == Py_None)</code> の結果。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.object.proxy-spec">
      <title><classname>proxy</classname> クラステンプレート</title>
      <para>
	<classname>object</classname> に対する属性、要素およびスライスアクセスを実装するために、このドキュメントで述べた種々のポリシー（<foreignphrase xml:lang="en">Policies</foreignphrase>）とともにこのテンプレートをインスタンス化する。<type>Policies::key_type</type> 型のオブジェクトを格納する。
      </para>

      <section xml:id="v2.object.proxy-spec-synopsis">
	<title><classname>proxy</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python { namespace api
  template <class Policies>
  class proxy : public object_operators<proxy<Policies> >
  {
   public:
      operator object() const;

      proxy const& operator=(proxy const&) const;
      template <class T>
      inline proxy const& operator=(T const& rhs) const;
      
      void del() const;

      template <class R>
      proxy operator+=(R const& rhs);
      template <class R>
      proxy operator-=(R const& rhs);
      template <class R>
      proxy operator*=(R const& rhs);
      template <class R>
      proxy operator/=(R const& rhs);
      template <class R>
      proxy operator%=(R const& rhs);
      template <class R>
      proxy operator<<=(R const& rhs);
      template <class R>
      proxy operator>>=(R const& rhs);
      template <class R>
      proxy operator&=(R const& rhs);
      template <class R>
      proxy operator|=(R const& rhs);
  };
}}}]]></programlisting>
      </section>

      <section xml:id="v2.object.proxy-spec-observers">
	<title><classname>proxy</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <methodname>operator object</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Policies::get(target, key)</code> にプロキシのターゲットオブジェクトとキーオブジェクトを適用する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.object.proxy-spec-modifiers">
	<title><classname>proxy</classname> クラステンプレートの変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>proxy const&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>proxy const&amp;</type>
		<parameter/>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class T&gt;</modifier>
	      <modifier>inline</modifier>
	      <type>proxy const&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>T const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    プロキシのターゲットオブジェクトとキーオブジェクトを使用して <code language="C++">Policies::set(target, key, object(rhs))</code>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator+=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator-=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator*=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator/=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator%=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator&lt;&lt;=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator&gt;&gt;=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator&amp;=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class R&gt;</modifier>
	      <type>proxy</type>
	      <methodname>operator|=</methodname>
	      <methodparam>
		<type>R const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    与えられた operator@= について、<code language="C++">object(*this) @= rhs;</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>del</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    プロキシのターゲットオブジェクトとキーオブジェクトを使用して <code language="C++">Policies::del(target, key)</code>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.object.functions">
    <title>関数</title>
    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class T&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>void <function>del</function></funcdef>
	    <paramdef>
	      <type>proxy&lt;T&gt; const&amp;</type>
	      <parameter>x</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">x.del()</code>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&gt;</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&gt;=</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&lt;</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&lt;=</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator==</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator!=</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		Python 内で演算子をそれぞれ <code language="C++">object(l)</code> および <code language="C++">object(r)</code> に適用した結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator+</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator-</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator*</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator/</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator%</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&lt;&lt;</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&gt;&gt;</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator&amp;</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator^</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class L,class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object <function>operator|</function></funcdef>
	    <paramdef>
	      <type>L const&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		Python 内で演算子をそれぞれ <code language="C++">object(l)</code> および <code language="C++">object(r)</code> に適用した結果を返す。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator+=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator-=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator*=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator/=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator%=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator&lt;&lt;=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator&gt;&gt;=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator&amp;=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator^=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template&lt;class R&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>object&amp; <function>operator|=</function></funcdef>
	    <paramdef>
	      <type>object&amp;</type>
	      <parameter>l</parameter>
	    </paramdef>
	    <paramdef>
	      <type>R const&amp;</type>
	      <parameter>r</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		対応する Python の複合演算子をそれぞれ <parameter>l</parameter> および <code language="C++">object(r)</code> に適用した結果をlに代入する。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<parameter>l</parameter>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>long <function>len</function></funcdef>
	    <paramdef>
	      <type>object const&amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		<code language="C++">PyObject_Length(obj.ptr())</code>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		オブジェクトの <code language="C++">len()</code>
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.object.examples">
    <title>例</title>
    <para>
      Python のコード：
    </para>
    <programlisting language="Python">def sum_items(seq):
   result = 0
   for x in seq:
      result += x
   return result</programlisting>
    <para>
      C++ 版：
    </para>
    <programlisting language="C++">object sum_items(object seq)
{
   object result = object(0);
   for (int i = 0; i &lt; len(seq); ++i)
      result += seq[i];
   return result;
}</programlisting>
  </section>
</section>
