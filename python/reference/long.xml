<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.long">
  <title>boost/python/long.hpp</title>

  <section xml:id="v2.long.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/c-api/long.html">long</classname> 整数型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.long.classes">
    <title>クラス</title>

    <section xml:id="v2.long.long_-spec">
      <title><classname>long_</classname> クラス</title>
      <para>
	Python の組み込み <classname>long</classname> 型の<link xlink:href="http://docs.python.jp/2/c-api/number.html">整数型プロトコル</link>をエクスポートする。以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>long_</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>long_</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.long.long_-spec-synopsis">
	<title><classname>long_</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  class long_ : public object
  {
   public:
      long_(); // long_ を新規に作成する

      template <class T>
      explicit long_(T const& rhs);

      template <class T, class U>
      long_(T const& rhs, U const& base);
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.list.examples">
    <title>例</title>
    <programlisting language="C++">namespace python = boost::python;

// オーバーフローすることなく階乗を計算する
python::long_ fact(long n)
{
   if (n == 0)
      return python::long_(1);
   else
      return n * fact(n – 1);
}</programlisting>
  </section>
</section>
