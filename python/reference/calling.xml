<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.calling">
  <title>Python の関数とメソッドの呼び出し</title>

  <section xml:id="v2.calling.introduction">
    <title>はじめに</title>
    <para>
      Python 関数を保持する <classname linkend="v2.object.object-spec">object</classname> インスタンス <varname>f</varname> が与えられたとき、C++ からその関数を呼び出す最も簡単な方法は、単にその関数呼び出し演算子を起動することである。
    </para>
    <programlisting language="C++">f("tea", 4, 2) // Python の f('tea', 4, 2) と同じ</programlisting>
    <para>
      また、当然のことながら <classname linkend="v2.object.object-spec">object</classname> インスタンス <varname>x</varname> のメソッドを呼び出すには対応する属性の関数呼び出し演算子を使用する。
    </para>
    <programlisting language="C++">x.attr("tea")(4, 2); // Python の x.tea(4, 2) と同じ</programlisting>
    <para>
      <classname>object</classname> インスタンスがない場合、<type>PyObject*</type> に対して Python の関数およびメソッドを呼び出すために、Boost.Python は 2 種類の関数テンプレート <function linkend="v2.call.call-spec">call</function> および <function linkend="v2.call_method.call_method-spec">call_method</function> を提供している。Python の関数オブジェクト（または Python の呼び出し可能オブジェクト）を呼び出すインターフェイスは次のようなものである。
    </para>
    <programlisting language="C++"><![CDATA[call<ResultType>(callable_object, a1, a2... aN);]]></programlisting>
    <para>
      Python オブジェクトのメソッド呼び出しも同様に簡単である。
    </para>
    <programlisting language="C++"><![CDATA[call_method<ResultType>(self_object, "method-name", a1, a2... aN);]]></programlisting>
    <para>
      この比較的低水準なインターフェイスは、Python でオーバーライド可能な C++ 仮想関数を実装するときに使用する。
    </para>
  </section>

  <section xml:id="v2.calling.argument_handling">
    <title>引数の処理</title>
    <para>
      引数はその型に従って Python に変換する。既定では引数 <parameter>a1</parameter>...<parameter>a<replaceable>N</replaceable></parameter> は新しい Python オブジェクトにコピーされるが、<function linkend="v2.ptr.ptr-spec">ptr()</function> および <function xlink:href="http://www.boost.org/libs/bind/ref.html">ref()</function> を使用してこの振る舞いを上書きすることができる。
    </para>
    <programlisting language="C++"><![CDATA[class X : boost::noncopyable
{
   ...
};

void apply(PyObject* callable, X& x)
{
   // callable を呼び出し、x への参照を保持する Python オブジェクトを渡す
   boost::python::call<void>(callable, boost::ref(x));
}]]></programlisting>
    <para>
      以下の表において <varname>x</varname> は実際の引数オブジェクトであり、<replaceable>cv</replaceable> は省略可能な CV 指定子（<code language="C++">const</code> 、<code language="C++">volatile</code> あるいは <code language="C++">const volatile</code>）である。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>引数の型</th>
	  <th>振る舞い</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><type>T cv&amp;</type> 、<type>T cv</type></td>
	  <td>
	    <type>T</type> を返すラップした C++ 関数の戻り値と同じ方法で Python 引数を作成する。<type>T</type> がクラス型の場合、通常は <varname>x</varname> を新しい Python オブジェクト内にコピー構築する。
	    <!-- 'x' は原文だと '*x' になってる -->
	  </td>
	</tr>
	<tr>
	  <td><type>T*</type></td>
	  <td>
	    <code language="C++">x == 0</code> の場合、Python 引数は <constant xlink:href="http://docs.python.jp/2/library/stdtypes.html#bltin-null-object">None</constant> である。それ以外の場合、<type>T</type> を返すラップする C++ 関数の戻り値と同じ方法で Python 引数を作成する。<type>T</type> がクラス型の場合、通常は <code language="C++">*x</code> を新しい Python オブジェクト内にコピー構築する。
	  </td>
	</tr>
	<tr>
	  <td><code language="C++"><classname xlink:href="http://www.boost.org/libs/bind/ref.html">boost::reference_wrapper</classname>&lt;T&gt;</code></td>
	  <td>
	    Python の引数は（コピーではなく）<code language="C++">x.get()</code> へのポインタを持つ。注意：結果のオブジェクトへの参照を保持する Python コードが <code language="C++">*x.get()</code> の寿命を超えて存在しないようにしないと、<emphasis>クラッシュする！</emphasis>
	  </td>
	</tr>
	<tr>
	  <td><code language="C++"><classname linkend="v2.ptr.pointer_wrapper-spec">pointer_wrapper</classname>&lt;T&gt;</code></td>
	  <td>
	    <code language="C++">x.get() == 0</code> の場合、Python 引数は <constant xlink:href="http://docs.python.jp/2/library/stdtypes.html#bltin-null-object">None</constant> である。それ以外の場合、Python の引数は（コピーではなく）<code language="C++">x.get()</code> へのポインタを持つ。注意：結果のオブジェクトへの参照を保持する Python コードが <code language="C++">*x.get()</code> の寿命を超えて存在しないようにしないと、<emphasis>クラッシュする！</emphasis>
	  </td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="v2.calling.result_handling">
    <title>戻り値の処理</title>
    <para>
      大抵の場合 <code language="C++">call&lt;ResultType&gt;()</code> および <code language="C++">call_method&lt;ResultType&gt;()</code> は、<type>ResultType</type> に対して登録したすべての lvalue および rvalue の <wordasword>from_python</wordasword> 変換器を利用し、結果のコピーである <type>ResultType</type> を返す。しかしながら <type>ResultType</type> がポインタか参照型の場合、Boost.Python は lvalue の変換器のみを探索する。懸垂ポインタおよび参照を避けるため、結果の Python オブジェクトの参照カウントが 1 の場合は例外を投げる。
    </para>
  </section>

  <section xml:id="v2.calling.rationale">
    <title>根拠</title>
    <para>
      通常 <parameter>a1</parameter>...<parameter>a<replaceable>N</replaceable></parameter> に対応する Python の引数を得るには、それぞれについて新しい Python オブジェクトを作成しなければならない。C++ オブジェクトをその Python オブジェクトにコピーすべきだろうか、あるいは Python オブジェクトが単に C++ オブジェクトへの参照かポインタを保持すべきだろうか。大抵の場合、呼び出される関数はどこかに行ってしまった Python オブジェクトへの参照を保持する可能性があるため、後者の方法は安全ではない。C++ オブジェクトを破壊した後に Python オブジェクトを使用すると、Python がクラッシュする。
    </para>
    <para>
      Python 側のユーザがインタープリタのクラッシュについて気を払うべきでないという原理を踏まえ、既定の振る舞いは C++ オブジェクトをコピーすることとなっており、コピーを行わない振る舞いはユーザが直接 <code language="C++">a1</code> と書く代わりに <code language="C++"><function xlink:href="http://www.boost.org/libs/ref.html">boost::ref</function>(a1)</code> とした場合のみ認められる。こうすることで、少なくとも「意図せず」危険な振る舞いを遭遇することはない。コピーを伴わない（「参照」による）振る舞いは通常、クラス型でのみ利用可能であり、それ以外で使用すると実行時に Python の例外を送出して失敗する
      <footnote>
	<para>
	  <type>int</type> や <type>char</type> のような非クラス型についてはコンパイル時に失敗させることも可能だろうが、それがこの制限を課す優れた方法であるか私にはよく分からない。
	</para>
      </footnote>
      ことも付記しておく。
    </para>
    <para>
      しかしながらポインタ型が問題となる。方法の 1 つはいずれかの <parameter>a<replaceable>N</replaceable></parameter> がポインタ型である場合にコンパイルを拒絶することである。何といってもユーザは「値渡し」として <code language="C++">*a<replaceable>N</replaceable></code> を渡すことができ、<code language="C++">ref(*a<replaceable>N</replaceable>)</code> で参照渡しの振る舞いを示すことができる。しかしこれでは null ポインタから <constant>None</constant> への変換で問題が起こる。null ポインタ値を参照剥がしすることは違法である。
    </para>
    <para>
      折衷案として私が下した決断は以下のとおりだ：
    </para>
    <orderedlist>
      <listitem>
	<para>
	  既定の振る舞いは値渡しとする。非 null ポインタを渡すと、参照先が新しい Python オブジェクトにコピーされる。それ以外の場合、対応する Python 引数は <constant>None</constant> である。
	</para>
      </listitem>
      <listitem>
	<para>
	  参照渡しの振る舞いが必要な場合は、<parameter>a<replaceable>N</replaceable></parameter> がポインタであれば <code language="C++">ptr(a<replaceable>N</replaceable>)</code> を、そうでなければ <code language="C++">ref(a<replaceable>N</replaceable>)</code> を使用する。<code language="C++">ptr(a<replaceable>N</replaceable>)</code> に null ポインタを渡すと、対応する Python 引数は <constant>None</constant>である。
	</para>
      </listitem>
    </orderedlist>
    <para>
      戻り値についても類似の問題がある。<type>ResultType</type> にポインタ型か参照型を認めてしまうと、参照先のオブジェクトの寿命はおそらく Python オブジェクトに管理されることになる。この Python オブジェクトが破壊されるとポインタは懸垂する。<type>ResultType</type> が <type>char const*</type> の場合、特に問題は深刻である。対応する Python の String オブジェクトは一般に参照カウントが 1 であり、つまり <code language="C++">call&lt;char const*&gt;(...)</code> が返った直後にポインタは懸垂する。
    </para>
    <para>
      以前の Boost.Python v1 は <code language="C++">call&lt;char const*&gt;()</code> のコンパイルを拒絶することでこの問題に対処したが、これは極端でありかつ何の解決にもならない。極端というのは、所有する Python の文字列オブジェクト（例えば Python のクラス名である場合）が呼び出しを超えて生存する可能性があるためである。また、他の型のポインタや参照の戻り値についてもまったく同様の問題があるため、結局は解決にならないわけである。
    </para>
    <para>
      Boost.Python v2 では次のように対処した。
    </para>
    <orderedlist>
      <listitem>
	<para>
	  コールバックの <type>const char*</type> 戻り値型に対するコンパイル時の制限を除去した。
	</para>
      </listitem>
      <listitem>
	<para>
	  <type>U</type> がポインタ型か参照型の場合、戻り値の Python オブジェクトの参照カウントが 1 である場合を検出し、<code language="C++">call&lt;U&gt;(...)</code> 内で例外を投げる。
	</para>
      </listitem>
    </orderedlist>
    <para>
      ユーザは <code language="C++">call&lt;U&gt;</code> 内で <type>U</type> について明示的にポインタ、参照を指定しなければならないため安全であり、実行時の懸垂からも保護される。少なくとも <code language="C++">call&lt;U&gt;(...)</code> の呼び出しから抜け出すには十分である。
    </para>
  </section>
</section>
