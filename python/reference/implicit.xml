<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.extract">
  <title>boost/python/implicit.hpp</title>

  <section xml:id="v2.implicit.introduction">
    <title>はじめに</title>
    <para>
      <function>implicitly_convertible</function> は、Python オブジェクトを C++ 引数型に対して照合するとき、C++ の暗黙・明示的な変換について暗黙的な利用を可能にする。
    </para>
  </section>

  <section xml:id="v2.implicit.functions">
    <title>関数</title>

    <section xml:id="v2.implicit.implicitly_convertible-spec">
      <title><function>implicitly_convertible</function> 関数テンプレート</title>
      <orderedlist>
	<listitem>
	  <funcsynopsis language="C++">
	    <funcsynopsisinfo>template &lt;class Source, class Target&gt;</funcsynopsisinfo>
	    <funcprototype>
	      <?dbhtml funcsynopsis-style="ansi"?>
	      <funcdef>void <function>implicitly_convertible</function></funcdef>
	      <void/>
	    </funcprototype>
	  </funcsynopsis>
	  <table>
	    <caption><function>implicitly_convertible</function> のテンプレート引数</caption>
	    <thead>
	      <tr>
		<th>引数</th>
		<th>説明</th>
	      </tr>
	    </thead>
	    <tbody>
	      <tr>
		<td><type>Source</type></td>
		<td>暗黙の変換における元の型</td>
	      </tr>
	      <tr>
		<td><type>Target</type></td>
		<td>暗黙の変換における対象の型</td>
	      </tr>
	    </tbody>
	  </table>
	  <variablelist spacing="compact">
	    <varlistentry>
	      <term>要件：</term>
	      <listitem>
		<para>
		  宣言 <code language="C++">Target t(s);</code> が合法である（<varname>s</varname> は <type>Source</type> 型）。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>効果：</term>
	      <listitem>
		<para>
		  <type>Source</type> の rvalue を生成する登録済み変換器が 1 つでも存在する場合、あらゆる <code language="C++">PyObject* p</code> について変換が成功する <type>Target</type> rvalue への <wordasword>from_python</wordasword> 変換器を登録する。
		</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>根拠：</term>
	      <listitem>
		<para>
		  C++ ユーザは、C++ で行っているような相互運用性を Python で利用できると考える。
		</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</listitem>
      </orderedlist>
    </section>
  </section>

  <section xml:id="v2.implicit.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/class.hpp>
#include <boost/python/implicit.hpp>
#include <boost/python/module.hpp>

using namespace boost::python;

struct X
{
    X(int x) : v(x) {}
    operator int() const { return v; }
    int v;
};

int x_value(X const& x)
{
    return x.v;
}

X make_x(int n) { return X(n); }

BOOST_PYTHON_MODULE(implicit_ext)
{
    def("x_value", x_value);
    def("make_x", make_x);

    class_<X>("X", 
        init<int>())
        ;

    implicitly_convertible<X,int>();
    implicitly_convertible<int,X>();
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from implicit_ext import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x_value(X(42))</userinput>
<computeroutput>42</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x_value(42)</userinput>
<computeroutput>42</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x = make_x(X(42))</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x_value(x)</userinput>
<computeroutput>42</computeroutput></screen>
    </section>
  </section>
</section>
