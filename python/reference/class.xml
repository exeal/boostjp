<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.class">
  <title>boost/python/class.hpp</title>

  <section xml:id="v2.class.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/class.hpp&gt;</filename> は、ユーザが C++ クラスを Python へエクスポートするためのインターフェイスを定義する。<classname>class_</classname> クラステンプレートを宣言し、その引数はエクスポートするクラス型である。また <classname>init</classname> 、<classname>optional</classname> および <classname>bases</classname> ユーティリティクラステンプレートもエクスポートし、これらは <classname>class_</classname> クラステンプレートと組み合わせて使用する。
    </para>
    <para>
      <filename class="headerfile">&lt;boost/python/class_fwd.hpp&gt;</filename> には <classname>class_</classname> クラステンプレートの先行宣言がある。
    </para>
  </section>

  <section xml:id="v2.class.classes">
    <title>クラス</title>

    <section xml:id="v2.class.class_-spec">
      <title><classname>class_&lt;T, Bases, HeldType, NonCopyable&gt;</classname> クラステンプレート</title>
      <para>
	第 1 引数として渡した C++ 型に対応する Python クラスを作成する。引数は 4 つあるが、必須なのは 1 番目だけである。3 つの省略可能な引数は<emphasis>どのような順序でもよく</emphasis>、Boost.Python は引数の型から役割を判断する。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>テンプレート引数</th>
	    <th>要件</th>
	    <th>セマンティクス</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>T</type></td>
	    <td>クラス型。</td>
	    <td>ラップするクラス。</td>
	    <td></td>
	  </tr>
	  <tr>
	    <td><type>Bases</type></td>
	    <td>
	      それ以前にエクスポートした <type>T</type> の C++ 基底クラス群を指定する <classname linkend="v2.class.bases-spec">bases&lt;...&gt;</classname> の特殊化。
	      <footnote>
		<para>
		  「それ以前にエクスポートした」とは <classname>bases</classname> 内の各 <classname>B</classname> について、<classname>class_&lt;B, ...&gt;</classname> が構築済みでなければならないという意味である。
		</para>
		<programlisting language="C++">class_&lt;Base&gt;("Base");
class_&lt;Derived, bases&lt;Base&gt; &gt;("Derived");</programlisting>
	      </footnote>
	    </td>
	    <td>ラップした <type>T</type> インスタンスからその直接的または間接的な基本型それぞれへの <token>from_python</token> 変換を登録する。多態的な各基底型 <type>B</type> について、間接的に保持されたラップした <type>B</type> インスタンスから <type>T</type> への変換を登録する。</td>
	    <td><classname linkend="v2.class.bases-spec">bases&lt;&gt;</classname></td>
	  </tr>
	  <tr>
	    <td><type>HeldType</type></td>
	    <td><type>T</type> 、<type>T</type> の派生クラス、または <type><link linkend="v2.pointee.pointee-spec">pointee</link>&lt;HeldType&gt;::type</type> が <type>T</type> か <type>T</type> の派生クラスである <link linkend="v2.Dereferenceable">Dereferenceable</link> 型。</td>
	    <td><type>T</type> のコンストラクタを呼び出したとき、または <type>T</type> や <type>T*</type> を <function linkend="v2.call_backs.argument_handling">ptr</function> 、<function linkend="v2.call_backs.argument_handling">ref</function> 、あるいは <classname linkend="v2.return_internal_reference">return_internal_reference</classname> 等の <link linkend="v2.CallPolicies">CallPolicies</link> を使用せずに Python へ変換したとき、<type>T</type> のインスタンスをラップする Python オブジェクトへ実際に組み込む型を指定する。詳細は<link linkend="v2.class.HeldType">後述する</link>。</td>
	    <td><type>T</type></td>
	  </tr>
	  <tr>
	    <td><type>NonCopyable</type></td>
	    <td>与えられた場合、<classname xlink:href="http://www.boost.org/libs/utility/utility.htm#Class_noncopyable">boost::noncopyable</classname> でなければならない。</td>
	    <td><type>T</type> のインスタンスをコピーする <token>to_python</token> 変換の自動的な登録を抑止する。<type>T</type> が公開アクセス可能なコピーコンストラクタを持たない場合に必要である。</td>
	    <td><classname>boost::noncopyable</classname> 以外の未規定の型。</td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.class.HeldType">
	<title>HeldType のセマンティクス</title>
	<orderedlist>
	  <listitem>
	    <para>
	      <type>HeldType</type>が <type>T</type> から派生している場合、そのエクスポートしたコンストラクタは、<type>HeldType</type> インスタンスを持つ Python オブジェクトを逆向きに参照する <type>PyObject*</type> を第 1 引数に受け取らなければならない（<link linkend="v2.call_method.examples">例</link>）。この引数は <methodname linkend="v2.class.class_-spec-modifiers">def(init_expr)</methodname> に渡される <nonterminal def="" linkend="v2.init.init-expression">init-expression</nonterminal> には含まれず、<type>T</type> の Python インスタンスが作成されるときユーザが明示的に渡すこともない。このイディオムにより、Python 側でオーバーライドする C++ 仮想関数が Python オブジェクトにアクセス可能となり、Python のメソッドが呼び出し可能となる。Boost.Python は <type>HeldType</type> 引数を要求するラップした C++ 関数に <type>T</type> のラップしたインスタンスを渡すための変換器を自動的に登録する。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      Boost.Python は <type>T</type> のラップしたインスタンスが <type>HeldType</type> 型の引数として渡すことを認めているため、<type>HeldType</type> のスマートポインタを指定することでユーザは <type>T</type> へのスマートポインタを受け取るところに Python の <type>T</type> インスタンスを渡すことができる。<classname>std::auto_ptr</classname> や <classname xlink:href="http://www.boost.org/libs/smart_ptr/smart_ptr.htm">boost::shared_ptr&lt;&gt;</classname> といった対象の型を指す入れ子の <type>element_type</type> 型を持つスマートポインタは自動的にサポートされる。
	      <footnote>
		<para>
		  訳注　<classname>std::shared_ptr</classname>（C++11 以降）も自動的にサポートされます。
		</para>
	      </footnote>
	      <classname linkend="v2.pointee.pointee-spec">pointee&lt;HeldType&gt;</classname> を特殊化することで、他のスマートポインタ型もサポートされる。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      上の 1. で述べたとおり、<type>HeldType</type> が <type>T</type> の派生型に対するスマートポインタの場合、<type>HeldType</type> のエクスポートしたコンストラクタすべてで <type>PyObject*</type> を第 1 引数として与えなければならない。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      上記 1. および 3. 以外でユーザは <classname linkend="v2.has_back_reference.has_back_reference-spec">has_back_reference&lt;T&gt;</classname> を特殊化することで、<type>T</type> 自身が第 1 引数である <type>PyObject*</type> で初期化されることをオプション的に指定できる。
	    </para>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.class.class_-spec-synopsis">
	<title><classname>class_</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;class T
      , class Bases = bases&lt;&gt;
            , class HeldType = T
            , class NonCopyable = <replaceable>unspecified</replaceable>
           &gt;
  class class_ : public object
  {
    // 既定の __init__ を使用するコンストラクタ
    class_(char const* name);
    class_(char const* name, char const* docstring);

    // 既定でない __init__ を指定するコンストラクタ
    template &lt;class Init&gt;
    class_(char const* name, Init);
    template &lt;class Init&gt;
    class_(char const* name, char const* docstring, Init);

    // 追加の __init__ 関数のエクスポート
    template &lt;class Init&gt;
    class_&amp; def(Init);

    // メソッドの定義
    template &lt;class F&gt;
    class_&amp; def(char const* name, F f);
    template &lt;class Fn, class A1&gt;
    class_&amp; def(char const* name, Fn fn, A1 const&amp;);
    template &lt;class Fn, class A1, class A2&gt;
    class_&amp; def(char const* name, Fn fn, A1 const&amp;, A2 const&amp;);
    template &lt;class Fn, class A1, class A2, class A3&gt;
    class_&amp; def(char const* name, Fn fn, A1 const&amp;, A2 const&amp;, A3 const&amp;);

    // メソッドを static として宣言
    class_&amp; staticmethod(char const* name);
    
    // 演算子のエクスポート
    template &lt;<replaceable>unspecified</replaceable>&gt;
    class_&amp; def(detail::operator_&lt;<replaceable>unspecified</replaceable>&gt;);

    // 生の属性の変更
    template &lt;class U&gt;
    class_&amp; setattr(char const* name, U const&amp;);

    // データメンバのエクスポート
    template &lt;class D&gt;
    class_&amp; def_readonly(char const* name, D T::*pm);

    template &lt;class D&gt;
    class_&amp; def_readwrite(char const* name, D T::*pm);

    // static データメンバのエクスポート
    template &lt;class D&gt;
    class_&amp; def_readonly(char const* name, D const&amp; d);
    template &lt;class D&gt;
    class_&amp; def_readwrite(char const* name, D&amp; d);

    // プロパティの作成
    template &lt;class Get&gt;
    void add_property(char const* name, Get const&amp; fget, char const* doc=0);
    template &lt;class Get, class Set&gt;
    void add_property(
        char const* name, Get const&amp; fget, Set const&amp; fset, char const* doc=0);

    template &lt;class Get&gt;
    void add_static_property(char const* name, Get const&amp; fget);
    template &lt;class Get, class Set&gt;
    void add_static_property(char const* name, Get const&amp; fget, Set const&amp; fset);

    // pickle のサポート
    template &lt;typename PickleSuite&gt;
    self&amp; def_pickle(PickleSuite const&amp;);
    self&amp; enable_pickling();
  };
}}</programlisting>
      </section>

      <section xml:id="v2.class.class_-spec-ctors">
	<title><classname>class_</classname> クラステンプレートのコンストラクタ</title>

	<constructorsynopsis language="C++">
	  <methodname>class_</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>name</parameter>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <methodname>class_</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>name</parameter>
	  </methodparam>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>docstring</parameter>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <modifier>template &lt;class Init&gt;</modifier>
	  <methodname>class_</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>name</parameter>
	  </methodparam>
	  <methodparam>
	    <type>Init</type>
	    <parameter>init_spec</parameter>
	  </methodparam>
	</constructorsynopsis>
	<constructorsynopsis language="C++">
	  <modifier>template &lt;class Init&gt;</modifier>
	  <methodname>class_</methodname>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>name</parameter>
	  </methodparam>
	  <methodparam>
	    <type>char const*</type>
	    <parameter>docstring</parameter>
	  </methodparam>
	  <methodparam>
	    <type>Init</type>
	    <parameter>init_spec</parameter>
	  </methodparam>
	</constructorsynopsis>

	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		<parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。<parameter>docstring</parameter> が与えられた場合は <glossterm baseform="ntbs">ntbs</glossterm> でなければならない。<parameter>init_spec</parameter> が与えられた場合、特殊な列挙定数 <constant>no_init</constant> か <type>T</type> と互換性のある <nonterminal def="" linkend="v2.init.init-expressions">init-expression</nonterminal> のいずれかでなければならない。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		名前 <parameter>name</parameter> の Boost.Python 拡張クラスを保持する <classname>class_</classname> オブジェクトを構築する。<link linkend="v2.scope.introduction">現在のスコープ</link>において属性 <parameter>name</parameter> を新しい拡張クラスに束縛する。
	      </para>
	      <itemizedlist>
		<listitem>
		  <para>
		    <parameter>docstring</parameter> が与えられた場合、その値を拡張クラスの <property>__doc__</property> 属性に束縛する。
		  </para>
		</listitem>
		<listitem>
		  <para>
		    <parameter>init_spec</parameter> が <constant>no_init</constant> である場合、常に Python 例外を投げる特殊な <function>__init__</function> 関数を生成する。それ以外の場合は <code language="C++">this-&gt;def(init_spec)</code> を呼び出す。
		  </para>
		</listitem>
		<listitem>
		  <para>
		    <parameter>init_spec</parameter> が与えられなかった場合、<code language="C++">this-&gt;def(init&lt;&gt;())</code>を呼び出す。
		  </para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>根拠：</term>
	    <listitem>
	      <para>
		必要な <type>T</type> インスタンスを作成する <function>__init__</function> 関数をエクスポートせずにラップしたメンバ関数を呼び出すことによって発生する、よくある実行時エラーを避けられるよう、<classname>class_&lt;&gt;</classname> コンストラクタ内でコンストラクタ引数を指定できる。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>

      <section xml:id="v2.class.class_-spec-modifiers">
	<title>クラステンプレート <classname>class_</classname> の変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Init&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def</methodname>
	      <methodparam>
		<type>Init</type>
		<parameter>init_expr</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>init_expr</parameter> は <type>T</type> と互換性のある <nonterminal def="" linkend="v2.init.init-expressions">init-expression</nonterminal> の結果。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <type>Init</type> の<link linkend="v2.init.init-expressions">合法な接頭辞</link> <replaceable>P</replaceable> それぞれについて、<replaceable>P</replaceable> を引数として受け取る拡張クラスに <function>__init__(...)</function> 関数の多重定義を追加する。生成された各多重定義は、上述のセマンティクスに従って <parameter>init_expr</parameter> の呼び出しポリシーのコピーを使用して <type>HeldType</type> のオブジェクトを構築する。<type>Init</type> の<link linkend="v2.init.init-expressions">合法な接頭辞</link>の最長のものが <replaceable>N</replaceable> 個の型を有しており <parameter>init_expr</parameter> が <replaceable>M</replaceable> 個のキーワードを保持しているとすると、各多重定義の先頭の <replaceable>N</replaceable> – <replaceable>M</replaceable> 個の引数に使用される。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザはクラスのコンストラクタを容易に Python へエクスポートできる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class F&gt;</modifier>
	      <methodname>def</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Fn</type>
		<parameter>fn</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Fn, class A1&gt;</modifier>
	      <methodname>def</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Fn</type>
		<parameter>fn</parameter>
	      </methodparam>
	      <methodparam>
		<type>A1 const&amp;</type>
		<parameter>a1</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Fn, class A1, class A2&gt;</modifier>
	      <methodname>def</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Fn</type>
		<parameter>fn</parameter>
	      </methodparam>
	      <methodparam>
		<type>A1 const&amp;</type>
		<parameter>a1</parameter>
	      </methodparam>
	      <methodparam>
		<type>A2 const&amp;</type>
		<parameter>a2</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Fn, class A1, class A2, class A3&gt;</modifier>
	      <methodname>def</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Fn</type>
		<parameter>fn</parameter>
	      </methodparam>
	      <methodparam>
		<type>A1 const&amp;</type>
		<parameter>a1</parameter>
	      </methodparam>
	      <methodparam>
		<type>A2 const&amp;</type>
		<parameter>a2</parameter>
	      </methodparam>
	      <methodparam>
		<type>A3 const&amp;</type>
		<parameter>a3</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		  <itemizedlist>
		    <listitem>
		      <para>
			<parameter>a1</parameter> が <nonterminal def="" linkend="v2.overloads.overload-dispatch-expression">overload-dispatch-expression</nonterminal> の結果である場合、有効なのは 2 番目の形式のみであり <parameter>fn</parameter> は<glossterm baseform="arity">引数長</glossterm>が <type>A1</type> の<link linkend="v2.overloads.overload-dispatch-expression">最大引数長</link>と同じである関数かメンバ関数へのポインタでなければならない。
		      </para>
		    </listitem>
		  </itemizedlist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <type>Fn</type> の引数型列の接頭辞 <replaceable>P</replaceable> それぞれについて、その長さが <type>A1</type>の<link linkend="v2.overloads.overload-dispatch-expression">最小引数長</link>であるものから、拡張クラスに <methodname>name(...)</methodname> メソッドの多重定義を追加する。生成された各多重定義は、<parameter>a1</parameter> の<link linkend="v2.CallPolicies">呼び出しポリシー</link>のコピーを使用して <parameter>a1</parameter> の <nonterminal def="">call-expression</nonterminal> を <replaceable>P</replaceable> とともに呼び出す。<type>A1</type> の合法な接頭辞の最長のものが<replaceable>N</replaceable> 個の型を有しており <parameter>a1</parameter> が <replaceable>M</replaceable> 個のキーワードを保持しているとすると、各多重定義の先頭の <replaceable>N</replaceable> – <replaceable>M</replaceable> 個の引数に使用される。
		  </para>
		  <itemizedlist>
		    <listitem>
		      <para>
			それ以外の場合、<parameter>fn</parameter> に対してメソッドの多重定義を 1 つ構築する。<type>Fn</type> は null であってはならない。
		      </para>
		      <itemizedlist>
			<listitem>
			  <para>
			    <parameter>fn</parameter> が関数ポインタである場合、第 1 引数は <type>U</type> 、<type>U cv&amp;</type> 、<type>U cv*</type> 、<type>U cv* const&amp;</type> のいずれか（<type>T*</type> が <type>U*</type> に変換可能とする）でなければならない。<parameter>a1</parameter> から <parameter>a3</parameter> が与えられた場合、下表から任意の順番であってよい。
			  </para>
			</listitem>
			<listitem>
			  <para>
			    上記以外で <parameter>fn</parameter> がメンバ関数へのポインタである場合、参照先は <type>T</type> かその公開基底クラスでなければならない。<parameter>a1</parameter> から <parameter>a3</parameter> が与えられた場合、下表から任意の順番であってよい。
			  </para>
			</listitem>
			<listitem>
			  <para>
			    それ以外の場合、<type>Fn</type> は <classname linkend="v2.object.object-spec">object</classname> かその派生型でなければならない。<parameter>a1</parameter> から <parameter>a2</parameter> が与えられた場合、下表の 2 行目までから任意の順番であってよい。<parameter>fn</parameter> が<link xlink:href="http://docs.python.jp/2/library/functions.html#callable">呼び出し可能</link>でなければならない。
			  </para>
			</listitem>
		      </itemizedlist>
		      <informaltable>
			<thead>
			  <tr>
			    <th>名前</th>
			    <th>要件・型特性</th>
			    <th>効果</th>
			  </tr>
			</thead>
			<tbody>
			  <tr>
			    <td>docstring</td>
			    <td><glossterm baseform="ntbs">ntbs</glossterm>。</td>
			    <td>値は結果の多重定義メソッドの <property>__doc__</property> 属性に束縛される。それ以前の多重定義でドキュメンテーション文字列が与えられている場合は、改行 2 文字と新しいドキュメンテーション文字列がそこに追加される。</td>
			  </tr>
			  <tr>
			    <td>policies</td>
			    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
			    <td>結果の多重定義メソッドの呼び出しポリシーとしてコピーが使用される。</td>
			  </tr>
			  <tr>
			    <td>keywords</td>
			    <td><parameter>fn</parameter> の<glossterm baseform="arity">引数長</glossterm>を超えることがないことを指定する <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> の結果。</td>
			    <td>結果の多重定義メソッドの呼び出しポリシーとしてコピーが使用される。</td>
			  </tr>
			</tbody>
		      </informaltable>
		    </listitem>
		  </itemizedlist>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>class_&amp;</type>
	      <methodname>staticmethod</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm> であり、多重定義がすべて定義済みのメソッドの名前。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    既存の名前 <replaceable>x</replaceable> の属性を Python の <code language="Python">staticmethod(x)</code> 呼び出し結果で置換する。当該メソッドが静的でありオブジェクトを渡さないことを指定する。これは以下の Python 文と等価である。
		  </para>
		  <programlisting language="Python">setattr(self, name, staticmethod(getattr(self, name)))</programlisting>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>注意：</term>
		<listitem>
		  <para>
		    <code language="C++">staticmethod(name)</code> 呼び出し後に <code language="C++">def(name,...)</code> を呼び出すと、<exceptionname>RuntimeError</exceptionname> を<glossterm baseform="raise">送出する</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;<replaceable>unspecified</replaceable>&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def</methodname>
	      <methodparam>
		<type><link linkend="v2.operators.operator_-spec">detail::operator_</link>&lt;<replaceable>unspecified</replaceable>&gt;</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <link linkend="v2.operators">ここ</link>に示す Python の<link xlink:href="http://docs.python.jp/2/library/operator.html">特殊関数</link>を追加する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class U&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>setattr</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>U const&amp;</type>
		<parameter>u</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <parameter>u</parameter> を Python へ変換し、拡張クラスの属性辞書に追加する。
		  </para>
		  <programlisting language="C++"><function xlink:href="http://docs.python.jp/2/c-api/object.html#PyObject_SetAttrString">PyObject_SetAttrString</function>(this-&gt;ptr(), name, <methodname linkend="v2.object.object-spec-ctors">object</methodname>(u).ptr());</programlisting>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Get&gt;</modifier>
	      <type>void</type>
	      <methodname>add_property</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Get const&amp;</type>
		<parameter>fget</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>doc</parameter>
		<initializer>0</initializer>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Get, class Set&gt;</modifier>
	      <type>void</type>
	      <methodname>add_property</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Get const&amp;</type>
		<parameter>fget</parameter>
	      </methodparam>
	      <methodparam>
		<type>Set const&amp;</type>
		<parameter>fset</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>doc</parameter>
		<initializer>0</initializer>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    新しい Python の <classname xlink:href="http://www.python.org/2.2.2/descrintro.html#property">property</classname> クラスインスタンスを作成し、<code language="C++"><methodname linkend="v2.object.object-spec-ctors">object</methodname>(fget)</code>（2 番目の形式では <code language="C++"><methodname linkend="v2.object.object-spec-ctors">object</methodname>(fset)</code> も）および（省略可能な）ドキュメンテーション文字列 <parameter>doc</parameter> をコンストラクタに渡す。最後にこのプロパティを構築中の Python のクラスオブジェクトに与えられた属性名 <parameter>name</parameter> で追加する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザは、Python の属性アクセス構文で呼び出せる関数を容易にエクスポートできる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Get&gt;</modifier>
	      <type>void</type>
	      <methodname>add_static_property</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Get const&amp;</type>
		<parameter>fget</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class Get, class Set&gt;</modifier>
	      <type>void</type>
	      <methodname>add_static_property</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>Get const&amp;</type>
		<parameter>fget</parameter>
	      </methodparam>
	      <methodparam>
		<type>Set const&amp;</type>
		<parameter>fset</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    Boost.Python.StaticProperty オブジェクトを作成し、<code language="C++"><methodname linkend="v2.object.object-spec-ctors">object</methodname>(fget)</code>（2 番目の形式では <code language="C++"><methodname linkend="v2.object.object-spec-ctors">object</methodname>(fset)</code> も）をコンストラクタに渡す。最後にこのプロパティを構築中の Python のクラスオブジェクトに与えられた属性名 <parameter>name</parameter> で追加する。StaticProperty は先頭の <parameter>self</parameter> 引数なしで呼び出せる Python の <classname xlink:href="http://www.python.org/2.2.2/descrintro.html#property">property</classname> クラスの特殊な派生クラスである。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザは、Python の属性アクセス構文で呼び出せる関数を容易にエクスポートできる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class D&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def_readonly</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>D T::*</type>
		<parameter>pm</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>doc</parameter>
		<initializer>0</initializer>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class D&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def_readonly</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>D const&amp;</type>
		<parameter>d</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <parameter>name</parameter> は Python の<link xlink:href="http://docs.python.jp/2/reference/lexical_analysis.html#identifiers">識別子の名前付け規約</link>にしたがった <glossterm baseform="ntbs">ntbs</glossterm>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    それぞれ、
		  </para>
		  <programlisting language="C++">this-&gt;add_property(name, <function linkend="v2.data_members.make_getter-spec">make_getter</function>(pm), doc);</programlisting>
		  <para>
		    および
		  </para>
		  <programlisting language="C++">this-&gt;add_static_property(name, <function linkend="v2.data_members.make_getter-spec">make_getter</function>(d));</programlisting>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザは、Python から自然な構文で取得可能なクラスのデータメンバや自由変数を容易にエクスポートできる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class D&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def_readwrite</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>D T::*</type>
		<parameter>pm</parameter>
	      </methodparam>
	      <methodparam>
		<type>char const*</type>
		<parameter>doc</parameter>
		<initializer>0</initializer>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;class D&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def_readwrite</methodname>
	      <methodparam>
		<type>char const*</type>
		<parameter>name</parameter>
	      </methodparam>
	      <methodparam>
		<type>D&amp;</type>
		<parameter>d</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    それぞれ、
		  </para>
		  <programlisting language="C++">this-&gt;add_property(name, <function linkend="v2.data_members.make_getter-spec">make_getter</function>(pm), <function linkend="v2.data_members.make_setter-spec">make_setter</function>(pm), doc);</programlisting>
		  <para>
		    および
		  </para>
		  <programlisting language="C++">this-&gt;add_static_property(name, <function linkend="v2.data_members.make_getter-spec">make_getter</function>(d), <function linkend="v2.data_members.make_setter-spec">make_setter</function>(pm));</programlisting>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザは、Python から自然な構文で取得・設定可能なクラスのデータメンバや自由変数を容易にエクスポートできる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>template &lt;typename PickleSuite&gt;</modifier>
	      <type>class_&amp;</type>
	      <methodname>def_pickle</methodname>
	      <methodparam>
		<type>PickleSuite const&amp;</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <type>PickleSuite</type> は <classname linkend="v2.pickle">pickle_suite</classname> の公開派生型でなければならない。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    次の特殊な属性およびメソッドの合法な組み合わせを定義する：<methodname>__getinitargs__</methodname> 、<methodname>__getstate__</methodname> 、<methodname>__setstate__</methodname> 、<property>__getstate_manages_dict__</property> 、<property>__safe_for_unpickling__</property> 、<methodname>__reduce__</methodname>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ユーザは、ラップしたクラスについて完全な pickle サポートを確立するための<link linkend="v2.pickle">高水準インターフェイスを容易に使用</link>できる。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>class_&amp;</type>
	      <methodname>enable_pickling</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <methodname>__reduce__</methodname> メソッドと <property>__safe_for_unpickling__</property> 属性を定義する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    <function>def_pickle()</function> の軽量な代替。Python から <link linkend="v2.pickle">pickle サポート</link>の実装を有効にする。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.class.bases-spec">
      <title><classname>bases&lt;T1, T2, ...T<replaceable>N</replaceable>&gt;</classname> クラステンプレート</title>
      <para>
	<classname>class_</classname>&lt;...&gt; のインスタンス化において基底クラスのリストを記述するのに使用する <link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/forward-sequence.html">MPL シーケンス</link>。
      </para>

      <section xml:id="v2.class.bases-spec-synopsis">
	<title><classname>bases</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;T1 = <replaceable>unspecified</replaceable>,...Tn = <replaceable>unspecified</replaceable>&gt;
  struct bases
  {};
}}</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.class.examples">
    <title>例</title>
    <para>
      次のような C++ クラス宣言があるとすると、
    </para>
    <programlisting language="C++">class Foo : public Bar, public Baz
{
 public:
   Foo(int x, char const* y);
   Foo(double);

   std::string const&amp; name() { return m_name; }
   void name(char const*);

   double value; // 公開データ
 private:
   ...
};</programlisting>
    <para>
      対応する Boost.Python 拡張クラスは以下のように作成できる。
    </para>
    <programlisting language="C++">using namespace boost::python;

class_&lt;Foo,bases&lt;Bar,Baz&gt; &gt;("Foo",
          "これは Foo のドキュメンテーション文字列。"
          "Foo 拡張クラスの記述がここに入る",

          init&lt;int,char const*&gt;(args("x","y"), "__init__ のドキュメンテーション文字列")
          )
   .def(init&lt;double&gt;())
   .def("get_name", &amp;Foo::get_name, return_internal_reference&lt;&gt;())
   .def("set_name", &amp;Foo::set_name)
   .def_readwrite("value", &amp;Foo::value)
   ;</programlisting>
  </section>
</section>
