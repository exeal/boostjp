<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.extract">
  <title>boost/python/extract.hpp</title>

  <section xml:id="v2.extract.introduction">
    <title>はじめに</title>
    <para>
      一般的な Python オブジェクトから C++ オブジェクトの値を抽出する機構をエクスポートする。<classname>extract&lt;...&gt;</classname> は <classname linkend="v2.object.object-spec">object</classname> を特定の <link linkend="v2.ObjectWrapper.ObjectWrapper-concept">ObjectWrapper</link> に「ダウンキャスト」するのにも使用できるということに注意していただきたい。可変の Python 型について同じ型で呼び出すと（例えば <code language="Python">list([1,2])</code>）一般的にはその引数の<emphasis>コピー</emphasis>が作成されるため、これが元のオブジェクトにおける <link linkend="v2.ObjectWrapper.ObjectWrapper-concept">ObjectWrapper</link> インターフェイスにアクセスする唯一の方法となる可能性がある。
    </para>
  </section>

  <section xml:id="v2.extract.classes">
    <title>クラス</title>

    <section xml:id="v2.extract.extract-spec">
      <title><classname>extract</classname> クラステンプレート</title>
      <para>
	<classname>extract&lt;T&gt;</classname> を使用すると <classname linkend="v2.object.object-spec">object</classname> のインスタンスから任意の C++ 型の値を抽出できる。2 つの使用方法をサポートする：
      </para>
      <orderedlist>
	<listitem>
	  <para>
	    <code language="C++">extract&lt;T&gt;(o)</code> は、<type>T</type> へ暗黙に変換可能な一時オブジェクトである（オブジェクトの関数呼び出し演算子による明示的な変換も可能である）。しかしながら <varname>o</varname> から型 <type>T</type> のオブジェクトへの変換が利用できない場合は、Python の <exceptionname>TypeError</exceptionname> 例外を<glossterm baseform="raise">送出する</glossterm>。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <code language="C++">extract&lt;T&gt; x(o);</code> は、例外を投げることなく変換が可能か問い合わせる <methodname>check()</methodname> メンバ関数を持つ抽出子を構築する。
	  </para>
	</listitem>
      </orderedlist>

      <section xml:id="v2.extract.extract-spec-synopsis">
	<title><classname>extract</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;class T&gt;
  struct extract
  {
      typedef <replaceable>unspecified</replaceable> result_type;

      extract(PyObject*);
      extract(object const&amp;);

      result_type operator()() const;
      operator result_type() const;

      bool check() const;
  };
}}</programlisting>
      </section>

      <section xml:id="v2.extract.extract-spec-ctors">
	<title><classname>extract</classname> クラステンプレートのコンストラクタおよびデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>extract</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <constructorsynopsis language="C++">
	      <methodname>extract</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter/>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    第 1 形式では <parameter>p</parameter> は非 null でなければならない。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    コンストラクタの引数が管理する Python オブジェクトへのポインタを格納する。特にオブジェクトの参照カウントは増加しない。抽出子の変換関数が呼び出される前にオブジェクトが破壊されないようにするのはユーザの責任である。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.extract.extract-spec-observers">
	<title><classname>extract</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>result_type</type>
	      <methodname>operator()</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <methodname>operator result_type</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    格納したポインタを <type>result_type</type> へ変換する。これは <type>T</type> か <type>T const&amp;</type> である。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    格納したポインタが参照するものに対応する <type>result_type</type> のオブジェクト。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    そのような変換が不可能な場合は <exceptionname linkend="v2.errors.error_already_set-spec">error_already_set</exceptionname>（<exceptionname>TypeError</exceptionname> を設定する）。実際に使用している変換器が未規定の他の例外を投げる可能性がある。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>bool</type>
	      <methodname>check</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    なし。特に戻り値が <constant>true</constant> であっても <methodname>operator result_type()</methodname> か <methodname>operator()()</methodname> が例外を投げないとは限らないことに注意していただきたい。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    格納したポインタから <type>T</type> への変換が不可能な場合のみ <constant>false</constant>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.extract.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <cstdio>
using namespace boost::python;
int Print(str s)
{ 
   // Python の文字列オブジェクトから C の文字列を抽出する
   char const* c_str = extract<char const*>(s);

   // printf で印字する
   std::printf("%s\n", c_str);

   // Python の文字列の長さを取得し、整数へ変換する
   return extract<int>(s.attr("__len__")())
}]]></programlisting>
    <para>
      以下は <classname>extract&lt;...&gt;</classname> と <classname linkend="v2.class.class_-spec">class_&lt;...&gt;</classname> を使用して、ラップした C++ クラスのインスタンスを作成しアクセスする例である。
    </para>
    <programlisting language="C++"><![CDATA[struct X
{
   X(int x) : v(x) {}
   int value() { return v; }
 private:
   int v;
};

BOOST_PYTHON_MODULE(extract_ext)
{
    object x_class(
       class_<X>("X", init<int>())
          .def("value", &X::value))
          ;
        
    // Python のインターフェイスを介して X のオブジェクトをインスタンス化する。
    // 寿命は以降、x_objが管理する。
    object x_obj = x_class(3);

    // Python のオブジェクトを使用せずに C++ オブジェクトへの参照を取得する
    X& x = extract<X&>(x_obj);
    assert(x.value() == 3);
}]]></programlisting>
  </section>
</section>
