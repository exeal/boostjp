<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.scope">
  <title>boost/python/scope.hpp</title>

  <section xml:id="v2.scope.introduction">
    <title>はじめに</title>
    <para>
      Python のスコープ（名前空間）を問い合わせたり制御する機能を定義する。このスコープには新しくラップするクラスや関数を追加できる。
    </para>
  </section>

  <section xml:id="v2.scope.classes">
    <title>クラス</title>

    <section xml:id="v2.scope.scope-spec">
      <title><classname>scope</classname> クラス</title>
      <para>
	<classname>scope</classname> クラスは、新しい拡張クラスおよびラップした関数がその属性として定義される Python の名前空間を制御する（自分自身に対応した）グローバルな Python オブジェクトを持つ。新しい <classname>scope</classname> オブジェクトをデフォルトコンストラクタで構築すると、そのオブジェクトは対応するグローバルな Python のオブジェクトに束縛される。<classname>scope</classname> オブジェクトを引数付きで構築すると、対応するグローバルな Python のオブジェクトを引数が保持するオブジェクトへ変更する。これはこの <classname>scope</classname> オブジェクトの寿命が終わるまで続き、その時点で対応するグローバルな Python オブジェクトは <classname>scope</classname> オブジェクトを構築する前の状態に復元する。
      </para>

      <section xml:id="v2.scope.scope-spec-synopsis">
	<title><classname>scope</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  class scope : public <classname linkend="v2.scope.object-spec">object</classname>
  {
   public:
      scope(scope const&amp;);
      scope(object const&amp;);
      scope();
      ~scope()
   private:
      void operator=(scope const&amp;);
  };
}}</programlisting>
      </section>

      <section xml:id="v2.scope.scope-spec-ctors">
	<title><classname>scope</classname> クラスのコンストラクタおよびデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>explicit</modifier>
	      <methodname>scope</methodname>
	      <methodparam>
		<type>scope const&amp;</type>
		<parameter>x</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <constructorsynopsis language="C++">
	      <modifier>explicit</modifier>
	      <methodname>scope</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>x</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <para>
	      現在のスコープ相当オブジェクトへの参照を格納し、スコープ相当オブジェクトに <code language="C++">x.ptr()</code> が参照するオブジェクトを設定する。<classname>object</classname> 基底クラスを <varname>x</varname> で初期化する。
	    </para>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>scope</methodname>
	      <void/>
	    </constructorsynopsis>
	    <para>
	      現在のスコープ相当オブジェクトへの参照を格納する。<classname>object</classname> 基底クラスを現在のスコープ相当オブジェクトで初期化する。モジュール初期化関数の外部では、現在の相当 Python オブジェクトは <constant>None</constant> である。
	    </para>
	  </listitem>

	  <listitem>
	    <destructorsynopsis language="C++">
	      <methodname>~scope</methodname>
	      <void/>
	    </destructorsynopsis>
	    <para>
	      現在の相当 Python オブジェクトを格納したオブジェクトに設定する。
	    </para>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.scope.examples">
    <title>例</title>
    <para>
      以下の例は、スコープの設定を使用して入れ子クラスを定義する方法を示している。
    </para>
    <para>
      C++ のモジュール定義：
    </para>
    <programlisting language="C++">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/class.hpp&gt;
#include &lt;boost/python/scope.hpp&gt;
using namespace boost::python;

struct X
{
  void f() {}

  struct Y { int g() { return 42; } };
};

BOOST_PYTHON_MODULE(nested)
{
   // 現在の（モジュールの）スコープにいくつか定数を追加する
   scope().attr("yes") = 1;
   scope().attr("no") = 0;

   // 現在のスコープを変更する
   scope outer
       = class_&lt;X&gt;("X")
            .def("f", &amp;X::f)
            ;

   // 現在のスコープ X でクラス Y を定義する
   class_&lt;X::Y&gt;("Y")
      .def("g", &amp;X::Y::g)
      ;
}</programlisting>
    <para>
      Python の対話例：
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import nested</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>nested.yes</userinput>
<computeroutput>1</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>y = nested.X.Y()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>y.g()</userinput>
<computeroutput>42</computeroutput></screen>
  </section>
</section>
