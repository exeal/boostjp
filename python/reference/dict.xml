<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.dict">
  <title>boost/python/dict.hpp</title>

  <section xml:id="v2.dict.introduction">
    <title>はじめに</title>
    <para>
      Python の <classname xlink:href="http://docs.python.jp/2/c-api/dict.html">dict</classname> 型に対する <link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> をエクスポートする。
    </para>
  </section>

  <section xml:id="v2.dict.classes">
    <title>クラス</title>

    <section xml:id="v2.dict.dict-spec">
      <title><classname>dict</classname> クラス</title>
      <para>
	Python の組み込み <classname>dict</classname> 型の<link xlink:href="http://docs.python.jp/2/c-api/mapping.html">マップ型プロトコル</link>をエクスポートする。以下に定義するコンストラクタとメンバ関数のセマンティクスを完全に理解するには、<link linkend="v2.ObjectWrapper.TypeWrapper-concept">TypeWrapper</link> コンセプトの定義を読むことである。<classname>dict</classname> は <classname linkend="v2.object.object-spec">object</classname> から公開派生しているので、<classname>object</classname> の公開インターフェイスは <classname>dict</classname> のインスタンスにも当てはまる。
      </para>

      <section xml:id="v2.dict.dict-spec-synopsis">
	<title><classname>dict</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   class dict : public object
   {
      dict();

      template< class T >
      dict(T const & data);

      // 変更
      void clear();
      dict copy();

      template <class T1, class T2>
      tuple popitem();

      template <class T>
      object setdefault(T const &k);

      template <class T1, class T2>
      object setdefault(T1 const & k, T2 const & d);

      void update(object_cref E);
 
      template< class T >
      void update(T const & E);

      // オブザーバ
      list values() const;
    
      object get(object_cref k) const;

      template<class T>
      object get(T const & k) const;

      object get(object_cref k, object_cref d) const;
      object get(T1 const & k, T2 const & d) const;

      bool has_key(object_cref k) const;

      template< class T >
      bool has_key(T const & k) const;

      list items() const;
      object iteritems() const;
      object iterkeys() const;
      object itervalues() const;
      list keys() const;
  };
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.dict.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[using namespace boost::python;
dict swap_object_dict(object target, dict d)
{
    dict result = extract<dict>(target.attr("__dict__"));
    target.attr("__dict__") = d;
    return result;
}]]></programlisting>
  </section>
</section>
