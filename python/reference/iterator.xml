<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.iterator">
  <title>boost/python/iterator.hpp</title>

  <section xml:id="v2.iterator.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/iterator.hpp&gt;</filename> は、C++ の<link xlink:href="http://www.sgi.com/tech/stl/Container.html">コンテナ</link>と<link xlink:href="http://www.sgi.com/tech/stl/Iterators.html">イテレータ</link>から <link xlink:href="http://docs.python.jp/2/library/stdtypes.html#typeiter">Python のイテレータ</link>を作成するための型と関数を提供する。ある <classname>class_</classname> がランダムアクセスイテレータをサポートする場合、この機能を使用するより <methodname xlink:href="http://docs.python.jp/2/reference/datamodel.html#sequence-types">__getitem__</methodname>（シーケンスプロトコルともいう）を実装したほうがよい。Python は自動的にイテレータ型を作成し（<function xlink:href="http://docs.python.jp/2/library/functions.html#iter">iter()</function> を見よ）、各アクセスは範囲チェックが行われ、不正な C++ イテレータを介してアクセスする可能性もない。
    </para>
  </section>

  <section xml:id="v2.iterator.classes">
    <title>クラス</title>

    <section xml:id="v2.iterator.iterator-spec">
      <title><classname>iterator</classname> クラステンプレート</title>
      <para>
	<classname>iterator&lt;C, P&gt;</classname> のインスタンスは、呼び出し可能な Python オブジェクトへの参照を保持する。このオブジェクトは Python から呼び出され、<type>C</type> へ変換可能な単一の引数cを受け取り、[<code language="C++">c.begin()</code>,<code language="C++">c.end()</code>) を走査する Python イテレータを作成する。省略可能な <link linkend="v2.CallPolicies">CallPolicies</link> である <type>P</type> は、走査中に要素をどのように返すか制御するのに使用する。
      </para>
      <para>
	以下の表において、<varname>c</varname> は <type>Container</type> のインスタンスである。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>テンプレート引数</th>
	    <th>要件</th>
	    <th>セマンティクス</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>Container</type></td>
	    <td>[<code language="C++">c.begin()</code>,<code language="C++">c.end()</code>) が合法な<link xlink:href="http://www.sgi.com/tech/stl/Iterators.html">イテレータ範囲</link>である。</td>
	    <td>結果はその引数を <varname>c</varname> に変換し、<code language="C++">c.begin()</code> および <code language="C++">c.end()</code> を呼び出しイテレータを得る。<type>Container</type> の <code language="C++">const</code> 版 <methodname>begin()</methodname> および <methodname>end()</methodname> 関数を呼び出すには <code language="C++">const</code> でなければならない。</td>
	    <td/>
	  </tr>
	  <tr>
	    <td><type>NextPolicies</type></td>
	    <td><link linkend="v2.CallPolicies.CallPolicies-concept">CallPolicies</link> のデフォルトコンストラクト可能なモデル。</td>
	    <td>結果のイテレータの <methodname>next()</methodname> メソッドに適用される。</td>
	    <td>常に内部的な C++ イテレータを逆参照した結果のコピーを作成する、未規定の <link linkend="v2.CallPolicies.CallPolicies-concept">CallPolicies</link> モデル。</td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.iterator.iterator-spec-synopsis">
	<title><classname>iterator</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class Container
             , class NextPolicies = unspecified>
  struct iterator : object
  {
      iterator();
  };
}}]]></programlisting>
      </section>

      <section xml:id="v2.iterator.iterator-spec-constructors">
	<title><classname>iterator</classname> クラステンプレートのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>iterator</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    基底クラスを以下の結果で初期化する。
		  </para>
		  <programlisting language="C++"><![CDATA[range<NextPolicies>(&iterators<Container>::begin, &iterators<Container>::end)]]></programlisting>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    <code language="C++">this-&gt;get()</code> は、上記のとおり Python のイテレータを作成するPythonの呼び出し可能オブジェクトを指す。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    ラップする C++ クラスが <methodname>begin()</methodname> および <methodname>end()</methodname> を持つようなありふれた場合について、イテレータを容易に作成する方法を提供する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.iterator.iterators-spec">
      <title><classname>iterators</classname> クラステンプレート</title>
      <para>
	引数の <methodname>begin()</methodname> および <methodname>end()</methodname> メンバ関数を確実に呼び出す方法を提供するユーティリティクラスである。C++ 標準ライブラリにおけるコンテナについて、メンバ関数のアドレスを取る移植可能な方法はないので、それらをラップする場合に <classname>iterators&lt;&gt;</classname> は特に有効である。
      </para>
      <para>
	以下の表において、<varname>x</varname> は <type>C</type> のインスタンスである。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>要求する合法な式</th>
	    <th>型</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><code language="C++">x.begin()</code></td>
	    <td><type>C</type> が <code language="C++">const</code> な型であれば <type>C::const_iterator</type> へ変換可能。そうでなければ <type>C::iterator</type> へ変換可能。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">x.end()</code></td>
	    <td><type>C</type> が <code language="C++">const</code> な型であれば <type>C::const_iterator</type> へ変換可能。そうでなければ <type>C::iterator</type> へ変換可能。</td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.iterator.iterators-spec-synopsis">
	<title><classname>iterators</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class C>
  struct iterators
  {
      typedef typename C::[const_]iterator iterator;
      static iterator begin(C& x);
      static iterator end(C& x);
  };
}}]]></programlisting>
      </section>

      <section xml:id="v2.iterator.iterators-spec-types">
	<title><classname>iterators</classname> クラステンプレートの入れ子型</title>
	<para>
	  <type>C</type> が <code language="C++">const</code> 型の場合、
	</para>
	<programlisting language="C++">typedef typename C::const_iterator iterator;</programlisting>
	<para>
	  それ以外の場合、
	</para>
	<programlisting language="C++">typedef typename C::iterator iterator;</programlisting>
      </section>

      <section xml:id="v2.iterator.iterators-spec-statics">
	<title><classname>iterators</classname> クラステンプレートの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>iterator</type>
	      <methodname>begin</methodname>
	      <methodparam>
		<type>C&amp;</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">x.begin()</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>static</modifier>
	      <type>iterator</type>
	      <methodname>end</methodname>
	      <methodparam>
		<type>C&amp;</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">x.end()</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.iterator.functions">
    <title>関数</title>
    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class NextPolicies, class Target, class Accessor1, class Accessor2&gt;</funcsynopsisinfo>
	  <funcprototype>	    
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef><link linkend="v2.object.object-spec">object</link> <function>range</function></funcdef>
	    <paramdef>
	      <type>Accessor1</type>
	      <parameter>start</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Accessor2</type>
	      <parameter>finish</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class NextPolicies, class Accessor1, class Accessor2&gt;</funcsynopsisinfo>
	  <funcprototype>	    
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef><link linkend="v2.object.object-spec">object</link> <function>range</function></funcdef>
	    <paramdef>
	      <type>Accessor1</type>
	      <parameter>start</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Accessor2</type>
	      <parameter>finish</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class Accessor1, class Accessor2&gt;</funcsynopsisinfo>
	  <funcprototype>	    
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef><link linkend="v2.object.object-spec">object</link> <function>range</function></funcdef>
	    <paramdef>
	      <type>Accessor1</type>
	      <parameter>start</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Accessor2</type>
	      <parameter>finish</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		<type>NextPolicies</type> は、デフォルトコンストラクト可能な <link linkend="v2.CallPolicies.CallPolicies-concept">CallPolicies</link> モデル。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>
		第 1 形式は Python の呼び出し可能オブジェクトを作成する。このオブジェクトは呼び出されるとその引数を <type>Target</type> オブジェクト <varname>x</varname> に変換し、[<code language="C++"><function xlink:href="http://www.boost.org/libs/bind/bind.html">bind</function>(start,_1)(x)</code>,<code language="C++"><function xlink:href="http://www.boost.org/libs/bind/bind.html">bind</function>(finish,_1)(x)</code>) を走査する Python のイテレータを作成する。イテレータの <methodname>next()</methodname> 関数には <type>NextPolicies</type> を適用する。第 2 形式は、以下のように <type>Accessor1</type> から <type>Target</type> を推論する点以外は第 1 形式と同じである。
	      </para>
	      <itemizedlist>
		<listitem>
		  <para>
		    <type>Accessor1</type> が関数型の場合、<type>Target</type> はその第 1 引数の型。
		  </para>
		</listitem>
		<listitem>
		  <para>
		    <type>Accessor1</type> がデータメンバポインタ <type>R (T::*)</type> の場合、<type>Target</type> は <type>T</type> と同じ。
		  </para>
		</listitem>
		<listitem>
		  <para>
		    <type>Accessor1</type> がメンバ関数ポインタ <type>R (T::*)(<replaceable>arguments...</replaceable>) <replaceable>cv-opt</replaceable></type>（<replaceable>cv-opt</replaceable> は省略可能な <token>cv-qualifier</token>）の場合、<type>Target</type> は <type>T</type> と同じ。
		  </para>
		</listitem>
	      </itemizedlist>
	      <para>
		第 3 形式は、<type>NextPolicies</type> が常に内部的な C++ イテレータを逆参照した結果のコピーを作成する <link linkend="v2.CallPolicies.CallPolicies-concept">CallPolicies</link> の未規定のモデルであること以外は第 2 形式と同じである。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>根拠：</term>
	    <listitem>
	      <para>
		<function xlink:href="http://www.boost.org/libs/bind/bind.html">boost::bind()</function> を使用することで、関数、メンバ関数、データメンバポインタを通じて C++ イテレータへアクセスできる。ラップしたクラス型のシーケンス要素のコピーが高コストな場合、<type>NextPolicies</type> のカスタマイズが有効である（例えば <classname linkend="v2.return_internal_reference.return_internal_reference-spec">return_internal_reference</classname> を使用する）。<type>Accessor1</type> が関数オブジェクトであるか、対象型の基底クラスが他から推論される場合は、<type>Target</type> のカスタマイズが有効である。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.iterator.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>

#include <vector>

using namespace boost::python;
BOOST_PYTHON_MODULE(demo)
{
    class_<std::vector<double> >("dvec")
        .def("__iter__", iterator<std::vector<double> >())
        ;
}]]></programlisting>
    <para>
      より包括的な例が以下にある。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  <filename xlink:href="http://www.boost.org/libs/python/test/iterator.cpp">libs/python/test/iterator.cpp</filename>
	</para>
      </listitem>
      <listitem>
	<para>
	  <filename xlink:href="http://www.boost.org/libs/python/test/input_iterator.cpp">libs/python/test/input_iterator.cpp</filename>
	</para>
      </listitem>
      <listitem>
	<para>
	  <filename xlink:href="http://www.boost.org/libs/python/test/input_iterator.py">libs/python/test/input_iterator.py</filename>
	</para>
      </listitem>
    </itemizedlist>
  </section>
</section>
