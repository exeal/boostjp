<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.to_python_converter">
  <title>boost/python/to_python_converter.hpp</title>

  <section xml:id="v2.to_python_converter.introduction">
    <title>はじめに</title>
    <para>
      <classname>to_python_converter</classname> は与えられた C++ 型のオブジェクトから Python オブジェクトへの変換を登録する。
    </para>
  </section>

  <section xml:id="v2.to_python_converter.classes">
    <title>クラス</title>

    <section xml:id="v2.to_python_converter.to_python_converter-spec">
      <title><classname>to_python_converter</classname> クラステンプレート</title>
      <para>
	<classname>to_python_converter</classname> は、第 2 テンプレート引数の静的メンバ関数に対するラッパを追加し、変換器のレジストリへの挿入といった低水準の詳細を処理する。
      </para>
      <para>
	以下の表において <varname>x</varname> は <type>T</type> 型のオブジェクト。
      </para>
      <table>
	<caption><classname>to_python_converter</classname> のテンプレート引数</caption>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>説明</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>T</type></td>
	    <td/>
	    <td>変換元オブジェクトの C++ 型。</td>
	  </tr>
	  <tr>
	    <td><type>Conversion</type></td>
	    <td><code language="C++">p == 0</code> かつ <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/exceptions.html#PyErr_Occurred">>PyErr_Occurred</function>() != 0</code> の場合、<code language="C++">PyObject* p = Conversion::convert(x)</code></td>
	    <td>実際の変換を行う <methodname>convert</methodname> 静的メンバ関数を持つクラス型。</td>
	  </tr>
	  <tr>
	    <td><code language="C++">bool <parameter>has_get_pytype</parameter> = false</code></td>
	    <td><code language="C++">PyTypeObject const * p = Conversion::get_pytype()</code></td>
	    <td>
	      <para>
		<emphasis>省略可能なメンバ。</emphasis><type>Conversion</type> が <methodname>get_pytype</methodname> を持つ場合、この引数に対して <constant>true</constant> を与えなければならない。この引数が与えられた場合、<methodname>get_pytype</methodname> はこの変換を使用する関数の戻り値の型に対してドキュメントを生成するために使用される。<methodname>get_pytype</methodname> は <filename class="headerfile" linkend="v2.pytype_function">pytype_function.hpp</filename> のクラスと関数を使用して実装してもよい。
	      </para>
	      <note>
		<para>
		  後方互換性のため、この引数を渡す前に <symbol>BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</symbol> が定義されているチェックするとよい（<link linkend="v2.pytype_function.examples">ここ</link>を見よ）。
		</para>
	      </note>
	    </td>
	  </tr>
	</tbody>
      </table>

      <section xml:id="v2.to_python_converter.to_python_converter-spec-synopsis">
	<title><classname>to_python_converter</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class T, class Conversion, bool convertion_has_get_pytype_member=false>
  struct to_python_converter
  {
      to_python_converter();
  };
}}]]></programlisting>
      </section>

      <section xml:id="v2.to_python_converter.to_python_converter-spec-ctors">
	<title><classname>to_python_converter</classname> クラステンプレートのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>to_python_converter</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <methodname>Conversion::convert()</methodname> を実際の動作として使用する <wordasword>to_python</wordasword> 変換器を登録する。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.to_python_converter.examples">
    <title>例</title>
    <para>
      以下の例では、Python のドキュメントにある標準的な <link xlink:href="http://docs.python.jp/2/extending/newtypes.html#dnt-basics">noddy モジュール例</link>を実装したとして、関連する宣言を <filename class="headerfile">noddy.h</filename> に置いたものと仮定する。<type>noddy_NoddyObject</type> は極限なまでに単純な拡張型であるので、この例は少しばかりわざとらしい。すべての情報がその戻り値の型に含まれる関数をラップしている。
    </para>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/reference.hpp>
#include <boost/python/module.hpp>
#include "noddy.h"

struct tag {};
tag make_tag() { return tag(); }

using namespace boost::python;

struct tag_to_noddy
{
    static PyObject* convert(tag const& x)
    {
        return PyObject_New(noddy_NoddyObject, &noddy_NoddyType);
    }
    static PyTypeObject const* get_pytype()
    {
        return &noddy_NoddyType;
    }
};

BOOST_PYTHON_MODULE(to_python_converter)
{
    def("make_tag", make_tag);
    to_python_converter<tag, tag_to_noddy, true>(); // tag_to_noddy がメンバ get_pytype を持つので「true」
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import to_python_converter</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>def always_none():</userinput>
<userinput>...     return None
...</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>def choose_function(x):</userinput>
<userinput>...     if (x % 2 != 0):
...         return to_python_converter.make_tag
...     else:
...         return always_none
...</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>a = [ choose_function(x) for x in range(5) ]</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = [ f() for f in a ]</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>type(b[0])</userinput>
<computeroutput>&lt;type 'NoneType'&gt;</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>type(b[1])</userinput>
<computeroutput>&lt;type 'Noddy'&gt;</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>type(b[2])</userinput>
<computeroutput>&lt;type 'NoneType'&gt;</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>type(b[3])</userinput>
<computeroutput>&lt;type 'Noddy'&gt;</computeroutput></screen>
    </section>
  </section>
</section>
