<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.return_by_value">
  <title>boost/python/return_by_value.hpp</title>

  <section xml:id="v2.return_by_value.classes">
    <title>クラス</title>

    <section xml:id="v2.return_by_value-spec">
      <title><classname>return_by_value</classname> クラス</title>
      <para>
	<classname>return_by_value</classname> は、戻り値が新しいPythonオブジェクトへコピーされる参照型か値型を返すC++関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデルである。
      </para>

      <section xml:id="v2.return_by_value.return_by_value-spec-synopsis">
	<title><classname>return_by_value</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct return_by_value
    {
        template <class T> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.return_by_value.return_by_value-spec-metafunctions">
	<title><classname>return_by_value</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef <classname linkend="v2.to_python_direct.to_python_value-spec">to_python_value</classname>&lt;T&gt; type;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.return_by_value.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/return_by_value.hpp>
#include <boost/python/return_value_policy.hpp>

// ラップするクラス群
struct Bar { };

Bar global_bar;

// ラップする関数群：
Bar b1();
Bar& b2();
Bar const& b3();

// ラッパコード
using namespace boost::python;
template <class R>
void def_void_function(char const* name, R (*f)())
{
   def(name, f, return_value_policy<return_by_value>());
}

BOOST_PYTHON_MODULE(my_module)
{
    class_<Bar>("Bar");
    def_void_function("b1", b1);
    def_void_function("b2", b2);
    def_void_function("b3", b3);
}]]></programlisting>
    </section>

    <section>
      <title>Python 側</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from my_module import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = b1() # これらの呼び出しは</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = b2() # それぞれ新しい Bar オブジェクトを</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b = b3() # 個別に作成する</userinput></screen>
    </section>
  </section>
</section>
