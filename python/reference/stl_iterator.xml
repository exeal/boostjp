<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.stl_iterator">
  <title>boost/python/stl_iterator.hpp</title>

  <section xml:id="v2.stl_iterator.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/stl_iterator.hpp&gt;</filename> は、Python の走査可能オブジェクトから C++ のイテレータを作成する型を提供する。
    </para>
  </section>

  <section xml:id="v2.stl_iterator.classes">
    <title>クラス</title>

    <section xml:id="v2.stl_iterator.stl_input_iterator-spec">
      <title><classname>stl_input_iterator</classname> クラステンプレート</title>
      <para>
	<classname>stl_input_iterator&lt;T&gt;</classname> のインスタンスは Python のイテレータを保持し、それを STL アルゴリズムで使用できるよう適合させる。<classname>stl_input_iterator&lt;T&gt;</classname> は<link xlink:href="http://www.sgi.com/tech/stl/InputIterator.html">入力イテレータ</link>の要件を満たす。
      </para>
      <informaltable>
	<thead>
	  <tr>
	    <th>テンプレート引数</th>
	    <th>要件</th>
	    <th>セマンティクス</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><type>ValueType</type></td>
	    <td><type>ValueType</type> がコピー構築可能でなければならない。</td>
	    <td><classname>stl_input_iterator&lt;T&gt;</classname> のインスタンスを参照剥がしすると <type>ValueType</type> 型の rvalue が返る。</td>
	    <td>（なし）</td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.stl_iterator.stl_input_iterator-spec-synopsis">
	<title><classname>stl_input_iterator</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
  template &lt;class ValueType&gt;
  struct stl_input_iterator
  {
      typedef std::ptrdiff_t difference_type;
      typedef ValueType value_type;
      typedef ValueType* pointer;
      typedef ValueType reference;
      typedef std::input_iterator_tag iterator_category;

      stl_input_iterator();
      stl_input_iterator(<classname linkend="v2.object.object-spec">object</classname> const&amp; ob);

      stl_input_iterator&amp; operator++();
      stl_input_iterator operator++(int);

      ValueType operator*() const;

      friend bool operator==(stl_input_iterator const&amp; lhs, stl_input_iterator const&amp; rhs);
      friend bool operator!=(stl_input_iterator const&amp; lhs, stl_input_iterator const&amp; rhs);
  private:
      <classname linkend="v2.object.object-spec">object</classname> it; // 説明のためにのみ記載
      <classname linkend="v2.object.object-spec">object</classname> ob; // 説明のためにのみ記載
  };
}}</programlisting>
      </section>

      <section xml:id="v2.stl_iterator.stl_input_iterator-spec-constructors">
	<title><classname>stl_input_iterator</classname> クラステンプレートのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>stl_input_iterator</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    シーケンスの終端を表すのに使用する、末尾の直後を指す入力イテレータを作成する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    <code language="C++">this</code> が末尾の直後。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>stl_input_iterator</methodname>
	      <methodparam>
		<type>object const&amp;</type>
		<parameter>ob</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">ob.attr("__iter__")()</code> を呼び出し、結果の Python のイテレータオブジェクトを <code language="C++">this-&gt;it</code> に格納する。次に <code language="C++">this-&gt;it.attr("next")()</code> を呼び出し、結果を <code language="C++">this-&gt;ob</code> に格納する。シーケンスに走査するものが残っていない場合は <code language="C++">this-&gt;obにobject()</code> を設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    <code language="C++">this</code> が参照剥がし可能か末尾の直後。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.stl_iterator.stl_input_iterator-spec-modifiers">
	<title><classname>stl_input_iterator</classname> クラステンプレートの変更メソッド</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>stl_input_iterator&amp;</type>
	      <methodname>operator++</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">this-&gt;it.attr("next")()</code> を呼び出し、結果を <code language="C++">this-&gt;ob</code> に格納する。シーケンスに走査するものが残っていない場合は <code language="C++">this-&gt;obにobject()</code> を設定する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    <code language="C++">this</code> が参照剥がし可能か末尾の直後。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*this</code>。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>stl_input_iterator</type>
	      <methodname>operator++</methodname>
	      <methodparam>
		<type>int</type>
		<parameter/>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">stl_input_iterator tmp = *this; ++*this; return tmp;</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>事後条件：</term>
		<listitem>
		  <para>
		    <code language="C++">this</code> が逆参照可能か末尾の直後。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.stl_iterator.stl_input_iterator-spec-observers">
	<title><classname>stl_input_iterator</classname> クラステンプレートのオブザーバ</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>ValueType</type>
	      <methodname>operator*</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    シーケンス内の現在の要素を返す。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">extract&lt;ValueType&gt;(this-&gt;ob);</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>friend</modifier>
	      <type>bool</type>
	      <methodname>operator==</methodname>
	      <methodparam>
		<type>stl_input_iterator const&amp;</type>
		<parameter>lhs</parameter>
	      </methodparam>
	      <methodparam>
		<type>stl_input_iterator const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    両方のイテレータが参照剥がし可能であるか両方のイテレータが末尾の直後であれば真、それ以外は偽を返す。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">(lhs.ob == object()) == (rhs.ob == object())</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <modifier>friend</modifier>
	      <type>bool</type>
	      <methodname>operator!=</methodname>
	      <methodparam>
		<type>stl_input_iterator const&amp;</type>
		<parameter>lhs</parameter>
	      </methodparam>
	      <methodparam>
		<type>stl_input_iterator const&amp;</type>
		<parameter>rhs</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    両方のイテレータが参照剥がし可能であるか両方のイテレータが末尾の直後であれば偽、それ以外は真を返す。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">!(lhs == rhs)</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.stl_iterator.examples">
    <title>例</title>
    <programlisting language="C++"><![CDATA[#include <boost/python/object.hpp>
#include <boost/python/stl_iterator.hpp>

#include <list>

using namespace boost::python;
std::list<int> sequence_to_int_list(object const& ob)
{
    stl_input_iterator<int> begin(ob), end;
    return std::list<int>(begin, end);
}]]></programlisting>
  </section>
</section>
