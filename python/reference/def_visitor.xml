<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.def_visitor">
  <title>boost/python/def_visitor.hpp</title>

  <section xml:id="v2.def_visitor.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/def_visitor.hpp&gt;</filename> は、<classname linkend="v2.class">class_</classname> インターフェイスを分散させないよう <classname linkend="v2.class">class_</classname> の <methodname>def</methodname> メンバの機能を非侵入的に拡張する汎用的な訪問インターフェイスを提供する。<classname>def_visitor&lt;T&gt;</classname> クラステンプレートを宣言する。テンプレート引数は、その <methodname>visit</methodname> メンバ関数を介して実際の <methodname>def</methodname> 機能を提供する派生型 <type>DerivedVisitor</type> である。
    </para>
  </section>

  <section xml:id="v2.def_visitor.classes">
    <title>クラス</title>

    <section xml:id="v2.def_visitor.def_visitor-spec">
      <title><classname>def_visitor&lt;DerivedVisitor&gt;</classname> クラステンプレート</title>
      <para>
	<classname>def_visitor</classname> クラスは、その派生クラスを引数にとる（基底）クラスである。<classname>def_visitor</classname> はプロトコルクラスであり、派生クラスである <type>DerivedVisitor</type> はメンバ関数 <methodname>visit</methodname> を持たなければならない。<classname>def_visitor</classname> クラスが直接インスタンス化されることはなく、代わりに派生クラス <type>DerivedVisitor</type> のインスタンスが <classname linkend="v2.class">class_</classname> の <methodname>def</methodname> メンバ関数の引数として渡される。
      </para>

      <section xml:id="v2.def_visitor.def_visitor-synopsis">
	<title><classname>def_visitor</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python {

    template &lt;class DerivedVisitor&gt;
    class def_visitor {};
}</programlisting>
      </section>

      <section xml:id="v2.def_visitor.def_visitor-requirements">
	<title><classname>def_visitor</classname> の要件</title>
	<para>
	  クライアントが与える <type>DerivedVisitor</type> テンプレート引数は、
	</para>
	<itemizedlist>
	  <listitem>
	    <para>
	      <classname>def_visitor</classname> から非公開派生していなければならない
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <classname>def_visitor_access</classname> クラスへのフレンドアクセスを認めなければらない
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      下表に挙げる <methodname>visit</methodname> メンバ関数のいずれかあるいは両方を定義しなければらない
	    </para>
	    <informaltable>
	      <thead>
		<tr>
		  <th>式</th>
		  <th>戻り値の型</th>
		  <th>要件</th>
		  <th>効果</th>
		</tr>
	      </thead>
	      <tbody>
		<tr>
		  <td><code language="C++">visitor.visit(cls)</code></td>
		  <td><type>void</type></td>
		  <td><parameter>cls</parameter> は Python へラップする <classname linkend="v2.class">class_</classname> のインスタンス。<varname>visitor</varname> は <classname>def_visitor</classname> の派生クラス。</td>
		  <td><code language="C++">cls.def(visitor)</code> の呼び出しがこのメンバ関数へ転送される。</td>
		</tr>
		<tr>
		  <td><code language="C++">visitor.visit(cls, name, options)</code></td>
		  <td><type>void</type></td>
		  <td><parameter>cls</parameter> は <classname>class_</classname> のインスタンス、<parameter>name</parameter> は C 文字列。<parameter>visitor</parameter> は <classname>def_visitor</classname> の派生クラス。<parameter>options</parameter> は文脈固有のオプション引数。</td>
		  <td><code language="C++">cls.def(name, visitor)</code> または <code language="C++">cls.def(name, visitor, options)</code> の呼び出しがこのメンバ関数へ転送される。</td>
		</tr>
	      </tbody>
	    </informaltable>
	  </listitem>
	</itemizedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.def_visitor.examples">
    <title>例</title>
    <programlisting language="C++">class X {/*...*/};

class my_def_visitor : boost::python::def_visitor&lt;my_def_visitor&gt;
{
    friend class def_visitor_access;

    template &lt;class classT&gt;
    void visit(classT&amp; c) const
    {
        c
            .def("foo", &amp;my_def_visitor::foo)
            .def("bar", &amp;my_def_visitor::bar)
        ;
    }

    static void foo(X&amp; self);
    static void bar(X&amp; self);
};

BOOST_PYTHON_MODULE(my_ext)
{ 
    class_&lt;X&gt;("X")
        .def(my_def_visitor())
    ;
}</programlisting>
  </section>
</section>
