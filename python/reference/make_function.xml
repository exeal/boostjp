<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.make_function">
  <title>boost/python/make_function.hpp</title>

  <section xml:id="v2.make_function.introduction">
    <title>はじめに</title>
    <para>
      <function linkend="v2.make_function.make_function-spec">make_function()</function> および <function linkend="v2.make_function.make_constructor-spec">make_constructor()</function> は、<function linkend="v2.def.def-spec">def()</function> および <methodname linkend="v2.class.class_-spec-modifiers">class_&lt;&gt;::def()</methodname> が C++ の関数およびメンバ関数をラップする Python の呼び出し可能オブジェクトを生成するのに内部的に使用する関数である。
    </para>
  </section>

  <section xml:id="v2.make_function.functions">
    <title>関数</title>

    <section xml:id="v2.make_function.make_function-spec">
      <title>make_function</title>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_function</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_function</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies, class KeywordsOrSignature&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_function</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	  <paramdef>KeywordsOrSignature const&amp; <parameter>ks</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies, class Keywords, class Signature&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_function</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	  <paramdef>Keywords const&amp; <parameter>kw</parameter></paramdef>
	  <paramdef>Signature const&amp; <parameter>sig</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      <type>F</type> は関数ポインタ、またはメンバ関数ポインタ型。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">CallPolicies</link> のモデルでなければならない。<parameter>keywords</parameter> が与えられた場合、<parameter>f</parameter> の<glossterm linkend="glossary.arity">引数長</glossterm>を超えない <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> の結果でなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>効果：</term>
	  <listitem>
	    <para>
	      Python の呼び出し可能オブジェクトを作成する。このオブジェクトは Python から呼び出されると、引数を C++ に変換してfを呼び出す。<type>F</type> がメンバ関数へのポインタ型の場合、Python の第 1 引数が関数呼び出しの対象オブジェクト（<code language="C++">*this</code>）となり、残りの Python 引数は <parameter>f</parameter> に対する引数となる。
	    </para>
	    <itemizedlist>
	      <listitem>
		<para>
		  <parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">ここ</link>に述べるとおり関数に適用する。
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <parameter>keywords</parameter> が与えられた場合、結果の関数における最後の引数に適用する。
		</para>
	      </listitem>
	      <listitem>
		<para>
		  <type>Signature</type> が与えられた場合、<link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/front-extensible-sequence.html">MPL の先頭拡張可能列</link>のインスタンスでなければならない。列の先頭が関数の戻り値型、後続が引数の型である。シグニチャが推論できない関数オブジェクト型をラップする場合や、ラップする関数に渡す型をオーバーライドしたい場合は <type>Signature</type>を渡すとよい。
		</para>
	      </listitem>
	    </itemizedlist>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>戻り値：</term>
	  <listitem>
	    <para>
	      新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>注意：</term>
	  <listitem>
	    <para>
	      ポインタ型の引数は、Python から <constant>None</constant> が渡された場合に <literal>0</literal> となる可能性がある。<code language="C++">const</code> な参照型の引数は、ラップした関数を呼び出す間だけに生存する Python オブジェクトから作成された一時オブジェクトを指す可能性がある。例えば Python のリストからの変換過程で生成した <classname>std::vector</classname> がそうである。永続的な lvalue が必要な場合は、非 <code language="C++">const</code> 参照の引数を使うとよい。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section xml:id="v2.make_function.make_constructor-spec">
      <title>make_constructor</title>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_constructor</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_constructor</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies, class KeywordsOrSignature&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_constructor</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	  <paramdef>KeywordsOrSignature const&amp; <parameter>ks</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <funcsynopsis language="C++">
	<funcsynopsisinfo>template &lt;class F, class Policies, class Keywords, class Signature&gt;</funcsynopsisinfo>
	<funcprototype>
	  <?dbhtml funcsynopsis-style="ansi"?>
	  <funcdef><link linkend="v2.object.object-spec">object</link> <function>make_constructor</function></funcdef>
	  <paramdef>F <parameter>f</parameter></paramdef>
	  <paramdef>Policies const&amp; <parameter>policies</parameter></paramdef>
	  <paramdef>Keywords const&amp; <parameter>kw</parameter></paramdef>
	  <paramdef>Signature const&amp; <parameter>sig</parameter></paramdef>
	</funcprototype>
      </funcsynopsis>
      <variablelist spacing="compact">
	<varlistentry>
	  <term>要件：</term>
	  <listitem>
	    <para>
	      <type>F</type> は関数ポインタ型。<parameter>policies</parameter> が与えられた場合、<link linkend="v2.CallPolicies">CallPolicies</link> のモデルでなければならない。<parameter>keywords</parameter> が与えられた場合、<parameter>f</parameter> の<glossterm linkend="glossary.arity">引数長</glossterm>を超えない <nonterminal def="" linkend="v2.args.keyword-expression">keyword-expression</nonterminal> の結果でなければならない。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>効果：</term>
	  <listitem>
	    <para>
	      Python から呼び出されると引数を C++ に変換して <parameter>f</parameter> を呼び出す、Python の呼び出し可能オブジェクトを作成する。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>戻り値：</term>
	  <listitem>
	    <para>
	      新しい Python の呼び出し可能オブジェクトを保持する <classname linkend="v2.object.object-spec">object</classname> のインスタンス。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>
  </section>

  <section xml:id="v2.make_function.examples">
    <title>例</title>
    <para>
      以下でエクスポートする C++ 関数は、2 つの関数のうち 1 つをラップする呼び出し可能オブジェクトを返す。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/python/make_function.hpp>
#include <boost/python/module.hpp>

char const* foo() { return "foo"; }
char const* bar() { return "bar"; }

using namespace boost::python;
object choose_function(bool selector)
{
    if (selector)
        return boost::python::make_function(foo);
    else
        return boost::python::make_function(bar);
}

BOOST_PYTHON_MODULE(make_function_test)
{
    def("choose_function", choose_function);
}]]></programlisting>
    <para>
      Python からは次のように使用する。
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from make_function_test import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f = choose_function(1)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>g = choose_function(0)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f()</userinput>
<computeroutput>'foo'</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>g()</userinput>
<computeroutput>'bar'</computeroutput></screen>
  </section>
</section>
