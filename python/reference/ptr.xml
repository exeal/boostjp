<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.ptr">
  <title>boost/python/ptr.hpp</title>

  <section xml:id="v2.ptr.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">boost/python/ptr.hpp&gt;</filename> は <function>ptr()</function> 関数テンプレートを定義する。これによりオーバーライド可能な仮想関数の実装、Python の呼び出し可能オブジェクトの起動、あるいは C++ オブジェクトから Python への明示的な変換において C++ のポインタ値を Python に変換する方法を指定できる。通常、Python のコールバックにポインタを渡すと、Python のオブジェクトが懸垂参照を保持しないようポインタ先はコピーされる。新しい Python のオブジェクトが単にポインタ <varname>p</varname> のコピーを持つべきだということを指定するには、ユーザは <varname>p</varname> を直接渡すのではなく <code language="C++"><function linkend="v2.ptr.ptr-spec">ptr</function>(p)</code> を渡すようにする。このインターフェイスは同様に参照のコピーを抑止する <function xlink:href="http://www.boost.org/libs/bind/ref.html">boost::ref()</function> の類似品である。
    </para>
    <para>
      ptr(p) は <classname linkend="v2.ptr.is_pointer_wrapper-spec">is_pointer_wrapper&lt;&gt;</classname> メタ関数で検出可能な <classname linkend="v2.ptr.pointer_wrapper-spec">pointer_wrapper&lt;&gt;</classname> のインスタンスを返す。<classname linkend="v2.ptr.unwrap_pointer-spec">unwrap_pointer&lt;&gt;</classname> は <classname>pointer_wrapper&lt;&gt;</classname> から元のポインタ型を抽出するメタ関数である。これらのクラスは実装の詳細と考えてよい。
    </para>
  </section>

  <section xml:id="v2.ptr.functions">
    <title>ptr</title>
    <orderedlist>
      <listitem>
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;class T&gt;</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>pointer_wrapper&lt;T&gt; <function>ptr</function></funcdef>
	    <paramdef>T <parameter>x</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		<type>T</type> がポインタ型。
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<code language="C++"><classname linkend="v2.ptr.pointer_wrapper-spec">pointer_wrapper</classname>&lt;T&gt;(x)</code>
	      </para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>例外：</term>
	    <listitem>
	      <para>
		なし。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="v2.ptr.classes">
    <title>クラス</title>

    <section xml:id="v2.ptr.pointer_wrapper-spec">
      <title><classname>pointer_wrapper</classname> クラステンプレート</title>
      <para>
	<function linkend="v2.ptr.ptr-spec">ptr()</function> が返す「型の封筒（<foreignphrase xml:lang="en">envelope</foreignphrase>）」であり、Python のコールバックへ渡すポインタの参照セマンティクスを示すのに使用する。
      </para>

      <section xml:id="v2.ptr.pointer_wrapper-spec-synopsis">
	<title><classname>pointer_wrapper</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    template<class Ptr> class pointer_wrapper
    { 
     public:
        typedef Ptr type;

        explicit pointer_wrapper(Ptr x);
        operator Ptr() const;
        Ptr get() const;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.ptr.pointer_wrapper-spec-types">
	<title><classname>pointer_wrapper</classname> クラステンプレートの型</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++">typedef Ptr type;</programlisting>
	    <para>
	      ラップするポインタの型。
	    </para>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.ptr.pointer_wrapper-spec-ctors">
	<title><classname>pointer_wrapper</classname> クラステンプレートのコンストラクタおよびデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>explicit</modifier>
	      <methodname>pointer_wrapper</methodname>
	      <methodparam>
		<type>Ptr</type>
		<parameter>x</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <type>Ptr</type> がポインタ型。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <classname>pointer_wrapper&lt;&gt;</classname> に <varname>x</varname> を格納する。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>例外：</term>
		<listitem>
		  <para>
		    なし。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.ptr.pointer_wrapper-spec-observers">
	<title><classname>pointer_wrapper</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <methodname>operator Ptr</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>Ptr</type>
	      <methodname>get</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    格納しているポインタのコピー。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>根拠：</term>
		<listitem>
		  <para>
		    <classname>pointer_wrapper&lt;&gt;</classname> は実際のポインタ型の代理を意図しているが、時にはポインタを取得する明示的な方法があったほうがよい。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.ptr.metafunctions">
    <title>メタ関数</title>

    <section xml:id="v2.ptr.is_pointer_wrapper-spec">
      <title><classname>is_pointer_wrapper</classname> クラステンプレート</title>
      <para>
	引数が <classname>pointer_wrapper&lt;&gt;</classname> である場合に <property>value</property> が真となる単項メタ関数。
      </para>

      <section xml:id="v2.ptr.is_pointer_wrapper-spec-synopsis">
	<title><classname>is_pointer_wrapper</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    template<class T> class is_pointer_wrapper
    { 
        static unspecified value = ...;
    };
}}]]></programlisting>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<type>T</type> が <classname>pointer_wrapper&lt;&gt;</classname> の特殊化であれば <constant>true</constant>。<property>value</property> は未規定型の論理値へ変換可能な整数定数。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>
    </section>

    <section xml:id="v2.ptr.unwrap_pointer-spec">
      <title><classname>unwrap_pointer</classname> クラステンプレート</title>
      <para>
	<classname>pointer_wrapper&lt;&gt;</classname> の特殊化からラップしたポインタ型を抽出する単項メタ関数。
      </para>

      <section xml:id="v2.ptr.unwrap_pointer-spec-synopsis">
	<title><classname>unwrap_pointer</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    template<class T> class unwrap_pointer
    { 
        typedef unspecified type;
    };
}}]]></programlisting>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>
		<type>T</type> が <classname>pointer_wrapper&lt;&gt;</classname> の特殊化の場合、<type>T::type</type>。それ以外の場合は <type>T</type>。
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </section>
    </section>
  </section>

  <section xml:id="v2.ptr.examples">
    <title>例</title>
    <para>
      <function>ptr()</function> を使用してオブジェクトのコピーを抑止する例。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/python/call.hpp>
#include <boost/python/ptr.hpp>

class expensive_to_copy
{
   ...
};

void pass_as_arg(expensive_to_copy* x, PyObject* f)
{
   // Python の関数 f を呼び出し、*x を「ポインタで」参照する
   // Python オブジェクトを渡す。
   //
   // *** 注意：*x を f() の引数として使用した後も延命させるのは ***
   // *** ユーザの責任である！失敗するとクラッシュする！         ***

   boost::python::call<void>(f, ptr(x));
}
...]]></programlisting>
  </section>
</section>
