<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.manage_new_object">
  <title>boost/python/manage_new_object.hpp</title>

  <section xml:id="v2.manage_new_object.classes">
    <title>クラス</title>

    <section xml:id="v2.manage_new_object-spec">
      <title><classname>manage_new_object</classname> クラス</title>
      <para>
	<classname>copy_non_const_reference</classname> は、<code language="C++">new</code> 式で確保したオブジェクトへのポインタを返し、呼び出し側がそのオブジェクトを削除する責任をもつことを想定する C++ 関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデルである。
      </para>

      <section xml:id="v2.manage_new_object.manage_new_object-spec-synopsis">
	<title><classname>manage_new_object</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct manage_new_object
    {
        template <class T> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.manage_new_object.manage_new_object-spec-metafunctions">
	<title><classname>manage_new_object</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    ある <type>U</type> に対して <type>T</type> が <type>U*</type>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef <classname linkend="v2.to_python_direct.to_python_direct-spec">to_python_indirect</classname>&lt;T&gt; type;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.copy_const_reference.examples">
    <title>例</title>

    <section>
      <title>C++ 側</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/manage_new_object.hpp>
#include <boost/python/return_value_policy.hpp>


struct Foo {
   Foo(int x) : x(x){}
   int get_x() { return x; }
   int x;
};

Foo* make_foo(int x) { return new Foo(x); }

// ラッパコード
using namespace boost::python;
BOOST_PYTHON_MODULE(my_module)
{
    def("make_foo", make_foo, return_value_policy<manage_new_object>())
    class_<Foo>("Foo")
        .def("get_x", &Foo::get_x)
        ;
}]]></programlisting>
    </section>

    <section>
      <title>Python 側</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from my_module import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f = make_foo(3)     # Foo オブジェクトを作成</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f.get_x()</userinput>
<computeroutput>3</computeroutput></screen>
    </section>
  </section>
</section>
