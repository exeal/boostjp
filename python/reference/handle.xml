<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.handle">
  <title>boost/python/handle.hpp</title>

  <section xml:id="v2.handle.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/handle.hpp&gt;</filename> は参照カウント付きの Python オブジェクトを管理するスマートポインタである <classname>handle</classname> クラステンプレートを提供する。
    </para>
  </section>

  <section xml:id="v2.handle.classes">
    <title>クラス</title>

    <section xml:id="v2.handle.handle-spec">
      <title><classname>handle</classname> クラステンプレート</title>
      <para>
	<classname>handle</classname> は Python のオブジェクト型へのスマートポインタであり、<type>T*</type> 型のポインタを保持する（<type>T</type> はそのテンプレート引数）。<type>T</type> は <type>PyObject</type> の派生型か、先頭 <code language="C++">sizeof(PyObject)</code> バイトが <type>PyObject</type> とレイアウト互換な <glossterm baseform="POD">POD</glossterm> 型のいずれかでなければならない。Python/'C' API と高水準コードの境界で <classname>handle&lt;&gt;</classname> を使用することだ。一般的なインターフェイスに対しては Python のオブジェクトよりも <classname linkend="v2.object.object-spec">object</classname> を使用すべきだ。
      </para>
      <para>
	このドキュメントで「<code language="C++">upcast</code>」は、<type>Y</type> が <type>T</type> の派生型の場合 <code language="C++">static_castD&lt;T*&gt;</code> で、そうでない場合 C スタイルのキャストでポインタ <type>Y*</type> を基底クラスポインタ <type>T*</type> へ変換する操作を指す。しかしながらYの先頭 <code language="C++">sizeof(PyObject)</code> バイトが PyObject とレイアウト互換でなければ、「<code language="C++">upcast</code>」は違法である。
      </para>

      <section xml:id="v2.handle.handle-spec-synopsis">
	<title><classname>handle</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
  template <class T>
  class handle
  {
      typedef unspecified-member-function-pointer bool_type;

   public: // 型
      typedef T element_type;

   public: // メンバ関数
      ~handle();

      template <class Y>
      explicit handle(detail::borrowed<null_ok<Y> >* p);

      template <class Y>
      explicit handle(null_ok<detail::borrowed<Y> >* p);

      template <class Y>
      explicit handle(detail::borrowed<Y>* p);

      template <class Y>
      explicit handle(null_ok<Y>* p);

      template <class Y>
      explicit handle(Y* p);

      handle();

      handle& operator=(handle const& r);

      template<typename Y>
      handle& operator=(handle<Y> const & r); // 例外を投げない


      template <typename Y>
      handle(handle<Y> const& r);

      handle(handle const& r);

      T* operator-> () const;
      T& operator* () const;
      T* get() const;
      void reset();
      T* release();

      operator bool_type() const; // 例外を投げない
   private:
      T* m_p;
  };
  
  template <class T> struct null_ok;
  namespace detail { template <class T> struct borrowed; }
}}]]></programlisting>
      </section>

      <section xml:id="v2.handle.handle-spec-ctors">
	<title><classname>handle</classname> クラステンプレートのコンストラクタおよびデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <destructorsynopsis language="C++">
	      <modifier>virtual</modifier>
	      <methodname>~handle</methodname>
	      <void/>
	    </destructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Py_XDECREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(m_p))</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class Y&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>detail::borrowed&lt;null_ok&lt;Y&gt; &gt;*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Py_XINCREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(p)); m_p = <replaceable>upcast</replaceable>&lt;T*&gt;(p);</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class Y&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>null_ok&lt;detail::borrowed&lt;Y&gt; &gt;*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Py_XINCREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(p)); m_p = <replaceable>upcast</replaceable>&lt;T*&gt;(p);</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class Y&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>detail::borrowed&lt;Y&gt;*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Py_XINCREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(p)); m_p = <replaceable>upcast</replaceable>&lt;T*&gt;(<function linkend="v2.errors.expect_non_null-spec">expect_non_null</function>(p));</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class Y&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>null_ok&lt;Y&gt;*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p = <replaceable>upcast</replaceable>&lt;T*&gt;(p);</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;class Y&gt;</modifier>
	      <modifier>explicit</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>Y*</type>
		<parameter>p</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p = <replaceable>upcast</replaceable>&lt;T*&gt;(<function linkend="v2.errors.expect_non_null-spec">expect_non_null</function>(p));</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>handle</methodname>
	      <void/>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p = 0;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <modifier>template &lt;typename Y&gt;</modifier>
	      <methodname>handle</methodname>
	      <methodparam>
		<type>handle&lt;Y&gt; const&amp;</type>
		<parameter>r</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <constructorsynopsis language="C++">
	      <methodname>handle</methodname>
	      <methodparam>
		<type>handle const&amp;</type>
		<parameter>r</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p = r.m_p; Py_XINCREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(m_p));</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.handle.handle-spec-modifiers">
	<title><classname>handle</classname> クラステンプレートの変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>handle&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>handle const&amp;</type>
		<parameter>r</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <modifier>template&lt;typename Y&gt;</modifier>
	      <type>handle&amp;</type>
	      <methodname>operator=</methodname>
	      <methodparam>
		<type>handle&lt;Y&gt; const &amp;</type>
		<parameter>r</parameter>
	      </methodparam>
	      <modifier>// 例外を投げない</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">Py_XINCREF(<replaceable>upcast</replaceable>&lt;PyObject*&gt;(r.m_p)); Py_XDECREF( <replaceable>upcast</replaceable>&lt;PyObject*&gt;(m_p)); m_p = r.m_p;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>T*</type>
	      <methodname>release</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++">T* x = m_p; m_p = 0; return x;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>reset</methodname>
	      <void/>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    <code language="C++"><![CDATA[*this = handle<T>();]]></code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.handle.handle-spec-observers">
	<title><classname>handle</classname> クラステンプレートのオブザーバ関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>T*</type>
	      <methodname>operator-&gt;</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>T*</type>
	      <methodname>get</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <type>T&amp;</type>
	      <methodname>operator*</methodname>
	      <void/>
	      <modifier>const</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">*m_p;</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <methodsynopsis language="C++">
	      <methodname>operator bool_type</methodname>
	      <void/>
	      <modifier>const</modifier>
	      <modifier>// 例外を投げない</modifier>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">m_p == 0</code> の場合 0。それ以外の場合、<constant>true</constant> へ変換可能なポインタ。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.handle.functions">
    <title>関数</title>

    <section xml:id="v2.handle.borrowed-spec">
      <title><function>borrowed</function></title>
      <programlisting language="C++"><![CDATA[template <class T>
detail::borrowed<T>* borrowed(T* p)
{
    return (detail::borrowed<T>*)p;
}]]></programlisting>
    </section>

    <section xml:id="v2.handle.allow_null-spec">
      <title><function>allow_null</function></title>
      <programlisting language="C++"><![CDATA[template <class T>
null_ok<T>* allow_null(T* p)
{
    return (null_ok<T>*)p;
}]]></programlisting>
    </section>
  </section>
</section>
