<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.docstring_options">
  <title>boost/python/docstring_options.hpp</title>

  <section xml:id="v2.docstring_options.introduction">
    <title>はじめに</title>
    <para>
      Boost.Python はユーザ定義ドキュメンテーション文字列をサポートし、自動的に C++ シグニチャを追加する。これらの機能は既定で有効である。<classname>docstring_options</classname> クラスはユーザ定義ドキュメンテーション文字列とシグニチャを選択的にまたは両方を抑止できる。
    </para>
  </section>

  <section xml:id="v2.docstring_options.classes">
    <title>クラス</title>

    <section xml:id="v2.docstring_options.docstring_options-spec">
      <title><classname>docstring_options</classname> クラス</title>
      <para>
	ラップした関数およびメンバ関数のドキュメンテーション文字列の可視性をインスタンスの寿命に対して制御する。予期しない副作用を防ぐため、インスタンスはコピー不可能である。
      </para>

      <section xml:id="v2.docstring_options.docstring_options-spec-synopsis">
	<title><classname>docstring_options</classname> クラスの概要</title>
	<programlisting language="C++">namespace boost { namespace python {

    class docstring_options : boost::noncopyable
    {
      public:
          docstring_options(bool show_all=true);

          docstring_options(bool show_user_defined, bool show_signatures);

          docstring_options(bool show_user_defined, bool show_py_signatures, bool show_cpp_signatures);

          ~docstring_options();

          void
          disable_user_defined();

          void
          enable_user_defined();

          void
          disable_signatures();

          void
          enable_signatures();

          void
          disable_py_signatures();

          void
          enable_py_signatures();

          void
          disable_cpp_signatures();

          void
          enable_cpp_signatures();

          void
          disable_all();

          void
          enable_all();
    };

}}</programlisting>
      </section>

      <section xml:id="v2.docstring_options.docstring_options-spec-ctors">
	<title><classname>docstring_options</classname> クラスのコンストラクタ</title>
	<orderedlist>
	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>docstring_options</methodname>
	      <methodparam>
		<type>bool</type>
		<parameter>show_all</parameter>
		<initializer>true</initializer>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    後続のコードで定義する関数およびメンバ関数のドキュメンテーション文字列の可視性を制御する <classname>docstring_options</classname> オブジェクトを構築する。<parameter>show_all</parameter> が <literal>true</literal> の場合、ユーザ定義のドキュメンテーション文字列と自動的に生成された Python および C++ シグニチャの両方が表示される。<parameter>show_all</parameter> が <literal>false</literal> の場合、<property>__doc__</property> 属性は <constant>None</constant> である。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>docstring_options</methodname>
	      <methodparam>
		<type>bool</type>
		<parameter>show_user_defined</parameter>
	      </methodparam>
	      <methodparam>
		<type>bool</type>
		<parameter>show_signatures</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    後続のコードで定義する関数およびメンバ関数のドキュメンテーション文字列の可視性を制御する <classname>docstring_options</classname> オブジェクトを構築する。<parameter>show_user_defined</parameter> が <literal>true</literal> の場合、ユーザ定義ドキュメンテーション文字列が表示される。<parameter>show_signatures</parameter> が <literal>true</literal> の場合、Python および C++ のシグニチャが自動的に追加される。<parameter>show_user_defined</parameter> および <parameter>show_signatures</parameter> の両方が <literal>false</literal> の場合、<property>__doc__</property> 属性は <constant>None</constant> である。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>

	  <listitem>
	    <constructorsynopsis language="C++">
	      <methodname>docstring_options</methodname>
	      <methodparam>
		<type>bool</type>
		<parameter>show_user_defined</parameter>
	      </methodparam>
	      <methodparam>
		<type>bool</type>
		<parameter>show_py_signatures</parameter>
	      </methodparam>
	      <methodparam>
		<type>bool</type>
		<parameter>show_cpp_signatures</parameter>
	      </methodparam>
	    </constructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    後続のコードで定義する関数およびメンバ関数のドキュメンテーション文字列の可視性を制御する <classname>docstring_options</classname> オブジェクトを構築する。<parameter>show_user_defined</parameter> が <literal>true</literal> の場合、ユーザ定義ドキュメンテーション文字列が表示される。<parameter>show_py_signatures</parameter> が <literal>true</literal> の場合、Python のシグニチャが自動的に追加される。<parameter>show_cpp_signatures</parameter> が <literal>true</literal> の場合、C++ のシグニチャが自動的に追加される。すべての引数が <literal>false</literal> の場合、<property>__doc__</property> 属性は <constant>None</constant> である。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.docstring_options.docstring_options-spec-dtors">
	<title><classname>docstring_options</classname> クラスのデストラクタ</title>
	<orderedlist>
	  <listitem>
	    <destructorsynopsis language="C++">
	      <methodname>~docstring_options</methodname>
	      <void/>
	    </destructorsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>効果：</term>
		<listitem>
		  <para>
		    ドキュメンテーション文字列のオプションを前の状態に復元する。特に <classname>docstring_options</classname> インスタンスが入れ子の C++ スコープ内にある場合は、そのスコープ内の設定が復元される。最後の <classname>docstring_options</classname> インスタンスがスコープから外れると、既定の「すべて ON」の設定が復元される。
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>

      <section xml:id="v2.docstring_options.docstring_options-spec-modifiers">
	<title><classname>docstring_options</classname> クラスの変更関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>disable_user_defined</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>enable_user_defined</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>disable_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>enable_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>disable_py_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>enable_py_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>disable_cpp_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>enable_cpp_signatures</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>disable_all</methodname>
	      <void/>
	    </methodsynopsis>
	    <methodsynopsis language="C++">
	      <type>void</type>
	      <methodname>enable_all</methodname>
	      <void/>
	    </methodsynopsis>
	    <para>
	      これらのメンバ関数は、後続のコードのドキュメンテーション文字列の可視性を動的に変更する。<methodname>*_user_defined()</methodname> および <methodname>*_signatures()</methodname> メンバ関数は細かい制御目的で提供されている。<methodname>*_all()</methodname> メンバ関数はすべての設定を同時に操作するための便利なショートカットである。
	    </para>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.docstring_options.examples">
    <title>例</title>

    <section>
      <title>コンパイル時に定義したドキュメンテーション文字列のオプション</title>
      <programlisting language="C++">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/docstring_options.hpp&gt;

void foo() {}

BOOST_PYTHON_MODULE(demo)
{
    using namespace boost::python;
    docstring_options doc_options(DEMO_DOCSTRING_SHOW_ALL);
    def("foo", foo, "foo のドキュメント");
}</programlisting>
      <para>
	<option>-DDEMO_DOCSTRING_SHOW_ALL=true</option> としてコンパイルすると次のようになる。
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import demo</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo.__doc__</userinput>
<computeroutput>foo() -&gt; None : foo のドキュメント
C++ signature:
    foo(void) -&gt; void</computeroutput></screen>
      <para>
	<option>-DDEMO_DOCSTRING_SHOW_ALL=false</option> としてコンパイルすると次のようになる。
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import demo</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo.__doc__</userinput>
<computeroutput>None</computeroutput></screen>
    </section>

    <section>
      <title>選択的な抑止</title>
      <programlisting language="C++">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/args.hpp&gt;
#include &lt;boost/python/docstring_options.hpp&gt;

int foo1(int i) { return i; }
int foo2(long l) { return static_cast&lt;int&gt;(l); }
int foo3(float f) { return static_cast&lt;int&gt;(f); }
int foo4(double d) { return static_cast&lt;int&gt;(d); }

BOOST_PYTHON_MODULE(demo)
{
    using namespace boost::python;
    docstring_options doc_options;
    def("foo1", foo1, arg("i"), "foo1 のドキュメント");
    doc_options.disable_user_defined();
    def("foo2", foo2, arg("l"), "foo2 のドキュメント");
    doc_options.disable_signatures();
    def("foo3", foo3, arg("f"), "foo3 のドキュメント");
    doc_options.enable_user_defined();
    def("foo4", foo4, arg("d"), "foo4 のドキュメント");
    doc_options.enable_py_signatures();
    def("foo5", foo4, arg("d"), "foo5 のドキュメント");
    doc_options.disable_py_signatures();
    doc_options.enable_cpp_signatures();
    def("foo6", foo4, arg("d"), "foo6 のドキュメント");
}</programlisting>
      <para>
	Python のコード：
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import demo</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo1.__doc__</userinput>
<computeroutput>foo1( (int)i) -&gt; int : foo1 のドキュメント
C++ signature:
    foo1(int i) -&gt; int</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo2.__doc__</userinput>
<computeroutput>foo2( (int)l) -&gt; int : 
C++ signature:
    foo2(long l) -&gt; int</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo3.__doc__</userinput>
<computeroutput>None</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo4.__doc__</userinput>
<computeroutput>foo4 のドキュメント</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo5.__doc__</userinput>
<computeroutput>foo5( (float)d) -&gt; int : foo5 のドキュメント</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo6.__doc__</userinput>
<computeroutput>foo6 のドキュメント
C++ signature:
    foo6(double d) -&gt; int</computeroutput></screen>
    </section>

    <section>
      <title>複数の C++ スコープからのラッピング</title>
      <programlisting language="C++">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/args.hpp&gt;
#include &lt;boost/python/docstring_options.hpp&gt;

int foo1(int i) { return i; }
int foo2(long l) { return static_cast&lt;int&gt;(l); }

int bar1(int i) { return i; }
int bar2(long l) { return static_cast&lt;int&gt;(l); }

namespace {

    void wrap_foos()
    {
        using namespace boost::python;
        // docstring_options を使用していない
        //   -&gt; 外側の C++ スコープの設定が適用される
        def("foo1", foo1, arg("i"), "foo1 のドキュメント");
        def("foo2", foo2, arg("l"), "foo2 のドキュメント");
    }

    void wrap_bars()
    {
        using namespace boost::python;
        bool show_user_defined = true;
        bool show_signatures = false;
        docstring_options doc_options(show_user_defined, show_signatures);
        def("bar1", bar1, arg("i"), "bar1 のドキュメント");
        def("bar2", bar2, arg("l"), "bar2 のドキュメント");
    }
}

BOOST_PYTHON_MODULE(demo)
{
    boost::python::docstring_options doc_options(false);
    wrap_foos();
    wrap_bars();
}</programlisting>
      <para>
	Python のコード：
      </para>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import demo</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo1.__doc__</userinput>
<computeroutput>None</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.foo2.__doc__</userinput>
<computeroutput>None</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.bar1.__doc__</userinput>
<computeroutput>bar1 のドキュメント</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print demo.bar2.__doc__</userinput>
<computeroutput>bar2 のドキュメント</computeroutput></screen>
      <para>
	<filename>boost/libs/python/test/docstring.cpp</filename> および <filename>docstring.py</filename> も見よ。
      </para>
    </section>
  </section>
</section>
