<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.manage_new_object">
  <title>boost/python/reference_existing_object.hpp</title>

  <section xml:id="v2.reference_existing_object.classes">
    <title>クラス</title>

    <section xml:id="v2.manage_new_object-spec">
      <title><classname>reference_existing_object</classname> クラス</title>
      <para>
	<classname>reference_existing_object</classname> は、C++ オブジェクトへの参照かポインタを返すC++関数をラップするのに使用する <link linkend="v2.ResultConverter.ResultConverterGenerator-concept">ResultConverterGenerator</link> のモデルである。ラップした関数を呼び出すとき、戻り値が参照する値はコピーされない。新しい Python オブジェクトは参照先へのポインタを持ち、対応する Python オブジェクトと少なくとも同じ長さの寿命となるような処置はなされない。よって、<classname linkend="v2.with_custodian_and_ward.with_custodian_and_ward-spec">with_custodian_and_ward</classname> 等の <link linkend="v2.CallPolicies">CallPolicies</link> モデルを利用した他の寿命管理無しで <classname>reference_existing_object</classname> を使用すると<emphasis>非常に危険</emphasis>となる可能性がある。このクラスは <classname linkend="v2.return_internal_reference.return_internal_reference-spec">return_internal_reference</classname> の実装に使用されている。
      </para>

      <section xml:id="v2.reference_existing_object.reference_existing_object-spec-synopsis">
	<title><classname>reference_existing_object</classname> クラスの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
    struct reference_existing_object
    {
        template <class T> struct apply;
    };
}}]]></programlisting>
      </section>

      <section xml:id="v2.reference_existing_object.reference_existing_object-spec-metafunctions">
	<title><classname>reference_existing_object</classname> クラスのメタ関数</title>
	<orderedlist>
	  <listitem>
	    <programlisting language="C++"><![CDATA[template <class T> struct apply]]></programlisting>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    ある <type>U</type> に対して <type>T</type> が <type>U&amp;</type> か <type>U*</type>。
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">typedef <classname linkend="v2.to_python_direct.to_python_direct-spec">to_python_indirect</classname>&lt;T,V&gt; type</code>。<type>V</type> は、ラップする関数の戻り値が参照する先への所有権のない <type>U*</type> ポインタを持つインスタンスホルダを構築する <methodname>execute</methodname> 静的関数を持つクラス。
		    <!-- instance_holder クラスじゃないの？ -->
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.reference_existing_object.examples">
    <title>例</title>

    <section>
      <title>C++ 側</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/reference_existing_object.hpp>
#include <boost/python/return_value_policy.hpp>
#include <utility>

// ラップするクラス群
struct Singleton
{
   Singleton() : x(0) {}

   int exchange(int n)  // x を設定し、古い値を返す
   {
        std::swap(n, x);
        return n;
   }

   int x;
};

Singleton& get_it()
{
   static Singleton just_one;
   return just_one;
}

// ラッパコード
using namespace boost::python;
BOOST_PYTHON_MODULE(singleton)
{
    def("get_it", get_it,
        return_value_policy<reference_existing_object>());

    class_<Singleton>("Singleton")
       .def("exchange", &Singleton::exchange)
       ;
}]]></programlisting>
    </section>

    <section>
      <title>Python 側</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import singleton</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>s1 = singleton.get_it()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>s2 = singleton.get_it()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>id(s1) == id(s2)  # s1 と s2 は同じオブジェクトではないが</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>s1.exchange(42)   # 同じ C++ の Singleton を参照する</userinput>
<computeroutput>0</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>s2.exchange(99)</userinput>
<computeroutput>42</computeroutput></screen>
    </section>
  </section>
</section>
