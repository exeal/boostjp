<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.return_arg">
  <title>boost/python/return_arg.hpp</title>

  <section xml:id="v2.return_arg.introduction">
    <title>はじめに</title>
    <para>
      <classname>return_arg</classname> および <classname>return_self</classname> のインスタンスは、ラップする（メンバ）関数の指定した引数（大抵は <code language="C++">*this</code>）を返す <link linkend="v2.CallPolicies">CallPolicies</link> モデルである。
    </para>
  </section>

  <section xml:id="v2.return_arg.classes">
    <title>クラス</title>

    <section xml:id="v2.return_arg.return_arg-spec">
      <title><classname>return_arg</classname> クラステンプレート</title>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>説明</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><parameter>arg_pos</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>
	      返す引数の位置。
	      <footnote>
		<para>
		  訳注　<parameter>arg_pos</parameter> テンプレート引数に 0 を指定することはできません。
		</para>
	      </footnote>
	    </td>
	    <td>1</td>
	  </tr>
	  <tr>
	    <td><type>Base</type></td>
	    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデル</td>
	    <td>ポリシーの合成に使用。提供する <classname>result_converter</classname> は <classname>return_arg</classname> によりオーバーライドされるが、その <methodname>precall</methodname> および <methodname>postcall</methodname> ポリシーは <link linkend="v2.CallPolicies">CallPolicies</link> の項に示すとおり合成される。</td>
	    <td><classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname></td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.return_arg.return_arg-spec-synopsis">
	<title><classname>return_arg</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <size_t arg_pos=1, class Base = default_call_policies>
   struct return_arg : Base
   {
      static PyObject* postcall(PyObject*, PyObject* result);
      struct result_converter{ template <class T> struct apply; };
      template <class Sig> struct extract_return_type : mpl::at_c<Sig, arg_pos>{};

   };
}}]]></programlisting>
      </section>

      <section xml:id="v2.return_arg.return_arg-spec-statics">
	<title><classname>return_arg</classname> クラステンプレートの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>postcall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>args</parameter>
	      </methodparam>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>result</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/tuple.html#PyTuple_Check">PyTuple_Check</function>(args) != 0</code> かつ <code language="C++">PyTuple_Size(args) != 0</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++">PyTuple_GetItem(args,arg_pos-1)</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>

    <section xml:id="v2.return_arg.return_self-spec">
      <title><classname>return_self</classname> クラステンプレート</title>

      <section xml:id="v2.return_arg.return_self-spec-synopsis">
	<title><classname>return_self</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <class Base = default_call_policies>
   struct return_self 
     : return_arg<1,Base>
   {};
}}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.return_arg.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/return_arg.hpp>

struct Widget
{
   Widget() :sensitive_(true){}
   bool get_sensitive() const { return sensitive_; }
   void set_sensitive(bool s) { this->sensitive_ = s; }
 private:
   bool sensitive_;
};

struct Label : Widget
{
   Label() {}

   std::string  get_label() const { return label_; }
   void set_label(const std::string &l){ label_ = l; }

 private:
   std::string label_;
};

using namespace boost::python;
BOOST_PYTHON_MODULE(return_self_ext)
{
   class_<widget>("Widget")
      .def("sensitive", &Widget::get_sensitive)
      .def("sensitive", &Widget::set_sensitive, return_self<>())
      ;

   class_<Label, bases<Widget> >("Label")
      .def("label", &Label::get_label)
      .def("label", &Label::set_label, return_self<>())
      ;
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from return_self_ext import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>l1 = Label().label("foo").sensitive(false)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>l2 = Label().sensitive(false).label("foo")</userinput></screen>
    </section>
  </section>
</section>
