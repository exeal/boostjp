<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.return_internal_reference">
  <title>boost/python/return_internal_reference.hpp</title>

  <section xml:id="v2.return_internal_reference.introduction">
    <title>はじめに</title>
    <para>
      <classname>return_internal_reference</classname> のインスタンスは、自由関数かメンバ関数の引数またはメンバ関数の対象が内部的に保持するオブジェクトへのポインタおよび参照を参照先のコピーを作成することなく安全に返すことを可能とする <link linkend="v2.CallPolicies">CallPolicies</link> モデルである。第 1 テンプレート引数の既定値は、内包するオブジェクトがラップするメンバ関数の対象（<code language="C++">*this</code>）となるよくある場合を処理する。
    </para>
  </section>

  <section xml:id="v2.return_internal_reference.classes">
    <title>クラス</title>

    <section xml:id="v2.return_internal_reference.return_internal_reference-spec">
      <title><classname>return_internal_reference</classname> クラステンプレート</title>
      <informaltable>
	<thead>
	  <tr>
	    <th>引数</th>
	    <th>要件</th>
	    <th>説明</th>
	    <th>既定</th>
	  </tr>
	</thead>
	<tbody>
	  <tr>
	    <td><parameter>owner_arg</parameter></td>
	    <td><type>std::size_t</type> 型の正のコンパイル時定数。</td>
	    <td>
	      返す参照かポインタ先のオブジェクトを含む引数の添字。ラップするのがメンバ関数の場合、引数 1 は対象オブジェクト（<code language="C++">*this</code>）である。
	      <footnote>
		<para>
		  訳注　<parameter>owner_arg</parameter> テンプレート引数に 0 や引数列の範囲を超える値を指定することはできません。
		</para>
	      </footnote>
	      対象の Python オブジェクト型が弱い参照をサポートしない場合、ラップする関数を呼び出すと Python の <exceptionname>TypeError</exceptionname> 例外を送出する。
	    </td>
	    <td>1</td>
	  </tr>
	  <tr>
	    <td><type>Base</type></td>
	    <td><link linkend="v2.CallPolicies">CallPolicies</link> のモデルである</td>
	    <td>ポリシーの合成に使用。提供する <classname>result_converter</classname> は <classname>return_internal_reference</classname> によりオーバーライドされるが、その <methodname>precall</methodname> および <methodname>postcall</methodname> ポリシーは <link linkend="v2.CallPolicies">CallPolicies</link> の項に示すとおり合成される。</td>
	    <td><classname linkend="v2.default_call_policies.default_call_policies-spec">default_call_policies</classname></td>
	  </tr>
	</tbody>
      </informaltable>

      <section xml:id="v2.return_internal_reference.return_internal_reference-spec-synopsis">
	<title><classname>return_internal_reference</classname> クラステンプレートの概要</title>
	<programlisting language="C++">namespace boost { namespace python
{
   template &lt;std::size_t owner_arg = 1, class Base = default_call_policies&gt;
   struct return_internal_reference : Base
   {
      static PyObject* postcall(PyObject*, PyObject* result);
      typedef <classname linkend="v2.reference_existing_object.reference_existing_object-spec">reference_existing_object</classname> result_converter;
   };
}}</programlisting>
      </section>

      <section xml:id="v2.return_internal_reference.return_internal_reference-spec-statics">
	<title><classname>return_internal_reference</classname> クラスの静的関数</title>
	<orderedlist>
	  <listitem>
	    <methodsynopsis language="C++">
	      <type>PyObject*</type>
	      <methodname>postcall</methodname>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>args</parameter>
	      </methodparam>
	      <methodparam>
		<type>PyObject*</type>
		<parameter>result</parameter>
	      </methodparam>
	    </methodsynopsis>
	    <variablelist spacing="compact">
	      <varlistentry>
		<term>要件：</term>
		<listitem>
		  <para>
		    <code language="C++"><function xlink:href="http://docs.python.jp/2/c-api/tuple.html#PyTuple_Check">PyTuple_Check</function>(args) != 0</code>
		  </para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term>戻り値：</term>
		<listitem>
		  <para>
		    <code language="C++" linkend="v2.with_custodian_and_ward.with_custodian_and_ward_postcall-spec-statics">with_custodian_and_ward_postcall::postcall(args, result)</code>
		  </para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </listitem>
	</orderedlist>
      </section>
    </section>
  </section>

  <section xml:id="v2.return_internal_reference.examples">
    <title>例</title>

    <section>
      <title>C++ のモジュール定義</title>
      <programlisting language="C++"><![CDATA[#include <boost/python/module.hpp>
#include <boost/python/class.hpp>
#include <boost/python/return_internal_reference.hpp>

class Bar
{
 public:
   Bar(int x) : x(x) {}
   int get_x() const { return x; }
   void set_x(int x) { this->x = x; }
 private:
   int x;
};

class Foo
{
 public:
   Foo(int x) : b(x) {}

   // 内部的な参照を返す
   Bar const& get_bar() const { return b; }

 private:
   Bar b;
};

using namespace boost::python;
BOOST_PYTHON_MODULE(internal_refs)
{
   class_<Bar>("Bar", init<int>())
      .def("get_x", &Bar::get_x)
      .def("set_x", &Bar::set_x)
      ;

   class_<Foo>("Foo", init<int>())
      .def("get_bar", &Foo::get_bar
          , return_internal_reference<>())
      ;
}]]></programlisting>
    </section>

    <section>
      <title>Python のコード</title>
      <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>from internal_refs import *</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f = Foo(3)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b1 = f.get_bar()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b2 = f.get_bar()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b1.get_x()</userinput>
<computeroutput>3</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b2.get_x()</userinput>
<computeroutput>3</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b1.set_x(42)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>b2.get_x()</userinput>
<computeroutput>42</computeroutput></screen>
    </section>
  </section>
</section>
