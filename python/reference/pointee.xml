<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.pointee">
  <title>boost/python/pointee.hpp</title>

  <section xml:id="v2.pointee.introduction">
    <title>はじめに</title>
    <para>
      <filename class="headerfile">&lt;boost/python/pointee.hpp&gt;</filename> は、ポインタやスマートポインタの型から「ポイントされている」型を抽出する特性<link xlink:href="http://www.boost.org/libs/mpl/doc/refmanual/metafunction.html">メタ関数</link>テンプレート <classname>pointee&lt;T&gt;</classname> を導入する。
    </para>
  </section>

  <section xml:id="v2.pointee.classes">
    <title>クラス</title>

    <section xml:id="v2.pointee.pointee-spec">
      <title><classname>pointee&lt;class T&gt;</classname> クラステンプレート</title>
      <para>
	<classname>pointee&lt;T&gt;</classname> は、<classname><link linkend="v2.class.class_-spec">class_&lt;...&gt;</link></classname> テンプレートでポインタやスマートポインタ型を <type>HeldType</type> 引数に使用するときに保持する型を推論するのに使用する。
      </para>

      <section xml:id="v2.pointee.pointee-spec-synopsis">
	<title><classname>pointee</classname> クラステンプレートの概要</title>
	<programlisting language="C++"><![CDATA[namespace boost { namespace python
{
   template <class T> struct pointee
   {
      typedef T::element_type type;
   };

   // ポインタに対する特殊化
   template <T> struct pointee<T*>
   {
      typedef T type;
   };
}]]></programlisting>
      </section>
    </section>
  </section>

  <section xml:id="v2.pointee.examples">
    <title>例</title>
    <para>
      サードパーティ製のスマートポインタ型 <type>smart_pointer&lt;T&gt;</type> があるとして、<classname>pointee&lt;smart_pointer&lt;T&gt; &gt;</classname> を部分特殊化してクラスラッパの <type>HeldType</type> として使用可能にする。
    </para>
    <programlisting language="C++"><![CDATA[#include <boost/python/pointee.hpp>
#include <boost/python/class.hpp>
#include <third_party_lib.hpp>

namespace boost { namespace python
{
  template <class T> struct pointee<smart_pointer<T> >
  {
     typedef T type;
  };
}}

BOOST_PYTHON_MODULE(pointee_demo)
{
   class_<third_party_class, smart_pointer<third_party_class> >("third_party_class")
      .def(...)
      ...
      ;
}]]></programlisting>
  </section>
</section>
