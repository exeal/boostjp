<?xml version="1.0" ?>
<!--
  Copyright David Abrahams 2006. Distributed under the Boost
  Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.faq">
  <title>よくある質問と回答</title>

  <!-- qandaset は使用しない -->

  <section xml:id="v2.faq.funcptr">
    <title>関数ポインタを引数にとる関数をラップするにはどうすればよいか</title>
    <para>
      次のようにしたい場合は、
    </para>
    <programlisting language="C++">typedef boost::function&lt;void (string s) &gt; funcptr;

void foo(funcptr fp)
{
    fp("hello,world!");
}

BOOST_PYTHON_MODULE(test)
{
    def("foo",foo) ;
}</programlisting>
    <para>
      Python 側はこう。
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>def hello(s):</userinput>
<prompt>... </prompt><userinput>   print s</userinput>
<prompt>... </prompt>
<prompt>&gt;&gt;&gt; </prompt><userinput>foo(hello)</userinput>
<computeroutput>hello, world!</computeroutput></screen>
    <para>
      短い答えは「できない」だ。これは Boost.Python の制限ではなく C++ の制限による。問題は Python の関数は実際はデータであり、データと C++ 関数をひとまとめにするには関数の静的変数に格納する以外に方法がないということである。この話の問題は、一握りのデータをすべての関数とひとまとめすることしかできず、<function>foo</function> へ渡すと決めた Python 関数についてその場で新しい C++ 関数をコンパイルする方法はないということである。言い換えると、C++ 関数が常に同じ Python 関数を呼び出すのであれば動作するが、おそらくあなたの希望ではないだろう。
    </para>
    <para>
      ラップする C++ コードを変更することに糸目を付けなければ、代わりにそれを <classname>object</classname> へ渡し呼び出すとよい。多重定義された関数呼び出し演算子は、渡した先の <classname>object</classname> の背後にある Python 関数を呼び出す。
    </para>
    <para>
      この問題についてより多くの考え方に触れるには、<link xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1554837">このポスト</link>
      <footnote>
	<para>
	  訳注　ActiveState サイトへのリンクは移動してしまいました。<uri type="webpage" xlink:href="http://code.activestate.com/lists/python-cplusplus-sig/">http://code.activestate.com/lists/python-cplusplus-sig/</uri> 以下が移動先と思われますが、訳者には個々のメッセージの場所が分かりませんでした。
	</para>
      </footnote>
      を見よ。
    </para>
  </section>

  <section xml:id="v2.faq.dangling">
    <title>「懸垂参照を返そうとしました」エラーが出る。何が間違っているのか</title>
    <para>
      厄介なクラッシュの発生を防ぐために発生している例外である。大抵は次のようなコードを書いたときに発生する。
    </para>
    <programlisting language="C++">period const&amp; get_floating_frequency() const
{
  return boost::python::call_method&lt;period const&amp;&gt;(
      m_self,"get_floating_frequency");
}</programlisting>
    <para>
      次のようなエラーが発生する。
    </para>
    <screen>ReferenceError: Attempt to return dangling reference to object of type:
class period</screen>
    <para>
      この場合、<function>call_method</function> が呼び出す Python のメソッドが新しい Python オブジェクトを構築する。その Python が所有し内包する C++ オブジェクト（<code language="C++">class period</code> のインスタンス）への参照を返そうとしている。呼び出されるメソッドは短命な新しいオブジェクトを戻すため、それへの参照のみが上記の <code language="C++">get_floating_frequency()</code> の存続期間で保持される。関数が返ると Python のオブジェクトが破壊されるため、<classname>period</classname> クラスのインスタンスが破壊され、返った参照は懸垂したままとなる。もはや未定義の振る舞いであり、この参照で何かしようとするとクラッシュする。Boost.Python はこのような状況を実行時に検出し、クラッシュする前に例外を投げる。
    </para>
  </section>

  <section xml:id="v2.faq.question1">
    <title>return_internal_reference の効率はどうか</title>

    <blockquote>
      <title>質問</title>
      <para>
	12 個の <code language="C++">double</code> を持つオブジェクトがある。別のクラスのメンバ関数がこのオブジェクトへの <code language="C++">const&amp;</code> を返す。返されるオブジェクトを Python で使用するという観点では、得られるのが戻り値のオブジェクトのコピーと参照のどちらであるかは気にしていない。Boost.Python のバージョン 2 で、<classname>copy_const_referece</classname> か <classname>return_internal_reference</classname> のどちらを使用するか決めようと思う。生成されるコードのサイズやメモリオーバーヘッド等、どちらかを選択するのに決め手になるものはあるか。
      </para>
    </blockquote>
    <para>
      <classname>copy_const_reference</classname> はオブジェクトに対しストレージを使用してインスタンスを作成し、そのサイズは base_size + 12 * sizeof(double) である。<classname>return_internal_reference</classname> はオブジェクトへのポインタに対しストレージを使用してインスタンスを作成し、そのサイズは base_size + sizeof(void*) である。しかしながら、元のオブジェクトの弱参照リストに入る弱い参照オブジェクトと、内部で参照するオブジェクトの寿命を管理するための特別なコールバックオブジェクトも作成する。私の考えはどうかというと、この場合は <classname>copy_const_reference</classname> がよいと思う。全メモリ使用量と断片化が減少し、トータルサイクルも削減することだろう。
    </para>
  </section>

  <section xml:id="v2.faq.question2">
    <title>C++ コンテナを引数にとる関数をラップするにはどうすればよいか</title>
    <para>
      <personname>Ralf W. Grosse-Kunstleve</personname> が次のようなノートを残している。
    </para>
    <orderedlist>
      <listitem>
	<para>
	  通常の <classname>class_&lt;&gt;</classname> ラッパを使用する。
	</para>
	<programlisting language="C++">class_&lt;std::vector&lt;double&gt; &gt;("std_vector_double")
  .def(...)
  ...
  ;</programlisting>
	<para>
	  これをテンプレート内に持っていくと、様々な型を同じコードでラップできる。このテクニックは scitbx パッケージ内のファイル <filename class="headerfile">scitbx/include/scitbx/array_family/boost_python/flex_wrapper.h</filename> で使用している。このファイルを <classname>std::vector&lt;&gt;</classname> インスタンスをラップするよう変更するのは容易である。
	</para>
	<para>
	  この種の C++/Python の束縛は多数（10000 以上）の要素を持つコンテナに最も適している。
	</para>
      </listitem>
      <listitem>
	<para>
	  カスタムの rvalue 変換器を使用する。Boost.Python の「rvalue 変換器」は次のような関数シグニチャにマッチする。
	</para>
	<programlisting language="C++">void foo(std::vector&lt;double&gt; const&amp; array); // const 参照渡し
void foo(std::vector&lt;double&gt; array); // 値渡し</programlisting>
	<para>
	  ファイル <filename class="headerfile">scitbx/include/scitbx/boost_python/container_conversions.h</filename> にいくつか rvalue 変換器の実装がある。このコードを使えば、<classname>std::vector&lt;&gt;</classname> や <classname>std::list&lt;&gt;</classname> といった C++ コンテナ型から Python のタプルへの変換、あるいはその逆が可能である。ファイル <filename>scitbx/array_family/boost_python/regression_test_module.cpp</filename> に簡単な例がある。
	</para>
	<para>
	  自動的な C++ コンテナ－ Python タプルの変換は、中サイズのコンテナに最も適している。これらの変換器が生成するオブジェクトコードは 1 番目の方法に比較して著しく小さい。
	</para>
      </listitem>
    </orderedlist>
    <para>
      2 番目の方法の欠点は <code language="C++">+</code> 、<code language="C++">-</code> 、<code language="C++">*</code> 、<code language="C++">/</code> 、<code language="C++">%</code> といった算術演算子が利用できないことである。タプルの代わりに「<type>math_array</type>」型へ変換するカスタムの rvalue 変換器があると便利だろう。現時点では実装されていないが、数週間以内にリリースする Boost.Python V2 のフレームワークで可能になる（2002 年 3 月 10 日のポスト）。
    </para>
    <para>
      <classname>std::vector&lt;&gt;</classname> － Python リスト間の「カスタムの lvalue 変換器」もあると便利だろう。これらの変換器は C++ からの Python リストの変更をサポートする。例えば、
    </para>
    <bridgehead>C++ 側：</bridgehead>
    <programlisting language="C++">void foo(std::vector&lt;double&gt;&amp; array)
{
  for(std::size_t i=0;i&lt;array.size();i++) {
    array[i] *= 2;
  }
}</programlisting>
    <bridgehead>Python 側：</bridgehead>
<screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>l = [1, 2, 3]</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>foo(l)</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>print l</userinput>
<computeroutput>[2, 4, 6]</computeroutput></screen>
    <para>
      カスタムの lvalue 変換器については Boost.Python コアライブラリの変更が必要であり、現時点では利用できない。
    </para>
    <para>
      追伸：上で触れた scitbx ファイル群は匿名 CVS で利用できる。
    </para>
    <screen><userinput>cvs -d:pserver:anonymous@cvs.cctbx.sourceforge.net:/cvsroot/cctbx login</userinput>
<userinput>cvs -d:pserver:anonymous@cvs.cctbx.sourceforge.net:/cvsroot/cctbx co scitbx</userinput></screen>
  </section>

  <section xml:id="v2.faq.c1204">
    <title>致命的なエラー C1204：コンパイラの制限 : 内部構造がオーバーフローしました。</title>
    <blockquote>
      <para>
	大きなソースファイルをコンパイルすると、このエラーメッセージが出る。どうすればよいか。
      </para>
    </blockquote>
    <para>
      選択肢が 2 つある。
    </para>
    <orderedlist>
      <listitem>
	<para>コンパイラをアップグレードする（推奨）。</para>
      </listitem>
      <listitem>
	<para>ソースファイルを複数の翻訳単位に分割する。</para>
      </listitem>
    </orderedlist>
    <bridgehead>my_module.cpp：</bridgehead>
    <programlisting language="C++">...
void more_of_my_module();
BOOST_PYTHON_MODULE(my_module)
{
   def("foo", foo);
   def("bar", bar);
   ...
   more_of_my_module();
}</programlisting>
    <bridgehead>more_of_my_module.cpp：</bridgehead>
    <programlisting language="C++">void more_of_my_module()
{
   def("baz", baz);
   ...
}</programlisting>
    <para>
      <classname linkend="v2.class.class_-spec">class_&lt;...&gt;</classname> 宣言を単一のソースファイルに押し込むことがエラーにより不可能な場合、<classname>class_</classname> オブジェクトへの参照を他のソースファイルの関数へ渡して、その補助ソースファイル内でメンバ関数（<methodname>.def(...)</methodname> 等）を呼び出すとよい。
    </para>
    <bridgehead>more_of_my_class.cpp：</bridgehead>
    <programlisting language="C++">void more_of_my_class(class_&lt;my_class&gt;&amp; x)
{
   x
     .def("baz", baz)
     .add_property("xx", &amp;my_class::get_xx, &amp;my_class::set_xx)
     ;

   ...
}</programlisting>
  </section>

  <section xml:id="v2.faq.debugging">
    <title>Python 拡張をデバッグするにはどうすればよいか</title>
    <para>
      <personname>Greg Burley</personname> が Unix GCC ユーザに対して以下の回答をしている。
    </para>
    <blockquote>
      <para>
	C++ ライブラリかクラスについて Boost.Python 拡張を作成すると、コードのデバッグが必要になる。結局のところ、Python でライブラリをラップする理由の 1 つがこれだ。<acronym>BPL</acronym> を使用することで期待される副作用や利益は、Python のコードが最小限の状況で boost::python が動作しない場合（すなわち、ラップするメソッドが正しくないとエラーが出るが、そのほとんどはコンパイラが捕捉するだろう）でも、デバッグがテスト段階の C++ ライブラリに隔離できるということである。
      </para>
      <para>
	<command>gdb</command> セッションを始めて Python による C++ ライブラリのデバッグを行うための基本的なステップを以下に示す。あなたの <acronym>BPL</acronym> モジュール <filename class="libraryfile">my_ext.so</filename> を含むディレクトリで <command>gdb</command> セッションを開始しなければならないことに注意していただきたい。
      </para>
      <screen><prompt>(gdb) </prompt><userinput>target exec python</userinput>
<prompt>(gdb) </prompt><userinput>run</userinput>
<prompt> &gt;&gt;&gt; </prompt><userinput>from my_ext import *</userinput>
<prompt> &gt;&gt;&gt; </prompt><userinput>[C-c]</userinput>
<prompt>(gdb) </prompt><userinput>break MyClass::MyBuggyFunction</userinput>
<prompt>(gdb) </prompt><userinput>cont</userinput>
<prompt> &gt;&gt;&gt; </prompt><userinput>pyobj = MyClass()</userinput>
<prompt> &gt;&gt;&gt; </prompt><userinput>pyobj.MyBuggyFunction()</userinput>
<computeroutput>Breakpoint 1, MyClass::MyBuggyFunction ...
Current language:  auto; currently c++</computeroutput>
<prompt>(gdb) </prompt><userinput>do debugging stuff</userinput></screen>
    </blockquote>
    <para>
      <personname>Greg</personname> の方法はステップ実行したソースファイルの各行が表示されるので、Emacs の <command>gdb</command> コマンドより優れたものである。
    </para>
    <para>
      <emphasis>Windows</emphasis> における私のお気に入りのデバッグツールは <application>Microsoft Visual C++ 7</application> に付属のデバッガだ。このデバッガは、<orgname class="corporation">Microsoft</orgname> および <application>Metrowerks</application> ツールセットのすべてのバージョンが生成するコードで動作するようである。安定していて、ユーザが特別なトリックを使わなくても「とりあえず動作する」。
    </para>
    <para>
      <personname>Raoul Gough</personname> は Windows 上の <command>gdb</command> について以下を提供している。
    </para>
    <blockquote>
      <para>
	最近 <command>gdb</command> の Windows DLL サポートが改善され、少しのトリックで Python 拡張をデバッグできるようになった。まず、DLL から最小限のシンボルを抽出する機能をサポートした最新の <command>gdb</command> が必要である。バージョン 6 以降の <command>gdb</command> か Cygwin gdb-20030214-1 以降が対応している。適切なリリースであれば <filename>gdb.info</filename> ファイルに Configuration – Native – Cygwin Native – Non-debug DLL symbols 節がある。本稿で概略を示す方法について、この info 節に詳細がある。
      </para>
      <para>
	次に、<accel>^C</accel> で実行を中断するのではなく Python インタープリタ内にブレークポイントを設定する必要がある。ブレークポイントを設定する適切な場所は <function>PyOS_Readline</function> である。Python の対話コマンドを読み込む直前に毎回実行が停止する。デバッガが開始したらブレークポイントを設定可能になる前に Python を開始して自身の DLL を読み込まなければならない。
      </para>
      <screen><prompt>$ </prompt><userinput><command>gdb</command> python</userinput>
<computeroutput>GNU gdb 2003-09-02-cvs (cygwin-special)
[...]
</computeroutput>
<prompt>(gdb) </prompt><userinput>run</userinput>
<computeroutput>Starting program: /cygdrive/c/Python22/python.exe
Python 2.2.2 (#37, Oct 14 2002, 17:02:34) [MSC 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>^Z</userinput>
<computeroutput>

Program exited normally.</computeroutput>
<prompt>(gdb) </prompt><userinput>break *&amp;PyOS_Readline</userinput>
<computeroutput>Breakpoint 1 at 0x1e04eff0</computeroutput>
<prompt>(gdb) </prompt><userinput>run</userinput>
<computeroutput>Starting program: /cygdrive/c/Python22/python.exe
Python 2.2.2 (#37, Oct 14 2002, 17:02:34) [MSC 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.

Breakpoint 1, 0x1e04eff0 in python22!PyOS_Readline ()
   from /cygdrive/c/WINNT/system32/python22.dll</computeroutput>
<prompt>(gdb) </prompt><userinput>cont</userinput>
<computeroutput>Continuing.</computeroutput>
<prompt>&gt;&gt;&gt; </prompt><userinput>from my_ext import *</userinput>
<computeroutput>
Breakpoint 1, 0x1e04eff0 in python22!PyOS_Readline ()
   from /cygdrive/c/WINNT/system32/python22.dll</computeroutput>
<prompt>(gdb) </prompt><computeroutput># my_ext now loaded (with any debugging symbols it contains)</computeroutput></screen>
    </blockquote>

    <section>
      <title>Boost.Build で拡張をデバッグする</title>
      <para>
	<link xlink:href="http://www.boost.org/boost-build2/">Boost.Build</link> で boost-python-runtest 規則を使用して拡張モジュールのテストを起動する場合、<command>bjam</command> コマンドラインに <option>--debugger=debugger</option> を追加して好きなデバッガを起動できる。
      </para>
      <screen><command>bjam</command> <option>-sTOOLS=vc7.1 "--debugger=devenv /debugexe"</option> test
<command>bjam</command> <option>-sTOOLS=gcc -sPYTHON_LAUNCH=gdb</option> test</screen>
      <para>
	テストを走らせるときに <option>-d+2</option> オプションを追加すると、Boost.Build がテストを起動するのに使用する完全なコマンドを表示するので非常に便利である。このためには <envar>PYTHONPATH</envar> およびデバッガが正しく動作するのに必要な <envar>LD_LIBRARY_PATH</envar> のような他の重要な環境関数がセットアップされていなければならない。
      </para>
    </section>
  </section>

  <section xml:id="v2.faq.imul">
    <title>私の <code language="Python">*=</code> 演算子が動作しないのはなぜか</title>
    <blockquote>
      <para>
	多数の多重定義演算子とともにクラスを Python へエクスポートした。他はちゃんと動作するのに、<code language="Python">*=</code> 演算子だけが正しく動作しない。毎回「シーケンスは非 int 型と乗算できません」と言われる。<code language="Python">p1 *= p2</code> の代わりに <code language="Python">p1.__imul__(p2)</code> とすると、コードの実行は成功する。私の何が間違っているのか。
      </para>
    </blockquote>
    <para>
      あなたは何も間違っていない。これは Python 2.2 のバグだ。Python 単体でも同じことが起こるはずである（Python 単体で新形式のクラスを使ってみると、Boost.Python 内で何が起こっているか理解できるだろう）。
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>class X(object):</userinput>
<prompt>... </prompt><userinput>    def __imul__(self, x):</userinput>
<prompt>... </prompt><userinput>        print 'imul'</userinput>
<prompt>... </prompt>
<prompt>&gt;&gt;&gt; </prompt><userinput>x = X()</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>x *= 1</userinput></screen>
    <para>
      この問題を解決するには Python をバージョン 2.2.1 以降へアップグレードする必要があり、他の方法はない。
    </para>
  </section>

  <section xml:id="v2.faq.macosx">
    <title>Boost.Python は Mac OS X で動作するか</title>
    <para>
      10.2.8 および 10.3 では <orgname class="corporation">Apple</orgname> の gcc 3.3 コンパイラで動作することが分かっている。
    </para>
    <screen><computeroutput>gcc (GCC) 3.3 20030304 (Apple Computer, Inc. build 1493)</computeroutput></screen>
    <para>
      10.2.8 の場合は gcc の 2003 年 8 月アップデートを入手する（<uri type="website" xlink:href="http://connect.apple.com/">http://connect.apple.com/</uri> で無償配布されている）。10.3 の場合は <application>Xcode Tools</application> バージョン 1.0 を入手する（こちらも無償である）。
    </para>
    <para>
      Python 2.3 が必要である。10.3 に付属の Pythonがよい。10.2.8 では次のコマンドを使用して Python をフレームワークとしてインストールする。
    </para>
    <screen>./configure –enable-framework
make
make frameworkinstall</screen>
    <para>
      ターゲットディレクトリが <filename class="directory">/Library/Frameworks/Python.framework/Versions/2.3</filename> であるので、最後のコマンドは root 権限が必要である。しかしながら、このインストールは 10.2.8 に付属の Python バージョンと競合しない。
    </para>
    <para>
      コンパイルの前に <constant>stacksize</constant> を増やしておくことも肝要である。例えば次のようにする。
    </para>
    <screen>limit stacksize 8192k</screen>
    <para>
      <constant>stacksize</constant> が小さいと内部コンパイラエラーが出てビルドがクラッシュする場合がある。
    </para>
    <para>
      <classname>boost::python::class_&lt;your_type&gt;</classname> テンプレートの実体化をコンパイル中に、たまに <orgname class="corporation">Apple</orgname> のコンパイラが以下のようなエラーを印字（バグ）することがある。
    </para>
    <screen>.../inheritance.hpp:44: error: cannot
 dynamic_cast `p' (of type `struct cctbx::boost_python::&lt;unnamed&gt;::add_pair*
   ') to type `void*' (source type is not polymorphic)</screen>
    <para>
      一般的な回避方法はないが、<type>your_type</type> の定義を以下のように修正するとすべての場合で動作するようだ。
    </para>
    <programlisting language="C++">struct your_type
{
  // メンバデータを定義する前
#if defined(__MACH__) &amp;&amp; defined(__APPLE_CC__) &amp;&amp; __APPLE_CC__ == 1493
  bool dummy_;
#endif
  // 例えばここにメンバデータを置く
  double x;
  int j;
  // 以下続く
};</programlisting>
  </section>

  <section xml:id="v2.faq.xref">
    <title>C++ オブジェクトを保持する既存の PyObject を探し出すにはどうすればよいか</title>
    <blockquote>
      <para>
	「常に保持済みの C++ オブジェクトへのポインタを返す関数をラップしたい。」
      </para>
    </blockquote>
    <para>
      方法の 1 つとしては、仮想関数を持つクラスをラップするのに使用する機構をハイジャックすることである。コンストラクタで第 1 引数として <type>PyObject*</type> を取り、その <type>PyObject*</type> を <parameter>self</parameter> として格納するラッパクラスを作成する場合、薄いラッパ関数内でラッパ型へダウンキャストして元に戻すことができる。例えば、
    </para>
    <programlisting language="C++">class X { X(int); virtual ~X(); ... };
X* f();  // Python オブジェクトが管理するXを返す


// ラップのためのコード

struct X_wrap : X
{
    X_wrap(PyObject* self, int v) : self(self), X(v) {}
    PyObject* self;
};

handle&lt;&gt; f_wrap()
{
    X_wrap* xw = dynamic_cast&lt;X_wrap*&gt;(f());
    assert(xw != 0);
    return handle&lt;&gt;(borrowed(xw->self));
}

...

def("f", f_wrap());
class_&lt;X,X_wrap,boost::noncopyable&gt;("X", init&lt;int&gt;())
   ...
   ;</programlisting>
    <para>
      当然、<classname>X</classname> が仮想関数を持たない場合、<code language="C++">dynamic_cast</code> の代わりに実行時チェックを行わない（行わなくてもよい）<code language="C++">static_cast</code> を使用しなければならない。C++ から構築した <varname>x</varname> が <classname>X_wrap</classname> オブジェクトとなることは当然ないため、この方法が動作するのは <varname>x</varname> オブジェクトが Python から構築された場合だけである。
    </para>
    <para>
      別の方法では C++ コードをわずかに変更しなければならない（可能であればこちらのほうがよい）。<classname>shared_ptr&lt;X&gt;</classname> が Python から変換されると、<classname>shared_ptr</classname> は実際は内包する Python オブジェクトへの参照を管理する。逆に<classname>shared_ptr&lt;X&gt;</classname> を Python へ変換すると、ライブラリはそれが「Python オブジェクト管理者」の 1 つであるかチェックし、そうであれば元の Python オブジェクトをそのまま返す。よって <code language="C++">object(p)</code> と書くだけで Python オブジェクトを戻すことができる。これを利用するには、ラップする C++ コードを生のポインタではなく <classname>shared_ptr</classname> で扱えるよう変更可能にしなければならない。
    </para>
    <para>
      さらに別の方法もある。返したい Python オブジェクトを受け取る関数は、オブジェクトのアドレスと内包する Python オブジェクトの対応関係を記録する薄いラッパでラップでき、このマッピングから Python オブジェクトを捜索する <function>f_wrap</function> 関数を用意しておくことができる。
    </para>
  </section>

  <section xml:id="v2.faq.ownership">
    <title>生のポインタの所有権を持つ必要がある関数をラップするにはどうすればいいか</title>
    <blockquote>
      <para>
	私がラップしている API の一部分は次のようなものである。
      </para>
      <programlisting language="C++">struct A {}; struct B { void add( A* ); }
B::add() は渡されたポインタの所有権を獲得する。</programlisting>
      <para>
	しかしながら、
      </para>
      <programlisting language="C++">a = mod.A()
b = mod.B()
b.add( a )
del a
del b
# メモリの改変により
# Python インタープリタがクラッシュする。</programlisting>
      <para>
	<classname>with_custodian_and_ward</classname> を使って <varname>a</varname> の寿命を <varname>b</varname> に束縛したとしても、結局のところポインタ先の Python オブジェクト <varname>a</varname> が削除されるのを防ぐことはできない。ラップした C++ オブジェクトの「所有権を移動する」方法はあるか。
      </para>
      <para role="attribution">
	Bruce Lowery
      </para>
    </blockquote>
    <para>
      ある。C++ オブジェクトが <classname>auto_ptr</classname> に保持されるようにしておく。
    </para>
    <programlisting language="C++">class_&lt;A, std::auto_ptr&lt;A&gt; &gt;("A")
    ...
    ;</programlisting>
    <para>
      次に <classname>auto_ptr</classname> 引数をとる薄いラッパ関数を作成する。
    </para>
    <programlisting language="C++">void b_insert(B&amp; b, std::auto_ptr&lt;A&gt; a)
{
    b.insert(a.get());
    a.release();
}</programlisting>
    <para>
      これを <methodname>B.add</methodname> でラップする。<classname>manage_new_object</classname> が返すポインタもまた <classname>auto_ptr</classname> で保持されているため、この所有権の移動が正しく動作することに注意していただきたい。
    </para>
  </section>

  <section xml:id="v2.faq.slow_compilation">
    <title>コンパイルに時間がかかりメモリも大量に消費する！高速化するにはどうすればよいか</title>
    <para>
      チュートリアルの<xref linkend="tutorial.techniques.reducing_compiling_time"/>の節を参照いただきたい。
    </para>
  </section>

  <section xml:id="v2.faq.packages">
    <title>Boost.Python を使用してサブパッケージを作成するにはどうすればよいか</title>
    <para>
      チュートリアル<xref linkend="tutorial.techniques.creating_packages"/>の節を参照いただきたい。
    </para>
  </section>

  <section xml:id="v2.faq.msvcthrowbug">
    <title>error C2064：2 引数を取り込む関数には評価されません</title>
    <para>
      <personname>Niall Douglas</personname> が次のノートを提供している。
    </para>
    <blockquote>
      <para>
	<application>Microsoft Visual C++ 7.1（MS Visual Studio .NET 2003）</application>で以下のようなエラーメッセージが出る場合、ほとんどはコンパイラのバグである。
      </para>
      <screen>boost\boost\python\detail\invoke.hpp(76):
error C2064: 2 引数を取り込む関数には評価されません"</screen>
      <para>
	このメッセージは以下のようなコードで引き起こされる。
      </para>
      <programlisting language="C++">#include &lt;boost/python.hpp&gt;

using namespace boost::python;

class FXThread
{
public:
    bool setAutoDelete(bool doso) throw();
};

void Export_FXThread()
{
    class_&lt; FXThread &gt;("FXThread")
        .def("setAutoDelete", &amp;FXThread::setAutoDelete)
    ;
}</programlisting>
      <para>
	このバグは <code language="C++">throw()</code> 修飾子が原因である。回避方法は修飾子を取り除くことである。例えば、
      </para>
      <programlisting language="C++">        .def("setAutoDelete", (bool (FXThread::*)(bool)) &amp;FXThread::setAutoDelete)</programlisting>
      <para>
	（このバグは <orgname class="corporation">Microsoft</orgname> に報告済みである。）
      </para>
    </blockquote>
  </section>

  <section xml:id="v2.faq.custom_string">
    <title>カスタム文字列型と Python 文字列を自動的に相互変換するにはどうすればよいか</title>
    <para>
      <personname>Ralf W. Grosse-Kunstleve</personname> が次のノートを提供している。
    </para>
    <blockquote>
      <para>
	以下は、必要なものがすべて揃った小型の拡張モジュールのデモである。次のは対応する簡単なテストである。
      </para>
      <programlisting language="Python">import custom_string
assert custom_string.hello() == "Hello world."
assert custom_string.size("california") == 10</programlisting>
      <para>
	コードを見れば分かるが、
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    カスタムの to_python 変換器（容易）：<classname>custom_string_to_python_str</classname>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    カスタムの lvalue 変換器（より多くのコードが必要）：<classname>custom_string_from_python_str</classname>
	  </para>
	</listitem>
      </itemizedlist>
      <para>
	カスタム変換器は、モジュール初期化関数のトップ近傍のグローバルな Boost.Python レジストリに登録する。一度制御フローが登録コードに渡ると、同じプロセス内でインポートしたあらゆるモジュールで Python 文字列の自動的な相互変換が動作するようになる。
      </para>
      <programlisting language="Python">#include &lt;boost/python/module.hpp&gt;
#include &lt;boost/python/def.hpp&gt;
#include &lt;boost/python/to_python_converter.hpp&gt;

namespace sandbox { namespace {

  class custom_string
  {
    public:
      custom_string() {}
      custom_string(std::string const&amp; value) : value_(value) {}
      std::string const&amp; value() const { return value_; }
    private:
      std::string value_;
  };

  struct custom_string_to_python_str
  {
    static PyObject* convert(custom_string const&amp; s)
    {
      return boost::python::incref(boost::python::object(s.value()).ptr());
    }
  };

  struct custom_string_from_python_str
  {
    custom_string_from_python_str()
    {
      boost::python::converter::registry::push_back(
        &amp;convertible,
        &amp;construct,
        boost::python::type_id&lt;custom_string&gt;());
    }

    static void* convertible(PyObject* obj_ptr)
    {
      if (!PyString_Check(obj_ptr)) return 0;
      return obj_ptr;
    }

    static void construct(
      PyObject* obj_ptr,
      boost::python::converter::rvalue_from_python_stage1_data* data)
    {
      const char* value = PyString_AsString(obj_ptr);
      if (value == 0) boost::python::throw_error_already_set();
      void* storage = (
        (boost::python::converter::rvalue_from_python_storage&lt;custom_string&gt;*)
          data)->storage.bytes;
      new (storage) custom_string(value);
      data->convertible = storage;
    }
  };

  custom_string hello() { return custom_string("Hello world."); }

  std::size_t size(custom_string const&amp; s) { return s.value().size(); }

  void init_module()
  {
    using namespace boost::python;

    boost::python::to_python_converter&lt;
      custom_string,
      custom_string_to_python_str&gt;();

    custom_string_from_python_str();

    def("hello", hello);
    def("size", size);
  }

}} // namespace sandbox::&lt;anonymous&gt;

BOOST_PYTHON_MODULE(custom_string)
{
  sandbox::init_module();
}</programlisting>
    </blockquote>
  </section>

  <section xml:id="v2.faq.topythonconversionfailed">
    <title>Python への自動変換器が見つからないのはなぜか</title>
    <para>
      <personname>Niall Douglas</personname> が次のノートを提供している。
    </para>
    <blockquote>
      <para>
	上記のようなカスタム変換器を定義すると、メンバデータへの直接アクセスのために <classname>boost::python::class_</classname> が提供する <methodname>def_readonly()</methodname> および <methodname>def_readwrite()</methodname> メンバ関数は期待どおりに動作しない。これは <code language="C++">def_readonly("bar", &amp;foo::bar)</code> が次と等価だからである。
      </para>
      <programlisting language="C++">.add_property("bar", make_getter(&amp;foo::bar, return_internal_reference()))</programlisting>
      <para>
	同様に <code language="C++">def_readwrite("bar", &amp;foo::bar)</code> は次と等価である。
      </para>
      <programlisting language="C++">.add_property("bar", make_getter(&amp;foo::bar, return_internal_reference()),
                     make_setter(&amp;foo::bar, return_internal_reference())</programlisting>
      <para>
	戻り値のポリシーをカスタム変換に互換性のある形で定義するには、<methodname>def_readonly()</methodname> および <methodname>def_readwrite()</methodname> を <methodname>add_property()</methodname> で置き換える。例えば、
      </para>
      <programlisting language="C++">.add_property("bar", make_getter(&amp;foo::bar, return_value_policy&lt;return_by_value&gt;()),
                     make_setter(&amp;foo::bar, return_value_policy&lt;return_by_value&gt;()))</programlisting>
    </blockquote>
  </section>

  <section xml:id="v2.faq.threadsupport">
    <title>インタープリタが複数の場合 Boost.Python はスレッドに対して問題ないか</title>
    <para>
      <personname>Niall Douglas</personname> が次のノートを提供している。
    </para>
    <blockquote>
      <para>
	短い答え：ノー。
      </para>
      <para>
	長い答え：解決するパッチは書けるが、困難である。Boost.Python を使用するあらゆるコード（特に仮想関数の多重定義部分）をカスタムのロック・アンロックで囲む必要があり、加えて <filename class="headerfile">boost/python/detail/invoke.hpp</filename> を大幅に修正して Boost.Python があなたのコードを使用するあらゆる部分をカスタムのアンロック・ロックで囲む必要がある。さらに Boost.Python が <filename class="headerfile">invoke.hpp</filename> によりイテレータ変更を起動するときにアンロック・ロックしないように注意しなければならない。
      </para>
      <para>
	パッチを当てた <filename class="headerfile">invoke.hpp</filename> は C++-SIG メーリングリストにポストされ、アーカイブになっている。機械的に必要な実際の全実装は TnFOX プロジェクト（<link xlink:href="http://sourceforge.net/projects/tnfox/">SourceForge</link> 内の場所）にある。
      </para>
    </blockquote>
  </section>
</section>
 
