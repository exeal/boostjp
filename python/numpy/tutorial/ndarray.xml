<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.tutorial.creating-ndarrays">
  <title>ndarray の作成</title>

  <para>
    Boost.Numpy ライブラリは、ndarray を作成するかなりの数のメソッドを提供している。ndarray は空の配列やゼロ埋めされた配列を含む様々な方法で作成できる。また ndarray はデータと dtype から作成する場合と同様に、任意の Python シーケンスから作成することもできる。
  </para>
  <para>
    このチュートリアルでは ndarray の作成方法をいくつか紹介する。単位飛び幅（<foreignphrase xml:lang="en">unit stride</foreignphrase>）、非単位飛び幅（<foreignphrase xml:lang="en">non-unit stride</foreignphrase>）を使った、任意の Python シーケンスからの作成方法、C++ コンテナからの作成方法を扱う。
  </para>
  <para>
    まず、これまでと同様に必要な名前空間とランタイムを初期化する。
  </para>
  <programlisting language="C++"><![CDATA[#include <boost/python/numpy.hpp>
#include <iostream>

namespace p = boost::python;
namespace np = boost::python::numpy;

int main(int argc, char **argv)
{
  Py_Initialize();
  np::initialize();]]></programlisting>
  <para>
    単純なタプルから ndarray を作成するとしよう。始めに <classname>tuple</classname> オブジェクトを作成し、これを <methodname>array</methodname> メソッドに渡して必要なタプルを生成する。
  </para>
  <programlisting language="C++"><![CDATA[  p::object tu = p::make_tuple('a','b','c');
  np::ndarray example_tuple = np::array(tu);]]></programlisting>
  <para>
    リストで同じことをやってみよう。空の <classname>list</classname> を作成し、<methodname>append</methodname> メソッドで要素を 1 つ追加する。同様に <methodname>array</methodname> メソッドを呼び出す。
  </para>
  <programlisting language="C++"><![CDATA[  p::list l;
  l.append('a');
  np::ndarray example_list = np::array (l);]]></programlisting>
  <para>
    配列に対して dtype を指定することもできる。
  </para>
  <programlisting language="C++"><![CDATA[  np::dtype dt = np::dtype::get_builtin<int>();
  np::ndarray example_list1 = np::array (l,dt);]]></programlisting>
  <para>
    データ配列と数個の引数を与えて ndarray を作成することもできる。
  </para>
  <para>
    始めに整数の配列を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  int data[] = {1,2,3,4,5};]]></programlisting>
  <para>
    関数に必要な形状、飛び幅を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  p::tuple shape = p::make_tuple(5);
  p::tuple stride = p::make_tuple(sizeof(int));]]></programlisting>
  <para>
    形状を (4,) 、飛び幅を <code>sizeof(int)</code> とした。飛び幅は、ndarray の構築中に次の要素へ移動するときのバイト数である。
  </para>
  <para>
    渡した配列へのトラッキングを保持するための所有者も必要である。<constant>none</constant> を渡すのは危険である。
  </para>
  <programlisting language="C++"><![CDATA[  p::object own;]]></programlisting>
  <para>
    <function>from_data</function> 関数はデータ配列、データ型、形状、飛び幅、所有者を引数にとり、<classname>ndarray</classname> を返す。
  </para>
  <programlisting language="C++"><![CDATA[  np::ndarray data_ex1 = np::from_data(data,dt, shape,stride,own);]]></programlisting>
  <para>
    作成した ndarray を印字してみよう。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "単一次元の配列 ::" << std::endl
  << p::extract<char const *>(p::str(data_ex)) << std::endl;]]></programlisting>
  <para>
    もう少し面白いパターンにしてみよう。non-unit 飛び幅を使って多次元配列から 3×2 の ndarray を作成しよう。
  </para>
  <para>
    始めに 8 ビット整数の 3×4 配列を作成しよう。
  </para>
  <programlisting language="C++"><![CDATA[  uint8_t mul_data[][4] = {{1,2,3,4},{5,6,7,8},{1,3,5,7}};]]></programlisting>
  <para>
    各行の 1 番目と 3 番目の要素を取り出して 3×2 の配列を作成しよう。形状は 3×2 となる。飛び幅は 4×2 、つまり行方向が 4 バイトずつで列方向が 2 バイトずつである。
  </para>
  <programlisting language="C++"><![CDATA[  shape = p::make_tuple(3,2);
  stride = p::make_tuple(sizeof(uint8_t)*2,sizeof(uint8_t));]]></programlisting>
  <para>
    組み込みの 8 ビット整数データ型に対する numpy dtype を取得する。
  </para>
  <programlisting language="C++"><![CDATA[  np::dtype dt1 = np::dtype::get_builtin<uint8_t>();]]></programlisting>
  <para>
    それではまず ndarray を作成し、そのまま印字してみよう。所有者と同様に、形状と飛び幅も直接渡していることに注意していただきたい。所有者については「所有者」オブジェクトを操作する必要がないため、このような書き方ができる。
  </para>
  <programlisting language="C++"><![CDATA[  np::ndarray mul_data_ex = np::from_data(mul_data, dt1,
                                          p::make_tuple(3,4),
                                          p::make_tuple(4,1),
                                          p::object());
  std::cout << "元の多次元配列 :: " << std::endl
            << p::extract<char const *>(p::str(mul_data_ex)) << std::endl;]]></programlisting>
  <para>
    最後に形状と飛び幅を使って新しい ndarray を作成し、非単位飛び幅を使って作成した配列を印字する。
  </para>
  <programlisting language="C++"><![CDATA[  mul_data_ex = np::from_data(mul_data, dt1, shape, stride, p::object());
  std::cout << "選択的な多次元配列 :: "<<std::endl
            << p::extract<char const *>(p::str(mul_data_ex)) << std::endl ;
}]]></programlisting>
  <note>
    <para>
      形状と飛び幅が指定する要素数が一致しない場合、<methodname>from_data</methodname> メソッドは <exceptionname>error_already_set</exceptionname> を投げる。
    </para>
  </note>
</section>
