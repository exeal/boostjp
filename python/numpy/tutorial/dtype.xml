<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.tutorial.how-to-use-dtypes">
  <title>dtypes の使い方</title>

  <para>
    Python の組み込みのデータ型を用いた ndarray の作成、およびメンバ変数の型と値を抽出する方法について簡単なチュートリアルで説明する。
  </para>
  <para>
    前回同様、numpy コンポーネントに必要なヘッダと名前空間を準備し、Python のランタイムと numpy モジュールを初期化する。
  </para>
  <programlisting language="C++"><![CDATA[#include <boost/python/numpy.hpp>
#include <iostream>

namespace p = boost::python;
namespace np = boost::python::numpy;

int main(int argc, char **argv)
{
  Py_Initialize();
  np::initialize();]]></programlisting>
  <para>
    次に形状と dtype を作成する。<methodname>get_builtin</methodname> メソッドを使って組み込みの C++ dtype に対応する numpy の dtype を取得する。以下はサイズとして (3,3) のタプルを、データ型として <type>double</type> を渡して 3×3 の配列を作成している。
  </para>
  <programlisting language="C++"><![CDATA[  p::tuple shape = p::make_tuple(3, 3);
  np::dtype dtype = np::dtype::get_builtin<double>();
  np::ndarray a = np::zeros(shape, dtype);]]></programlisting>
  <para>
    最後に <package>python</package> 名前空間の <methodname>extract</methodname> メソッドを使えば配列を印字できる。始めに変数を文字列に変換し、次に &lt;char const * &gt; テンプレートを使って Python の文字列から C++ の文字配列として抽出する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "元の配列：\n" << p::extract<char const *>(p::str(a)) << std::endl;]]></programlisting>
  <para>
    <classname>ndarray</classname> の <methodname>get_dtype</methodname> メソッドを使って ndarray のデータメンバの dtype を印字できる。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "datatype は：\n" << p::extract<char const *>(p::str(a.get_dtype())) << std::endl ;]]></programlisting>
  <para>
    カスタムの dtype を作成して ndarray を構築することもできる。
  </para>
  <para>
    カスタムの dtype を作成するには <classname>dtype</classname> のコンストラクタを使う。このコンストラクタはリストを引数にとる。
  </para>
  <para>
    このリストは、形式（変数の名前と型）を表すタプルを 1 つ以上含まなければならない。
  </para>
  <para>
    そこでカスタムの dtype を作成するのに、始めに変数の名前と型（ここでは <type>double</type>）でタプルを作成する。
  </para>
  <programlisting language="C++"><![CDATA[  p::tuple for_custom_dtype = p::make_tuple("ha",dtype) ;]]></programlisting>
  <para>
    次にリストを作成し、タプルをリストに追加する。そしてリストを使ってカスタムの dtype を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  p::list list_for_dtype ;
  list_for_dtype.append(for_custom_dtype) ;
  np::dtype custom_dtype = np::dtype(list_for_dtype) ;]]></programlisting>
  <para>
    これで <varname>shape</varname> で指定した次元とカスタムの dtype をもつ ndarray を作成する準備が整った。
  </para>
  <programlisting language="C++"><![CDATA[  np::ndarray new_array = np::zeros(shape,custom_dtype);
}]]></programlisting>
</section>
