<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.tutorial.ufuncs">
  <title>ufunc</title>

  <para>
    ufunc またはユニバーサル関数は ndarray を要素ごとに操作する。またブロードキャスト
    <footnote>
      <para>
	訳注：型や次元の異なる ndarray 同士を計算する仕組み
      </para>
    </footnote>
    、型キャスト、その他機能をサポートする。
  </para>
  <para>
    二項及び単項の ufunc メソッドについて使い方を見ていこう。
  </para>
  <para>
    必要なファイルのインクルードを行った後、
  </para>
  <programlisting language="C++"><![CDATA[#include <boost/python/numpy.hpp>
#include <iostream>

namespace p = boost::python;
namespace np = boost::python::numpy;]]></programlisting>
  <para>
    ufunc の実装に必要な構造体を作成する。typedef は、ufunc 生成器がこれらの typedef を入力にとりそれ以外の場合にエラーを返すように<emphasis>しなければならない</emphasis>。
  </para>
  <programlisting language="C++"><![CDATA[struct UnarySquare
{
  typedef double argument_type;
  typedef double result_type;

  double operator()(double r) const { return r * r;}
};

struct BinarySquare
{
  typedef double first_argument_type;
  typedef double second_argument_type;
  typedef double result_type;

  double operator()(double a,double b) const { return (a*a + b*b) ; }
};]]></programlisting>
  <para>
    Python ランタイムと numpy モジュールを初期化する。
  </para>
  <programlisting language="C++"><![CDATA[int main(int argc, char **argv)
{
  Py_Initialize();
  np::initialize();]]></programlisting>
  <para>
    <classname>UnarySquare</classname> 構造体をクラスとして Python にエクスポートし、<varname>ud</varname> をクラスオブジェクトとする。
  </para>
  <programlisting language="C++"><![CDATA[  p::object ud = p::class_<UnarySquare, boost::shared_ptr<UnarySquare> >("UnarySquare");
  ud.def("__call__", np::unary_ufunc<UnarySquare>::make());]]></programlisting>
  <para>
    <varname>inst</varname> を <classname>ud</classname> クラスのインスタンスとする。
  </para>
  <programlisting language="C++"><![CDATA[  p::object inst = ud();]]></programlisting>
  <para>
    <methodname>__call__</methodname> メソッドを使って多重定義した <methodname>()</methodname> 演算子を呼び出し、値を印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "単項スカラ 1.0 の正方行列は " << p::extract<char const *>(p::str(inst.attr("__call__")(1.0))) << std::endl;]]></programlisting>
  <para>
    C++ で配列を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  int arr[] = {1,2,3,4} ;]]></programlisting>
  <para>
    この配列を使って、Python で ndarray を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  np::ndarray demo_array = np::from_data(arr, np::dtype::get_builtin<int>(),
                                         p::make_tuple(4),
                                         p::make_tuple(4),
                                         p::object());]]></programlisting>
  <para>
    このデモ配列を印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "デモ配列は " << p::extract<char const *>(p::str(demo_array)) << std::endl;]]></programlisting>
  <para>
    <methodname>__call__</methodname> メソッドを呼び出して、演算と <varname>result_array</varname> に代入する。
  </para>
  <programlisting language="C++"><![CDATA[  p::object result_array = inst.attr("__call__")(demo_array);]]></programlisting>
  <para>
    結果の配列を印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "デモ配列の正方行列は " << p::extract<char const *>(p::str(result_array)) << std::endl;]]></programlisting>
  <para>
    リストで同じことをしてみよう。
  </para>
  <programlisting language="C++"><![CDATA[  p::list li;
  li.append(3);
  li.append(7);]]></programlisting>
  <para>
    デモリストを印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "デモリストは " << p::extract<char const *>(p::str(li)) << std::endl;]]></programlisting>
  <para>
    このリストに対して ufunc を呼び出す。
  </para>
  <programlisting language="C++"><![CDATA[  result_array = inst.attr("__call__")(li);]]></programlisting>
  <para>
    そしてリストを印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "デモリストの正方行列は " << p::extract<char const *>(p::str(result_array)) << std::endl;]]></programlisting>
  <para>
    今度は二項 ufunc を試してみよう。同様に <classname>BinarySquare</classname> 構造体をクラスとして Python へエクスポートし、<varname>ud</varname> をクラスオブジェクトとする。
  </para>
  <programlisting language="C++"><![CDATA[  ud = p::class_<BinarySquare, boost::shared_ptr<BinarySquare> >("BinarySquare");
  ud.def("__call__", np::binary_ufunc<BinarySquare>::make());]]></programlisting>
  <para>
    そして <varname>ud</varname> を初期化する。
  </para>
  <programlisting language="C++"><![CDATA[  inst = ud();]]></programlisting>
  <para>
    2 つの入力リストを印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "二項 ufunc に対する 2 つの入力リストは " << std::endl
            << p::extract<char const *>(p::str(demo_array)) << std::endl
            << p::extract<char const *>(p::str(demo_array)) << std::endl;]]></programlisting>
  <para>
    二項 ufunc を呼び出し、両方の入力として <varname>demo_array</varname> を与える。
  </para>
  <programlisting language="C++"><![CDATA[  result_array = inst.attr("__call__")(demo_array,demo_array);]]></programlisting>
  <para>
    最後に出力を印字する。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "リストと二項 ufunc の正方行列は " << p::extract<char const *>(p::str(result_array)) << std::endl;
}]]></programlisting>
</section>
