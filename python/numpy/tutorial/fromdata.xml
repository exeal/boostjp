<?xml version="1.0" ?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.tutorial.how-to-access-data-using-raw-pointers">
  <title>生のポインタを使ってデータにアクセスする方法</title>

  <para>
    ndarray ラッパの利点の 1 つは、同じデータを Python と C++ の両方で使え、変更が両方に反映されることである。<methodname>from_data</methodname> メソッドがこれを可能にする。
  </para>
  <para>
    これまで同様、まず必要なヘッダファイルのインクルードと名前空間の準備を行い、Python ランタイムと numpy モジュールを初期化する。
  </para>
  <programlisting language="C++"><![CDATA[#include <boost/python/numpy.hpp>
#include <iostream>

namespace p = boost::python;
namespace np = boost::python::numpy;

int main(int argc, char **argv)
{
  Py_Initialize();
  np::initialize();]]></programlisting>
  <para>
    C++ で配列を作成し、そのポインタを <methodname>from_data</methodname> メソッドに渡して ndarray を作成する。
  </para>
  <programlisting language="C++"><![CDATA[  int arr[] = {1,2,3,4,5};
  np::ndarray py_array = np::from_data(arr, np::dtype::get_builtin<int>(),
                                       p::make_tuple(5),
                                       p::make_tuple(sizeof(int)),
                                       p::object());]]></programlisting>
  <para>
    元の C++ 配列と ndarray を印字し、同じであるかチェックする。
  </para>
  <programlisting language="C++"><![CDATA[  std::cout << "C++ array :" << std::endl;
  for (int j=0;j<4;j++)
  {
    std::cout << arr[j] << ' ';
  }
  std::cout << std::endl
            << "Python の ndarray :" << p::extract<char const *>(p::str(py_array)) << std::endl;]]></programlisting>
  <para>
    ここで Python の ndarray で要素 1 つを変更し、元の C++ 配列で値が変更されたかチェックする。
  </para>
  <programlisting language="C++"><![CDATA[  py_array[1] = 5 ;
  std::cout << "ndarray の作成に使用した C++ 配列に変更が反映されたか？" << std::endl;
  for (int j = 0; j < 5; j++)
  {
    std::cout << arr[j] << ' ';
  }]]></programlisting>
  <para>
    次に元の C++ 配列で要素 1 つを変更し、Python の ndarray に反映されたか見る。
  </para>
  <programlisting language="C++"><![CDATA[  arr[2] = 8;
  std::cout << std::endl
            << "Python の ndarray に変更が反映されたか？" << std::endl
            << p::extract<char const *>(p::str(py_array)) << std::endl;
}]]></programlisting>
  <para>
    以上のように、変更はフロントエンド間で反映される。<methodname>from_data</methodname> メソッドが C++ 配列を参照で渡して ndarray を作成し、データを格納するのに同じ場所を使っているため、このような結果になる。
  </para>
</section>
