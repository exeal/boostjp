<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.reference.binary_ufunc">
  <refmeta>
    <refentrytitle>binary_ufunc</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>binary_ufunc</refname>
    <refpurpose>
      <classname>binary_ufunc</classname> は、2 つの引数をブロードキャストするための中間ステップとして使う構造体である。これにより C++ 関数が ufunc ライクな関数に変換可能となる。
      <filename class="headerfile">&lt;boost/python/numpy/ufunc.hpp&gt;</filename> は <classname>binary_ufunc</classname> 構造体の定義をもつ。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv xml:id="numpy.reference.binary_ufunc.synopsis">
    <synopsis language="C++">namespace boost
{
namespace python
{
namespace numpy
{

template &lt;typename TUnaryFunctor,
          typename TArgument1=typename TBinaryFunctor::first_argument_type,
          typename TArgument2=typename TBinaryFunctor::second_argument_type,
          typename TResult=typename TUnaryFunctor::result_type>
struct <classname>binary_ufunc</classname>
{

  static object <methodname linkend="numpy.reference.binary_ufunc.accessors.call">call</methodname>(TUnaryFunctor &amp; self,
                     object const &amp; input1,
                     object const &amp; input2,
                     object const &amp; output) ;

  static object <methodname linkend="numpy.reference.binary_ufunc.accessors.make">make</methodname>();

};
}
}
}</synopsis>
  </refsynopsisdiv>

  <refsection xml:id="numpy.reference.binary_ufunc.constructors">
    <title>コンストラクタ</title>
    <orderedlist>
      <listitem xml:id="numpy.reference.binary_ufunc.constructors.0">
	<programlisting language="C++"><![CDATA[struct example_binary_ufunc
{
  typedef any_valid first_argument_type;
  typedef any_valid second_argument_type;
  typedef any_valid result_type;
};]]></programlisting>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>構造体のメソッドを正しく使用するために、<type>any_valid_type</type> は合法な C++ 型の typedef で定義しなければならない。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>注意：</term>
	    <listitem>
	      <para>この構造体は Python クラスとしてエクスポートしなければならない。またこのクラスのインスタンスは、Python オブジェクトの <methodname>__call__</methodname> 属性に対応する <methodname linkend="numpy.reference.binary_ufunc.accessors.call">call</methodname> メソッドを使用するのに作成しなければならない。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </refsection>

  <refsection xml:id="numpy.reference.binary_ufunc.accessors">
    <title>アクセッサ</title>
    <orderedlist>
      <listitem xml:id="numpy.reference.binary_ufunc.accessors.call">
	<methodsynopsis language="C++">
	  <modifier><![CDATA[template <typename TUnaryFunctor, typename TArgument1=typename TBinaryFunctor::first_argument_type, typename TArgument2=typename TBinaryFunctor::second_argument_type, typename TResult=typename TUnaryFunctor::result_type>]]></modifier>
	  <modifier>static</modifier>
	  <type>object</type>
	  <methodname>call</methodname>
	  <methodparam>
	    <type>TUnaryFunctor &amp;</type>
	    <parameter>self</parameter>
	  </methodparam>
	  <methodparam>
	    <type>object const &amp;</type>
	    <parameter>input1</parameter>
	  </methodparam>
	  <methodparam>
	    <type>object const &amp;</type>
	    <parameter>input2</parameter>
	  </methodparam>
	  <methodparam>
	    <type>object const &amp;</type>
	    <parameter>output</parameter>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para><type>TUnaryFunctor</type>。および引数の型を表す <type>TArgument1</type> 、<type>TArgument2</type> と戻り値の型を表す <type>TResult</type>（いずれも省略可能）。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>効果：</term>
	    <listitem>
	      <para>Python オブジェクトを、引数をブロードキャストした後 C++ 関数子に渡す。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.binary_ufunc.accessors.make">
	<methodsynopsis language="C++">
	  <modifier><![CDATA[template <typename TUnaryFunctor, typename TArgument1=typename TBinaryFunctor::first_argument_type, typename TArgument2=typename TBinaryFunctor::second_argument_type, typename TResult=typename TUnaryFunctor::result_type>]]></modifier>
	  <modifier>static</modifier>
	  <type>object</type>
	  <methodname>make</methodname>
	  <void/>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para><type>TUnaryFunctor</type>。および引数の型を表す <type>TArgument1</type> 、<type>TArgument2</type> と戻り値の型を表す <type>TResult</type>（いずれも省略可能）。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>（典型的な使い方として）構造体内で多重定義した <methodname>()</methodname> 演算子を呼び出すための Python オブジェクト。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </refsection>

  <refsection xml:id="numpy.reference.ndarray.examples">
    <title>使用例</title>
    <programlisting language="C++"><![CDATA[namespace p = boost::python;
namespace np = boost::python::numpy;

struct BinarySquare
{
  typedef double first_argument_type;
  typedef double second_argument_type;
  typedef double result_type;

  double operator()(double a,double b) const { return (a*a + b*b) ; }
};

p::object ud = p::class_<BinarySquare, boost::shared_ptr<BinarySquare> >("BinarySquare").def("__call__", np::binary_ufunc<BinarySquare>::make());
p::object inst = ud();
result_array = inst.attr("__call__")(demo_array,demo_array) ;
std::cout << "リストに二項 ufunc を適用した正方行列は " << p::extract <char const * > (p::str(result_array)) << std::endl ;]]></programlisting>
  </refsection>
</refentry>
