<?xml version="1.0" ?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="numpy.reference.ndarray">
  <refmeta>
    <refentrytitle>ndarray</refentrytitle>
  </refmeta>

  <refnamediv>
    <refname>ndarray</refname>
    <refpurpose>
      <link xlink:href="http://docs.scipy.org/doc/numpy/reference/arrays.ndarray.html">ndarray</link> は同一の型とサイズをもつ要素の N 次元配列である。N は次元数であり、タプル <parameter>shape</parameter> の形式で指定する。内容のオブジェクトについて numpy の dtype を指定することもできる。
      <filename class="headerfile">&lt;boost/python/numpy/ndarray.hpp&gt;</filename> は、生のポインタを C++ と Python 間で移動し、データから ndarray を作成するのに必要な構造体とメソッドを含む。
    </refpurpose>
  </refnamediv>

  <refsynopsisdiv xml:id="numpy.reference.ndarray.synopsis">
    <synopsis language="C++">namespace boost
{
namespace python
{
namespace numpy
{

class <classname>ndarray</classname> : public object
{

public:

  enum <type role="enum">bitflag</type>
  {
    NONE=0x0, C_CONTIGUOUS=0x1, F_CONTIGUOUS=0x2, V_CONTIGUOUS=0x1|0x2,
    ALIGNED=0x4, WRITEABLE=0x8, BEHAVED=0x4|0x8,
    CARRAY_RO=0x1|0x4, CARRAY=0x1|0x4|0x8, CARRAY_MIS=0x1|0x8,
    FARRAY_RO=0x2|0x4, FARRAY=0x2|0x4|0x8, FARRAY_MIS=0x2|0x8,
    UPDATE_ALL=0x1|0x2|0x4, VARRAY=0x1|0x2|0x8, ALL=0x1|0x2|0x4|0x8
  };

  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.view">view</methodname>(<classname>dtype</classname> const &amp; dt) const;
  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.astype">astype</methodname>(<classname>dtype</classname> const &amp; dt) const;
  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.copy">copy</methodname>() const;
  int const <methodname linkend="numpy.reference.ndarray.accessors.shape">shape</methodname>(int n) const;
  int const <methodname linkend="numpy.reference.ndarray.accessors.strides">strides</methodname>(int n) const;
  char * <methodname linkend="numpy.reference.ndarray.accessors.get_data">get_data</methodname>() const;
  <classname>dtype</classname> <methodname linkend="numpy.reference.ndarray.accessors.get_dtype">get_dtype</methodname>() const;
  python::object <methodname linkend="numpy.reference.ndarray.accessors.get_base">get_base</methodname>() const;
  void <methodname linkend="numpy.reference.ndarray.accessors.set_base">set_base</methodname>(object const &amp; base);
  Py_intptr_t const * <methodname linkend="numpy.reference.ndarray.accessors.get_shape">get_shape</methodname>() const;
  Py_intptr_t const * <methodname linkend="numpy.reference.ndarray.accessors.get_strides">get_strides</methodname>() const;
  int const <methodname linkend="numpy.reference.ndarray.accessors.get_nd">get_nd</methodname>() const;

  <type role="enum">bitflag</type> const <methodname linkend="numpy.reference.ndarray.accessors.get_flags">get_flags</methodname>() const;

  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.transpose">transpose</methodname>() const;
  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.squeeze">squeeze</methodname>() const;
  <classname>ndarray</classname> <methodname linkend="numpy.reference.ndarray.constructors.reshape">reshape</methodname>(tuple const &amp; shape) const;
  object <methodname linkend="numpy.reference.ndarray.constructors.scalarize">scalarize</methodname>() const;
};

<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.zeros">zeros</function>(tuple const &amp; shape, dtype const &amp; dt);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.zeros">zeros</function>(int nd, Py_intptr_t const * shape, dtype const &amp; dt);

<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.empty">empty</function>(tuple const &amp; shape, dtype const &amp; dt);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.empty">empty</function>(int nd, Py_intptr_t const * shape, dtype const &amp; dt);

<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.array">array</function>(object const &amp; obj);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.array">array</function>(object const &amp; obj, dtype const &amp; dt);

template &lt;typename Container&gt;
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_data">from_data</function>(void * data,dtype const &amp; dt,Container shape,Container strides,python::object const &amp; owner);
template &lt;typename Container&gt;
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_data">from_data</function>(void const * data, dtype const &amp; dt, Container shape, Container strides, object const &amp; owner);

<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.0">from_object</function>(object const &amp; obj, dtype const &amp; dt,int nd_min, int nd_max, ndarray::bitflag flags=ndarray::NONE);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.1">from_object</function>(object const &amp; obj, dtype const &amp; dt,int nd, ndarray::bitflag flags=ndarray::NONE);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.2">from_object</function>(object const &amp; obj, dtype const &amp; dt, ndarray::bitflag flags=ndarray::NONE);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.3">from_object</function>(object const &amp; obj, int nd_min, int nd_max,ndarray::bitflag flags=ndarray::NONE);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.4">from_object</function>(object const &amp; obj, int nd, ndarray::bitflag flags=ndarray::NONE);
<classname>ndarray</classname> <function linkend="numpy.reference.ndarray.constructors.from_object.5">from_object</function>(object const &amp; obj, ndarray::bitflag flags=ndarray::NONE)

<type role="enum">ndarray::bitflag</type> <function linkend="numpy.reference.ndarray.accessors.operator-bitor">operator|</function>(<type role="enum">ndarray::bitflag</type> a, <type role="enum">ndarray::bitflag</type> b) ;
<type role="enum">ndarray::bitflag</type> <function linkend="numpy.reference.ndarray.accessors.operator-bitand">operator&amp;</function>(<type role="enum">ndarray::bitflag</type> a, <type role="enum">ndarray::bitflag</type> b);

}</synopsis>
  </refsynopsisdiv>

  <refsection xml:id="numpy.reference.ndarray.constructors">
    <title>コンストラクタ</title>
    <orderedlist>
      <listitem xml:id="numpy.reference.ndarray.constructors.view">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>view</methodname>
	  <methodparam>
	    <type>dtype const &amp;</type>
	    <parameter>dt</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>古い ndarray を与えられたデータ型でキャストした新しい ndarray。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.astype">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>astype</methodname>
	  <methodparam>
	    <type>dtype const &amp;</type>
	    <parameter>dt</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>古い ndarray を与えられたデータ型へ変換した新しい ndarray。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.copy">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>copy</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>呼び出した <classname>ndarray</classname> のコピー。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.transpose">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>transpose</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>行と列を入れ替えた <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.squeeze">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>squeeze</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>大きさが 1 の次元を全て削除した <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.reshape">
	<methodsynopsis language="C++">
	  <type>ndarray</type>
	  <methodname>reshape</methodname>
	  <methodparam>
	    <type>tuple const &amp;</type>
	    <parameter>shape</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para><classname>ndarray</classname> の新しい <parameter>shape</parameter> はタプルとして与えなければならない</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>データが同じで、与えられた <parameter>shape</parameter> に変形した <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.scalarize">
	<methodsynopsis language="C++">
	  <type>object</type>
	  <methodname>scalarize</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para><classname>ndarray</classname> の要素がただ 1 つの場合はそのスカラー。それ以外の場合は配列全体。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.zeros">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>zeros</function></funcdef>
	    <paramdef>
	      <type>tuple const &amp;</type>
	      <parameter>shape</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>zeros</function></funcdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Py_intptr_t const *</type>
	      <parameter>shape</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>
		以下の引数を必ず与えなければならない。
	      </para>
	      <itemizedlist>
		<listitem>
		  <para><parameter>shape</parameter> か全次元の数（タプル）</para>
		</listitem>
		<listitem>
		  <para>データの <classname>dtype</classname></para>
		</listitem>
		<listitem>
		  <para>正方行列に対する <parameter>nd</parameter> サイズ</para>
		</listitem>
		<listitem>
		  <para>Py_intptr_t 型の <parameter>shape</parameter></para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えた形状、データ型の <classname>ndarray</classname>。データは 0 で初期化される。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.empty">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>empty</function></funcdef>
	    <paramdef>
	      <type>tuple const &amp;</type>
	      <parameter>shape</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>empty</function></funcdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Py_intptr_t const *</type>
	      <parameter>shape</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><parameter>shape</parameter> か全次元の数（タプル）</para>
		</listitem>
		<listitem>
		  <para>データの <classname>dtype</classname></para>
		</listitem>
		<listitem>
		  <para>Py_intptr_t 型の <parameter>shape</parameter></para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えた形状、データ型の新しい <classname>ndarray</classname>。データは未初期化のままとなる。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.array">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>array</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>array</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>任意の Python シーケンスから得た新しい <classname>ndarray</classname>。各要素の型はオプション引数で指定した dtype となる。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_data">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>template &lt;typename Container&gt; inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_data</function></funcdef>
	    <paramdef>
	      <type>void *</type>
	      <parameter>data</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Container</type>
	      <parameter>shape</parameter>
	    </paramdef>
	    <paramdef>
	      <type>Container</type>
	      <parameter>strides</parameter>
	    </paramdef>
	    <paramdef>
	      <type>python::object const &amp;</type>
	      <parameter>owner</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para>汎用的な C++ データコンテナ <parameter>data</parameter>。</para>
		</listitem>
		<listitem>
		  <para>データの dtype を表す <parameter>dt</parameter>。</para>
		</listitem>
		<listitem>
		  <para>ndarray の <parameter>shape</parameter>（形状）を表す Python オブジェクト。</para>
		</listitem>
		<listitem>
		  <para>配列の各次元の飛び幅を表す Python オブジェクト <parameter>strides</parameter>。</para>
		</listitem>
		<listitem>
		  <para>（所有者が ndarray 自身でない場合）データの所有者 <parameter>owner</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えられた属性とデータをもつ <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>注意：</term>
	    <listitem>
	      <para>typename <type>Container</type> は <classname>std::vector</classname> か Python のオブジェクト型のいずれかに変換可能でなければならない。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.0">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd_min</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd_max</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<listitem>
		  <para>データの dtype を表す <parameter>dt</parameter>。</para>
		</listitem>
		<listitem>
		  <para><classname>ndarray</classname> の最小次元数を表す Python オブジェクト <parameter>nd_min</parameter>。</para>
		</listitem>
		<listitem>
		  <para><classname>ndarray</classname> の最大次元数を表す Python オブジェクト <parameter>nd_max</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>引数で与えられた次元とデータで構築した <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>注意：</term>
	    <listitem>
	      <para>typename <type>Container</type> は <classname>std::vector</classname> か Python のオブジェクト型のいずれかに変換可能でなければならない。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.1">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<listitem>
		  <para>データの dtype を表す <parameter>dt</parameter>。</para>
		</listitem>
		<listitem>
		  <para><classname>ndarray</classname> の次元数を表す Python オブジェクト <parameter>nd</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>引数で与えた属性をもつ <parameter>nd</parameter> × <parameter>nd</parameter> 次元の <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.2">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>dtype const &amp;</type>
	      <parameter>dt</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<listitem>
		  <para>データの dtype を表す <parameter>dt</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えた Python オブジェクトの <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.3">
	<funcsynopsis language="C++">
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd_min</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd_max</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<listitem>
		  <para><classname>ndarray</classname> の最小次元数を表す Python オブジェクト <parameter>nd_min</parameter>。</para>
		</listitem>
		<listitem>
		  <para><classname>ndarray</classname> の最大次元数を表す Python オブジェクト <parameter>nd_max</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>引数で与えられた次元数制限と属性をもつ <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.4">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>int</type>
	      <parameter>nd</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<!-- 原文には dtype の説明があるが、引数には無いので削除した -->
		<listitem>
		  <para><classname>ndarray</classname> の次元数を表す Python オブジェクト <parameter>nd</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えたオブジェクトから構築した <parameter>nd</parameter> × <parameter>nd</parameter> 次元の <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.constructors.from_object.5">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray <function>from_object</function></funcdef>
	    <paramdef>
	      <type>object const &amp;</type>
	      <parameter>obj</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>flags</parameter>
	      <initializer>ndarray::NONE</initializer>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>要件：</term>
	    <listitem>
	      <para>以下の引数を与えなければならない。</para>
	      <itemizedlist>
		<listitem>
		  <para><classname>ndarray</classname> に変換する Python オブジェクト <parameter>obj</parameter>。</para>
		</listitem>
		<listitem>
		  <para>省略可能なビットフラグ <parameter>flags</parameter>。</para>
		</listitem>
	      </itemizedlist>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>与えた Python オブジェクトと同じ次元と dtype の <classname>ndarray</classname>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </refsection>

  <refsection xml:id="numpy.reference.ndarray.accessors">
    <title>アクセッサ</title>
    <orderedlist>
      <listitem xml:id="numpy.reference.ndarray.accessors.shape">
	<methodsynopsis language="C++">
	  <type>int const</type>
	  <methodname>shape</methodname>
	  <methodparam>
	    <type>int</type>
	    <parameter>n</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>ndarray の <parameter>n</parameter> 次元目のサイズ。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.strides">
	<methodsynopsis language="C++">
	  <type>int const</type>
	  <methodname>strides</methodname>
	  <methodparam>
	    <type>int</type>
	    <parameter>n</parameter>
	  </methodparam>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para><parameter>n</parameter> 次元目の飛び幅。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_data">
	<methodsynopsis language="C++">
	  <type>char*</type>
	  <methodname>get_data</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列の生データ（<type>char</type> 型）のポインタ。</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>注意：</term>
	    <listitem>
	      <para><type>char</type> を返すため、飛び幅の算出が有効である。ユーザは reinterpret_cast を使わなければならない。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_base">
	<methodsynopsis language="C++">
	  <type>object</type>
	  <methodname>get_base</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列のデータを所有するオブジェクト、または配列が自身のデータを所有する場合は <constant>None</constant>。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.set_base">
	<methodsynopsis language="C++">
	  <type>void</type>
	  <methodname>set_base</methodname>
	  <methodparam>
	    <type>object const &amp;</type>
	    <parameter>base</parameter>
	  </methodparam>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列のデータを所有するオブジェクトを設定する。このメソッドの使用には注意を要する。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_shape">
	<methodsynopsis language="C++">
	  <type>Py_intptr_t const *</type>
	  <methodname>get_shape</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列の形状を表す整数配列。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_strides">
	<methodsynopsis language="C++">
	  <type>Py_intptr_t const *</type>
	  <methodname>get_strides</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列の飛び幅を表す整数配列。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_nd">
	<methodsynopsis language="C++">
	  <type>inr const</type>
	  <methodname>get_nd</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列の次元数。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.get_flags">
	<methodsynopsis language="C++">
	  <type>bitflag const</type>
	  <methodname>get_flags</methodname>
	  <void/>
	  <modifier>const</modifier>
	</methodsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>配列のフラグ。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.operator-bitor">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray::bitflag <function>operator|</function></funcdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>a</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>b</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>ビットフラグの論理和（<code language="C++">a | b</code>）。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>

      <listitem xml:id="numpy.reference.ndarray.accessors.operator-bitand">
	<funcsynopsis language="C++">
	  <funcsynopsisinfo>inline</funcsynopsisinfo>
	  <funcprototype>
	    <?dbhtml funcsynopsis-style="ansi"?>
	    <funcdef>ndarray::bitflag <function>operator&amp;</function></funcdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>a</parameter>
	    </paramdef>
	    <paramdef>
	      <type>ndarray::bitflag</type>
	      <parameter>b</parameter>
	    </paramdef>
	  </funcprototype>
	</funcsynopsis>
	<variablelist spacing="compact">
	  <varlistentry>
	    <term>戻り値：</term>
	    <listitem>
	      <para>ビットフラグの論理積（<code language="C++">a &amp; b</code>）。</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </listitem>
    </orderedlist>
  </refsection>

  <refsection xml:id="numpy.reference.ndarray.examples">
    <title>使用例</title>
    <programlisting language="C++"><![CDATA[namespace p = boost::python;
namespace np = boost::python::numpy;

p::object tu = p::make_tuple('a','b','c') ;
np::ndarray example_tuple = np::array (tu) ;

p::list l ;
np::ndarray example_list = np::array (l) ;

np::dtype dt = np::dtype::get_builtin<int>();
np::ndarray example_list1 = np::array (l,dt);

int data[] = {1,2,3,4} ;
p::tuple shape = p::make_tuple(4) ;
p::tuple stride = p::make_tuple(4) ;
p::object own ;
np::ndarray data_ex = np::from_data(data,dt,shape,stride,own);

uint8_t mul_data[][4] = {{1,2,3,4},{5,6,7,8},{1,3,5,7}};
shape = p::make_tuple(3,2) ;
stride = p::make_tuple(4,2) ;
np::dtype dt1 = np::dtype::get_builtin<uint8_t>();

np::ndarray mul_data_ex = np::from_data(mul_data,dt1, p::make_tuple(3,4),p::make_tuple(4,1),p::object());
mul_data_ex = np::from_data(mul_data,dt1, shape,stride,p::object());]]></programlisting>
  </refsection>
</refentry>
