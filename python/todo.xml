<?xml version="1.0" ?>
<!--
  Copyright David Abrahams 2006. Distributed under the Boost
  Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="todo">
  <info>
    <copyright>
      <year>2003</year>
      <holder>David Abrahams</holder>
    </copyright>
    <legalnotice>
      <remark>
	Use, modification, and distribution are subject to the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
      </remark>
    </legalnotice>
    <title>TODO リスト</title>
  </info>

  <section xml:id="todo.class-support">
    <title>クラスのサポート</title>

    <section xml:id="todo.base-class-for-virtual-function-callback-wrappers">
      <title>仮想関数コールバックラッパの基底クラス</title>
      <itemizedlist>
	<listitem>
	  <para><uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1456023">http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1456023</uri>（メッセージの最後を見よ）</para>
	</listitem>
	<listitem>
	  <para><uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2003-August/005297.html">http://mail.python.org/pipermail/c++-sig/2003-August/005297.html</uri>（<classname>VirtualDispatcher</classname> で検索するとよい）に、コールバッククラスがその Python ラッパとの関係について所有権を交換する方法が述べられている。</para>
	</listitem>
	<listitem>
	  <para><uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1860301">http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1860301</uri> に、基底クラスを使ってコールバッククラスを非常に単純化し、「懸垂参照」問題を解決し、オーバーライドされていない仮想関数の呼び出すを最適化する方法が述べられている。</para>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="todo.miscellaneous">
    <title>その他</title>

    <section xml:id="todo.support-for-enums-with-duplicate-values">
      <title>値が重複した enum のサポート</title>
      <para>
	<personname>Scott Snyder</personname> がパッチを提供している。<personname>Dave</personname> はある理由から不満だったが、これ以上のアクションが無ければおそらく適用されるだろう（<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1824616">http://aspn.activestate.com/ASPN/Mail/Message/1824616</uri>）。
      </para>
    </section>
  </section>

  <section xml:id="todo.functions">
    <title>関数</title>

    <section xml:id="todo.wrapping-function-objects">
      <title>関数オブジェクトのラップ</title>
      <para>
	<methodname>operator()</methodname> をサポートするクラスは Python のメソッドとしてラップ可能となるだろう（<uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2003-August/005184.html">http://mail.python.org/pipermail/c++-sig/2003-August/005184.html</uri>）。
      </para>
    </section>

    <section xml:id="todo.best-match-overload-resolution">
      <title>多重定義解決の「最良マッチ」</title>
      <para>
	現時点では多重定義の解決はdefの呼び出し順に依存する（後の多重定義を優先する）。これは常に最良マッチの多重定義を選択するよう変更すべきである。このテクニックはすでに <link xlink:href="http://luabind.sf.net/">Luabind</link> で培われているので、<link linkend="todo.langbinding">Langbinding</link> の合流待ちとなっている。
      </para>
    </section>
  </section>

  <section xml:id="todo.type-converters">
    <title>型変換器</title>

    <section xml:id="todo.lvalue-conversions-from-non-const-pytypeobject-s">
      <title>非 const な <type>PyTypeObject*</type> から lvalue への変換</title>
      <para>
	<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1662717">http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1662717</uri>
      </para>
    </section>

    <section xml:id="todo.converter-scoping">
      <title>変換器のスコープ制御</title>
      <itemizedlist>
	<listitem>
	  <para><uri type="webpage" xlink:href="http://article.gmane.org/gmane.comp.python.c++/2044">http://article.gmane.org/gmane.comp.python.c++/2044</uri></para>
	</listitem>
	<listitem>
	  <para>上記が完了すれば <link linkend="todo.langbinding">Luabind の統合</link>と合流することになるだろう。</para>
	</listitem>
      </itemizedlist>
    </section>

    <section xml:id="todo.boost-tuple">
      <title><classname>boost::tuple</classname></title>
      <para>
	Python との相互変換は問題なさそうである。<uri type="webpage" xlink:href="http://news.gmane.org/find-root.php?message_id=%3cuvewak97m.fsf%40boost%2dconsulting.com%3e">http://news.gmane.org/find-root.php?message_id=%3cuvewak97m.fsf%40boost%2dconsulting.com%3e</uri> を見よ。
      </para>
    </section>

    <section xml:id="todo.file-conversions">
      <title><type>FILE*</type> の変換</title>
      <para>
	<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1411366">http://aspn.activestate.com/ASPN/Mail/Message/1411366</uri>
      </para>
    </section>

    <section xml:id="todo.void-conversions">
      <title><type>void*</type> の変換</title>
      <para>
	<replaceable>CV</replaceable> <type>void</type> へのポインタは、不透明な値として関数へ渡したり関数から返したりできるべきである。
      </para>
    </section>

    <section xml:id="todo.post-call-actions">
      <title>呼び出し後（<foreignphrase xml:lang="en">Post-Call</foreignphrase>）のアクション</title>
      <para>
	Policies オブジェクト内の post-call アクションチェインに from-python 変換器を渡さなければならない（追加のアクションが登録可能な場合）。<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1755435">http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1755435</uri> の最後を見よ。
      </para>
    </section>

    <section xml:id="todo.pyunicode-support">
      <title><type>PyUnicode</type> のサポート</title>
      <para>
	<personname xlink:href="mailto:qinlj-at-solidshare.com">Lijun Qin</personname> によるレビューが <uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1771145">http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1771145</uri> にある。この変更は組み入れる可能性が高い。
      </para>
    </section>

    <section xml:id="todo.ownership-metadata">
      <title>所有権のメタデータ</title>
      <para>
	<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1860301">http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1860301</uri> のスレッドにおいて、<personname>Niall Douglas</personname> は「偽の」懸垂ポインタ・参照がオブジェクトに関するデータをアタッチすることでエラーを返すという解法のアイデアについて述べた。そのデータの寿命について伝えてこないオブジェクトの参照カウントをフレームワークが決められる。
      </para>
    </section>
  </section>

  <section xml:id="todo.documentation">
    <title>ドキュメンテーション</title>

    <section xml:id="todo.builtin-converters">
      <title>組み込みの変換器</title>
      <para>
	組み込みの Python 型と C++ 型間の組み込みの対応関係についてドキュメントが必要である。
      </para>
    </section>

    <section xml:id="todo.internals">
      <title>内部的な話</title>
      <para>
	フレームワークの構造についてドキュメントしておく必要がある。<personname xlink:href="mailto:brett.calcott-at-paradise.net.nz">Brett Calcott</personname> が<link linkend="internals">このドキュメント</link>をユーザ向けに書き直すと約束してくれた。
      </para>
    </section>
  </section>

  <section xml:id="todo.large-scale">
    <title>大規模</title>

    <section xml:id="todo.full-threading-support">
      <title>スレッドの完全なサポート</title>
      <para>
	Boost.Python におけるスレッドサポートの強化について、多くの人々からパッチが寄せられている（例えば <uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1826544">http://aspn.activestate.com/ASPN/Mail/Message/1826544</uri> や <uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1865842">http://aspn.activestate.com/ASPN/Mail/Message/1865842</uri> のスレッドを見よ）。唯一の問題はこれらが不完全な解法であることで、完全な解法があるのか検証するには時間と注意が必要である。
      </para>
    </section>

    <section xml:id="todo.langbinding">
      <title>Langbinding</title>
      <para>
	このプロジェクトは Boost.Python を一般化して他の言語で動作するもので、一番手は Lua である。<uri type="webpage" xlink:href="http://lists.sourceforge.net/lists/listinfo/boost-langbinding">http://lists.sourceforge.net/lists/listinfo/boost-langbinding</uri> の議論を見よ。
      </para>
    </section>

    <section xml:id="todo.refactoring-and-reorganization">
      <title>リファクタリングと再構成</title>
      <para>
	<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1673338">http://aspn.activestate.com/ASPN/Mail/Message/c++-sig/1673338</uri>
      </para>
    </section>

    <section xml:id="todo.numarray-support-enhancements">
      <title>NumArray サポートの強化</title>
      <para>
	<uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1757092">http://aspn.activestate.com/ASPN/Mail/Message/C++-sig/1757092</uri> で述べられている強化について統合を検討する。
      </para>
    </section>

    <section xml:id="todo.pyfinalize-safety">
      <title><function>PyFinalize</function> の安全性</title>
      <para>
	現在のところ、Boost.Python にはグローバル（および関数内静的）オブジェクトが複数あり、それらは Boost.Python 共有オブジェクトがアンロードされるまで参照カウントがゼロにならない。インタープリタが存在しない状態で参照カウントがゼロになるので、クラッシュを引き起こす。<function>PyFinalize()</function> の呼び出しを安全にするには、これらのオブジェクトを破壊し Python の参照カウントを解放する <function>atexit</function> ルーチンを登録して、Python がインタープリタが存在している間にそれらを始末できるようにしなければならない。<personname xlink:href="mailto:dirk-at-gerrits.homeip.net">Dick Gerrits</personname> が何とかすると約束してくれた。
      </para>
    </section>
  </section>
</section>
