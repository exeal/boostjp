<?xml version="1.0" ?>
<!--
  Copyright David Abrahams 2006. Distributed under the Boost
  Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="news">
  <title>新着情報・変更履歴</title>

  <section>
    <title>現在の SVN</title>
    <itemizedlist>
      <listitem>
	<para>Python 3 のサポート</para>
	<itemizedlist>
	  <listitem>
	    <para>現時点の Boost.Python テストはすべてパスした。Boost.Python を使用している拡張モジュールはスムースに Python 3 をサポートすると考えてよい。</para>
	  </listitem>
	  <listitem>
	    <para><methodname>object.contains</methodname> を導入した（<code language="C++">x.contains(y)</code> は Python の <code language="Python">y in x</code> と等価である）。<methodname>dict.has_key</methodname> は <methodname>object.contains</methodname> のラッパに過ぎない。</para>
	  </listitem>
	  <listitem>
	    <para>Python 3 に対してビルドすると、<methodname>str.decode</methodname> は削除される。</para>
	  </listitem>
	  <listitem>
	    <para>
	      Python 3 に対してビルドすると、<methodname>list.sort</methodname> の元のシグニチャが次のとおりだったのが
	    </para>
	    <programlisting language="C++">void sort(object_cref cmpfunc);</programlisting>
	    <para>
	      次のように変更となる。
	    </para>
	    <programlisting language="C++">void sort(args_proxy const &amp;args, kwds_proxy const &amp;kwds);</programlisting>
	    <para>
	      これは Python 3 において <methodname>list.sort</methodname> がすべての引数がキーワード引数であることを要求するからである。よって呼び出しは次のようにしなければならない。
	    </para>
	    <programlisting language="C++">x.sort(*tuple(), **dict(make_tuple(make_tuple("reverse", true))));</programlisting>
	  </listitem>
	  <listitem>
	    <para>
	      <link xlink:href="http://www.python.org/dev/peps/pep-3123/">PEP 3123</link> に従い、2.6 より前の Python に対して Boost.Python をビルドすると、Boost.Python のヘッダで以下のマクロが定義される。
	    </para>
	    <programlisting language="C++"># define Py_TYPE(o)    (((PyObject*)(o))-&gt;ob_type)
# define Py_REFCNT(o)  (((PyObject*)(o))-&gt;ob_refcnt)
# define Py_SIZE(o)    (((PyVarObject*)(o))-&gt;ob_size)</programlisting>
	    <para>
	      よって拡張の作成者はこれらのマクロを直接使用して、コードを簡潔かつ Python 3 と互換にできる。
	    </para>
	  </listitem>
	</itemizedlist>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>1.39.0 リリース</title>
    <itemizedlist>
      <listitem>
	<para>Python のシグニチャが自動的にドキュメンテーション文字列に結合されるようになった。</para>
      </listitem>
      <listitem>
	<para>ドキュメンテーション文字列の内容を制御するには <filename class="headerfile" linkend="v2.docstring_options">docstring_options.hpp</filename> ヘッダを使用せよ。</para>
      </listitem>
      <listitem>
	<para>この新機能によりモジュールのサイズが約 14% 増加する。これが許容できない場合は、マクロ <symbol>BOOST_PYTHON_NO_PY_SIGNATURES</symbol> を定義することで無効化できる。このマクロを定義してコンパイルしたモジュールとそうでないモジュールは互換性がある。</para>
      </listitem>
      <listitem>
	<para><symbol>BOOST_PYTHON_NO_PY_SIGNATURES</symbol> が定義されていない場合、現行のバージョンではマクロ <symbol>BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</symbol> が定義される。これにより以前のバージョンの Boost.Python でコンパイルする可能性のあるコードが記述できる（<link linkend="v2.pytype_function.examples">ここ</link>を見よ）。</para>
      </listitem>
      <listitem>
	<para><symbol>BOOST_PYTHON_PY_SIGNATURES_PROPER_INIT_SELF_TYPE</symbol> を定義すると（サイズが 14% 増加するが）、<methodname>__init__</methodname> メソッドの <parameter>self</parameter> 引数に対して適切な Python 型が生成される。</para>
      </listitem>
      <listitem>
	<para>この新機能をサポートするために <filename class="headerfile" linkend="v2.to_python_converter">to_python_converter.hpp</filename> 、<classname linkend="v2.default_call_policies">default_call_policies</classname> 、<wordasword linkend="v2.ResultConverter">ResultConverter</wordasword> 、​<wordasword linkend="v2.CallPolicies">CallPolicies</wordasword> 等に変更が入った。これらはインターフェイスを破壊するような変更にならないようにした。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>1.34.0 リリース（2007 年 5 月 12 日）</title>
    <itemizedlist>
      <listitem>
	<para>C++ のシグニチャが自動的にドキュメンテーション文字列に結合されるようになった。</para>
      </listitem>
      <listitem>
	<para>ドキュメンテーション文字列の内容を制御する <filename class="headerfile" linkend="v2.docstring_options">docstring_options.hpp</filename> ヘッダを新規に追加した。</para>
      </listitem>
      <listitem>
	<para>戻り値ポリシーである <wordasword linkend="v2.opaque">opaque_pointer_converter</wordasword> による <type>void*</type> と Python の相互変換をサポートした。初期のパッチについて <personname>Niall Douglas</personname> に感謝する。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>1.33.1 リリース（2005 年 10 月 19 日）</title>
    <itemizedlist>
      <listitem>
	<para><classname>wrapper&lt;T&gt;</classname> が <classname><replaceable>some-smart-pointer</replaceable>&lt;T&gt;</classname> の保持型とともに使用できるようになった。</para>
      </listitem>
      <listitem>
	<para>ビルドで想定する既定の Python のバージョンを 2.2 から 2.4 に変更した。</para>
      </listitem>
      <listitem>
	<para>Unicode サポートなしでビルドした Python をサポートした。</para>
      </listitem>
      <listitem>
	<para>アドレス（<code language="C++">&amp;</code>）演算子を多重定義したクラスのラップをサポートした。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>1.33 リリース（2005 年 8 月 14 日）</title>
    <itemizedlist>
      <listitem>
	<para>非静的プロパティのドキュメンテーション文字列をサポートした。</para>
      </listitem>
      <listitem>
	<para><classname>init&lt;optional&lt;&gt; &gt;</classname> および <symbol>XXX_FUNCTION_OVERLOADS()</symbol> の最後の多重定義に対してのみクライアントが提供したドキュメンテーション文字列をエクスポートするようにした。</para>
      </listitem>
      <listitem>
	<para>組み込み <application class="software">VC++ 4</application> のサポートをいくつか修正した。</para>
      </listitem>
      <listitem>
	<para><classname>shared_ptr</classname> の Python から rvalue への変換のサポートを強化した。所有する Python オブジェクトが正しい型の NULL の <classname>shared_ptr</classname> を持た<emphasis>ない限り</emphasis>、常に Python オブジェクトを保持するポインタを返す。</para>
      </listitem>
      <listitem>
	<para>indexing suite を用いた <classname>vector&lt;T*&gt;</classname> のエクスポートをサポートした。</para>
      </listitem>
      <listitem>
	<para>MacOS における <application class="software">GCC-3.3</application> をサポートした。</para>
      </listitem>
      <listitem>
	<para><application class="software">Visual Studio</application> のプロジェクトビルドファイルを更新し、新しく 2 つのファイル（<filename>slice.cpp</filename> および <filename>wrapper.cpp</filename>）を追加した。</para>
      </listitem>
      <listitem>
	<para>索引のページに検索機能を追加した。</para>
      </listitem>
      <listitem>
	<para>チュートリアルを大幅に修正した。</para>
      </listitem>
      <listitem>
	<para><application class="software">MSVC</application> 6 および 7 、<application class="software">GCC</application> 2.96 、<application class="software">EDG</application> 2.45 のバグ回避コードを大量に追加した。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>2005 年 3 月 11 日</title>
    <para>
      間抜けな PyDoc が Boost.Python で動作するようハックを追加した。<personname>Nick Rasmussen</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>1.32 リリース（2004 年 11 月 19 日）</title>
    <itemizedlist>
      <listitem>
	<para>Boost Software Licese を使用するよう更新した。</para>
      </listitem>
      <listitem>
	<para><link linkend="tutorial.exposing..class_virtual_functions">仮想関数を持つクラスをラップするより優れた方法</link>を新規に実装した。</para>
      </listitem>
      <listitem>
	<para>次期 <application class="software">GCC</application> のシンボルエクスポート制御機能のサポートを取り込んだ。<personname>Niall Douglas</personname> に感謝する。</para>
      </listitem>
      <listitem>
	<para><classname>std::auto_ptr</classname> ライクな型のサポートを改良した。</para>
      </listitem>
      <listitem>
	<para>関数引数型のトップレベル CV 指定子が関数型の一部分となる <application class="software">Visual C++</application> のバグを回避した。</para>
      </listitem>
      <listitem>
	<para>依存関係改善のため、他のライブラリが使用するコンポーネントを <filename class="directory">python/detail</filename> 外部、<filename class="directory">boost/detail</filename> へ移動した。</para>
      </listitem>
      <listitem>
	<para>その他のバグ修正とコンパイラバグの回避。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>2004 年 9 月 8 日</title>
    <para>
      Python の <type>Bool</type> 型をサポートした。<personname xlink:href="mailto:dholth-at-fastmail.fm">Daniel Holth</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>2003 年 9 月 11 日</title>
    <itemizedlist>
      <listitem>
	<para>同じ型に対して複数の to-python 変換器を登録したときに出るエラーを警告に変えた。Boost.Python はメッセージ内に不愉快な型を報告するようになった。</para>
      </listitem>
      <listitem>
	<para>組み込みの <type>std::wstring</type> 変換を追加した。</para>
      </listitem>
      <listitem>
	<para><exceptionname>std::out_of_range</exceptionname> から Python の <exceptionname>IndexError</exceptionname> 例外への変換を追加した。<personname xlink:href="mailto:RaoulGough-at-yahoo.co.uk">Raoul Gough</personname>に感謝する。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>2003 年 9 月 9 日</title>
    <para>
      <classname linkend="v2.str.str-spec">str</classname> に文字の範囲をとる新しいコンストラクタを追加し、ヌル（<literal>'\0'</literal>）文字を含む文字列を受け付けるようになった。
    </para>
  </section>

  <section>
    <title>2003 年 9 月 8 日</title>
    <para>
      （<methodname>operator()</methodname> を持つ）関数オブジェクトからメソッドを作成する機能を追加した。詳細は <function linkend="v2.make_function.make_function-spec">make_function</function> のドキュメントを見よ。
    </para>
  </section>

  <section>
    <title>2003 年 8 月 10 日</title>
    <para>
      <personname xlink:href="mailto:romany-at-actimize.com">Roman Yakovenko</personname> による新しい <package>properties</package> 単体テストを追加し、彼の依頼で <methodname>add_static_property</methodname> のドキュメントを追加した。
    </para>
  </section>

  <section>
    <title>2003 年 8 月 1 日</title>
    <para>
      <personname xlink:href="mailto:nickm-at-sitius.com">Nikolay Mladenov</personname> による新しい <classname>arg</classname> クラスを追加した。このクラスは、途中の引数を省略して呼び出せる関数をラップする機能を提供する。
    </para>
    <programlisting language="C++">void f(int x = 0, double y = 3.14, std::string z = std::string("foo"));

BOOST_PYTHON_MODULE(test)
{
   def("f", f
       , (arg("x", 0), arg("y", 3.14), arg("z", "foo")));
}</programlisting>
    <para>
      Python 側は次のようにできる。
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>import test</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f(0, z = "bar")</userinput>
<prompt>&gt;&gt;&gt; </prompt><userinput>f(z = "bar", y = 0.0)</userinput></screen>
    <para>
      <personname>Nikolay</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>2003 年 7 月 22 日</title>
    <para>
      恐怖のエラー「<foreignphrase xml:lang="en">bad argument type for builtin operation</foreignphrase>」が出ないようにした。引数エラーで実際の型と想定していた型を表示するようになった。
    </para>
  </section>

  <section>
    <title>2003 年 7 月 19 日</title>
    <para>
      <personname xlink:href="mailto:nickm-at-sitius.com">Nikolay Mladenov</personname> による新しい <classname>return_arg</classname> ポリシーを追加した。<personname>Nikolay</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>2003 年 3 月 18 日</title>
    <itemizedlist>
      <listitem>
	<para><personname xlink:href="mailto:Gottfried.Ganssauge-at-haufe.de">Gottfried Ganßauge</personname> が<link linkend="v2.opaque">不透明ポインタのサポート</link>を提供してくれた。</para>
      </listitem>
      <listitem>
	<para><personname xlink:href="mailto:nicodemus-at-globalite.com.br">Bruno da Silva de Oliveira</personname> が素晴らしい <link xlink:href="http://www.boost.org/libs/python/pyste/">Pyste</link>（「<foreignphrase xml:lang="en">Pie-steh</foreignphrase>」と発音する）パッケージを提供してくれた。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>2003 年 2 月 24 日</title>
    <para>
      <classname>boost::shared_ptr</classname> のサポート強化が完了した。C++ クラス <classname>X</classname> をラップしたオブジェクトが、ラップの方法に関わらず自動的に <classname>shared_ptr&lt;X&gt;</classname> に変換可能になった。<classname>shared_ptr</classname> は <classname>X</classname> オブジェクトだけではなく <classname>X</classname> を与える Python オブジェクトの寿命を管理し、また逆に <classname>shared_ptr</classname> を Python に変換するときは元の Python オブジェクトを返す。
    </para>
  </section>

  <section>
    <title>2003 年 1 月 19 日</title>
    <para>
      <personname xlink:href="mailto:nickm-at-sitius.com">Nikolay Mladenov</personname> による <methodname>staticmethod</methodname> サポートを統合した。<personname>Nikolay</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>2002 年 12 月 29 日</title>
    <para>
      <personname>Brett Calcott</personname> による <application class="software">Visual Studio</application> のプロジェクトファイルと説明を追加した。<personname>Brett</personname> に感謝する。
    </para>
  </section>

  <section>
    <title>2002 年 12 月 20 日</title>
    <para>
      Python への変換において、多態的なクラス型へのポインタ、参照、スマートポインタの自動的なダウンキャストを追加した。
    </para>
  </section>

  <section>
    <title>2002 年 12 月 18 日</title>
    <para>
      各拡張モジュールの各クラスについて個別の変換器を登録する代わりに、共有ライブラリに変換ロジックを配置することにより、from_python 変換を最適化した。
    </para>
  </section>

  <section>
    <title>2002 年 12 月 13 日</title>
    <itemizedlist>
      <listitem>
	<para><classname linkend="v2.enum.enum_-spec">enum_</classname> 値の <classname linkend="v2.scope.scope-spec">scope</classname> 内へのエクスポートが可能になった。</para>
      </listitem>
      <listitem>
	<para><type>signed long</type> の範囲外の数値を正しく扱うよう、符号無し整数の変換を修正した。</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>2002 年 11 月 19 日</title>
    <para>
      基底クラスメンバ関数ポインタを <methodname linkend="v2.class.class_-spec-modifiers">add_property</methodname> の引数として使用するときにキャストを不要にした。
    </para>
  </section>

  <section>
    <title>2002 年 11 月 14 日</title>
    <para>
      <function linkend="v2.data_members.make_getter-spec">make_getter</function> でラップしたクラスデータメンバの自動検出。
    </para>
  </section>

  <section>
    <title>2002 年 11 月 13 日</title>
    <para>
      <classname>std::auto_ptr&lt;&gt;</classname> の完全なサポートを追加した。
    </para>
  </section>

  <section>
    <title>2002 年 10 月</title>
    <para>
      チュートリアルドキュメントの更新と改良。
    </para>
  </section>

  <section>
    <title>2002 年 10 月 10 日</title>
    <para>
      Boost.Python バージョン 2 をリリース！
    </para>
  </section>
</section>
