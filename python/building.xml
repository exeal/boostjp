<?xml version="1.0" ?>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="building">
  <info>
    <title>ビルドとテスト</title>
    <authorgroup>
      <author>
	<personname>
	  <surname>Abrahams</surname>
	  <firstname>David</firstname>
	</personname>
      </author>
    </authorgroup>
    <copyright>
      <year>2002 - 2015</year>
      <holder>Dave Abrahams</holder>
      <holder>Stefan Seefeld</holder>
    </copyright>
  </info>
  <!--
      Copyright David Abrahams 2006. Distributed under the Boost
      Software License, Version 1.0. (See accompanying
      file LICENSE_1_0.txt or copy at
      http://www.boost.org/LICENSE_1_0.txt)
  -->

  <section xml:id="building.requirements">
    <title>必要事項</title>
    <para>
      Boost.Python は Python の<link xlink:href="http://www.python.org/2.2">バージョン 2.2</link>
      <footnote>
	<para>
	  Boost.Python の以前のバージョンと Python 2.2 の組み合わせでテストを行っており互換性を損なうようなことはしていないと<emphasis>考えて</emphasis>いる。しかしながら Boost.Python の最新版では Python の 2.4 より前のバージョンに対してテストを行っていない可能性があり、Python 2.2 および 2.3 をサポートしているとは 100% 言い切れない。
	</para>
      </footnote>
      か<link xlink:href="http://www.python.jp/">それ以降</link>を要求する。
    </para>
  </section>

  <section xml:id="building.background">
    <title>背景</title>
    <para>
      C++ と Python を組み合わせるための基本的なモデルは 2 つある。
    </para>
    <itemizedlist>
      <listitem>
	<para>
	  <link xlink:href="http://www.python.org/doc/current/ext/intro.html">拡張</link>。エンドユーザは Python のインタープリタ（実行可能ファイル）を起動し、C++ で書かれた Python の「拡張モジュール」をインポートする。ライブラリを C++ で書き Python のインターフェイスを与えることで、Python のプログラマが使用できるようにするという考え。Python からはこれらのライブラリは通常の Python モジュールと同じにしか見えない。
	</para>
      </listitem>
      <listitem>
	<para>
	  <link xlink:href="http://www.python.org/doc/current/ext/embedding.html">組み込み</link>。エンドユーザは、Python をライブラリのサブルーチンとして呼び出す C++ で書かれたプログラムを起動する。既存のアプリケーションにスクリプト機能を追加するという考え。
	</para>
      </listitem>
    </itemizedlist>
    <para>
      拡張と組み込みの重要な違いは C++ の <function>main()</function> 関数の場所である（それぞれ Python のインタープリタと他のプログラムである）。Python を他のプログラムへ組み込む場合であっても、<link xlink:href="http://docs.python.jp/2/extending/embedding.html#extending-with-embedding">拡張モジュールは C/C++ から Python のコードへアクセス可能にする最も優れた方法</link>であり、拡張モジュールの使用が両方のモデルの核心であることに注意していただきたい。
    </para>
    <para>
      わずかな例外を除いて、拡張モジュールは単一のエントリポイントを持ち動的に読み込まれるライブラリとしてビルドする。つまり変更時に他の拡張モジュールや <function>main()</function> を持つ実行可能ファイルを再ビルドする必要がない。
    </para>
  </section>

  <section xml:id="building.no-install-quickstart">
    <title>インストールなしのクイックスタート</title>
    <para>
      Boost.Python を使い始めるのに「Boost をインストール」する必要はない。この説明では、バイナリを必要に応じてビルドする <link xlink:href="http://www.boost.org/build">Boost.Build</link> プロジェクトを利用する。最初のテストは Boost.Python のビルドより少し長くかかるかもしれないが、この方法であれば特定のコンパイラ設定に対してどのライブラリバイナリを使用すべきかといった厄介ごとに悩むことなく、正しいコンパイラオプションをあなた自身が理解できることだろう。
    </para>
    <note>
      <para>
	他のビルドシステムを使用して Boost.Python やその拡張をビルドすることは当然可能であるが、Boost では公式にはサポートしない。<emphasis>「Boost.Python がビルドできないよ」問題の 99% 以上は、</emphasis>以下の説明を無視して<emphasis>他のビルドシステムを使用したことが原因である。</emphasis>
      </para>
      <para>
	それでも他のビルドシステムを使用したい場合は、以下の説明に従って <command>bjam</command> にオプション <option>-a -o<replaceable>filename</replaceable></option> を付けて起動し実行するビルドコマンドをファイルにダンプすれば、あなたのビルドシステムで必要なことが分かる。
      </para>
    </note>

    <section xml:id="building.no_install_quickstart.basic_procedure">
      <title>基本的な手順</title>
      <orderedlist>
	<listitem>
	  <para>
	    Boost を入手する。Boost <link xlink:href="http://www.boost.org/more/getting_started/">導入ガイド</link>の第 1 節、第 2 節を見よ。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>bjam</command> ビルドドライバを入手する。Boost <link xlink:href="http://www.boost.org/more/getting_started/">導入ガイド</link>の第 5 節を見よ。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Boost をインストールした <filename class="directory">example/quickstart/</filename> ディレクトリに <command>cd</command> で移動する。小さなプロジェクト例がある。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <command>bjam</command> を起動する。すべてのテストターゲットをビルドするため、<link xlink:href="http://www.boost.org/more/getting_started/">導入ガイド</link>第 5 節の起動例にある「<option>stage</option>」引数を「<option>test</option>」に置き換える。またテストが生成した出力を見るため、引数に「<option>--verbose-test</option>」を追加する。
	  </para>
	  <para>
	    Windows の場合、<command>bjam</command> の起動は以下のようになる。
	  </para>
	  <screen><prompt>C:\\…\quickstart&gt; </prompt><userinput>bjam toolset=msvc --verbose-test test</userinput></screen>
	  <para>
	    Unix 系の場合はおそらく、
	  </para>
	  <screen><prompt>…/quickstart$ </prompt><userinput>bjam toolset=gcc --verbose-test test</userinput></screen>
	</listitem>
      </orderedlist>
      <note>
	<para>
	  簡単のために、このガイドの残りの部分ではパス名に Windows ユーザになじみのあるバックスラッシュではなく、Unix スタイルのスラッシュを使用する。スラッシュは<link xlink:href="http://www.boost.org/more/getting_started/windows.html#command-prompt">コマンドプロンプト</link>ウィンドウ以外のあらゆる場所で機能するはずである（コマンドプロンプトだけはバックスラッシュを使用しなければならない）。
	</para>
      </note>
      <para>
	ここまでの手順がうまくいったら、<package>extending</package> という名前の拡張モジュールのビルドが終わり、<filename>test_extending.py</filename> という Python スクリプトが走ってテストも完了しているはずである。また、Python を組み込む <command>embedding</command> という簡単なアプリケーションもビルド、起動する。
      </para>
    </section>

    <section xml:id="building.no_install_quickstart.in_case_of_trouble">
      <title>問題が起きた場合</title>
      <para>
	コンパイラやリンカのエラーメッセージが大量に表示された場合、Boost.Build が Python のインストール情報を見つけられていない可能性が高い。<command>bjam</command> を起動する最初の数回、<option>--debug-configuration</option> オプションを <command>bjam</command> に渡して Boost.Build が Python のインストール情報をすべて正しく見つけられているか確認することだ。失敗している場合は、以下の <link linkend="building.configuring-boost-build">Boost.Build を設定する</link>の節を試すとよい。
      </para>
      <para>
	それでもなお問題が解決しない場合は、以下のメーリングリストに手助けしてくれる人がいるかもしれない。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Boost.Build に関する話題は <link xlink:href="http://www.boost.org/more/mailing_lists.htm#jamboost">Boost.Build のメーリングリスト</link>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Boost.Python に固有の話題は Python の <link xlink:href="http://www.boost.org/more/mailing_lists.htm#cplussig">C++ Sig</link>
	  </para>
	</listitem>
      </itemizedlist>
    </section>

    <section xml:id="building.no_install_quickstart.in_case_everything_seemed_to_wor">
      <title>すべて問題無い場合</title>
      <para>
	おめでとう！ Boost.Python に慣れていなければ、この時点でしばらくビルドに関することを忘れ、<link linkend="tutorial">チュートリアル</link>や<link linkend="reference">リファレンス</link>を通じてライブラリの学習に集中するとよいかもしれない。quickstart プロジェクトに変更を加えて、API について学んだことを十分に試してみるのもよい。
      </para>
    </section>

    <section xml:id="building.no_install_quickstart.modifying_the_example_project">
      <title>サンプルプロジェクトを変更する</title>
      <para>
	拡張モジュールを（Boost ディストリビューション内の 1 つのソースファイルである）<filename>extending.cpp</filename> 内に限定し、これを <package>extending</package> としてインポートすることに満足しているのであれば、ここでやめてしまってもよい。しかしながら少しぐらいは変更したいと思うことだろう。<link xlink:href="http://www.boost.org/build">Boost.Build</link> について詳しく学ぶことなく先に進む方法はある。
	<!-- http://www.boost.org/doc/libs/python/example/quickstart/extending.cpp -->
      </para>
      <para>
	今ビルドしたプロジェクトは現在のディレクトリにある 2 つのファイルで規定されている。<filename>boost-build.jam</filename> は Boost ビルドシステムのコードの場所を <command>bjam</command> に指定する。<filename>Jamroot</filename> はビルドしたターゲットを記述する。これらのファイルにはコメントを大量に書いてあるので、変更は容易なはずである。ただし空白の保持には注意していただきたい。<code language="bjam">;</code> のような区切り文字は前後に空白がなければ <command>bjam</command> は認識しない。
	<!-- http://www.boost.org/doc/libs/python/example/quickstart/boost-build.jam -->
	<!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
      </para>

      <section xml:id="building.no_install_quickstart.modifying_the_example_project.relocate_the_project">
	<title>プロジェクトの場所を変更する</title>
	<para>
	  Boost ディストリビューションに変更が生じないよう、このプロジェクトをどこか他の場所にコピーしたいと思うことだろう。単純に次のようにする。
	</para>
	<orderedlist>
	  <listitem>
	    <para>
	      <filename class="directory">example/quickstart/</filename> ディレクトリ全体を新しいディレクトリにコピーする。
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <filename>boost-build.jam</filename> および <filename>Jamroot</filename> の新コピーにおいて、ファイルの先頭付近で相対パスを探し（コメントで分かりやすくマークしてある）、ファイルが <filename class="directory">example/quickstart</filename> ディレクトリ内の元の場所にあったときと同様に Boost ディストリビューションを指すように編集する。
	      <!-- http://www.boost.org/doc/libs/python/example/quickstart/boost-build.jam -->
	      <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	    </para>
	  </listitem>
	</orderedlist>
	<para>
	  例えばプロジェクトを <filename class="directory">/home/dave/boost_1_34_0/libs/python/example/quickstart</filename> から <filename class="directory">/home/dave/my-project</filename> へ移動したとすると、<filename>boost-build.jam</filename> の最初のパスは
	  <!-- http://www.boost.org/doc/libs/python/example/quickstart/boost-build.jam -->
	</para>
	<literallayout>../../../../tools/build/src</literallayout>
	<para>
	  次のように変更する。
	</para>
	<literallayout>/home/dave/boost_1_34_0/tools/build/src</literallayout>
	<para>
	  また <filename>Jamroot</filename> の最初のパスは
	  <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	</para>
	<literallayout>../../../..</literallayout>
	<para>
	  次のように変更する。
	</para>
	<literallayout>/home/dave/boost_1_34_0</literallayout>
      </section>

      <section xml:id="building.no_install_quickstart.modifying_the_example_project.add_new_or_change_names_of_exist">
	<title>新しいソースファイルを追加するか既存ファイルの名前を変更する</title>
	<para>
	  拡張モジュールや組み込みアプリケーションのビルドに必要なファイルの名前は、<filename>Jamroot</filename> 内にそれぞれ <filename>extending.cpp</filename> 、<filename>embedding.cpp</filename> の右に並べて書く。各ファイル名の前後に空白を入れるのを忘れてはならない。
	  <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	</para>
	<programlisting language="bjam">… file1.cpp file2.cpp file3.cpp …</programlisting>
	<para>
	  当然ながら、ソースファイルの名前を変更したければ <filename>Jamroot</filename> 内の名前を編集して Boost.Build に通知する。
	  <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	</para>
      </section>

      <section xml:id="building.no_install_quickstart.modifying_the_example_project.change_the_name_of_your_extensio">
	<title>拡張モジュールの名前を変更する</title>
	<para>
	  拡張モジュールの名前は以下の 2 つで決まる。
	</para>
	<orderedlist>
	  <listitem>
	    <para>
	      <filename>Jamroot</filename> 内の <code language="bjam">python-extension</code> 直後の名前
	      <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	    </para>
	  </listitem>
	  <listitem>
	    <para>
	      <filename>extending.cpp</filename> 内で <symbol>BOOST_PYTHON_MODULE</symbol> に渡した名前
	      <!-- http://www.boost.org/doc/libs/python/example/quickstart/extending.cpp -->
	    </para>
	  </listitem>
	</orderedlist>
	<para>
	  拡張モジュールの名前を <package>extending</package> から <package>hello</package> に変更するには、<filename>Jamroot</filename> を編集して次の行を
	  <!-- http://www.boost.org/doc/libs/python/example/quickstart/Jamroot -->
	</para>
	<programlisting language="bjam">python-extension extending : extending.cpp ;</programlisting>
	<para>
	  以下のように変更する。
	</para>
	<programlisting language="bjam">python-extension hello : extending.cpp ;</programlisting>
	<para>
	  また <filename>extending.cpp</filename> を編集して次の行を
	</para>
	<programlisting language="bjam">BOOST_PYTHON_MODULE(extending)</programlisting>
	<para>
	  以下のように変更する。
	</para>
	<programlisting language="bjam">BOOST_PYTHON_MODULE(hello)</programlisting>
      </section>
    </section>
  </section>

  <section xml:id="building.installing-boost-python-on-your-system">
    <title>システムに Boost.Python をインストールする</title>
    <para>
      Boost.Python は（ヘッダオンリーライブラリとは逆に）個別にコンパイルが必要なライブラリであるため、ユーザは Boost.Python ライブラリバイナリのサービスに依存する。
      <!-- http://www.boost.org/more/getting_started/windows.html#header-only-libraries -->
    </para>
    <para>
      Boost.Python ライブラリのバイナリを普通にインストールする必要がある場合、Boost の<link xlink:href="http://www.boost.org/more/getting_started/index.html">導入ガイド</link>を見ればその作成手順が一通り分かるだろう。ソースからバイナリをビルドする場合、Boost の全バイナリではなく Boost.Python のバイナリだけがビルドされるよう、<command>bjam</command> に <option>--with-python</option> 引数を（あるいは <filename>configure</filename> に <option>--with-libraries=python</option> 引数を）渡すとよい。
    </para>
  </section>

  <section xml:id="building.configuring-boost-build">
    <title>Boost.Build を設定する</title>
    <para>
      <link xlink:href="http://www.boost.org/build/doc/html/bbv2/overview/configuration.html">Boost.Build のリファレンスマニュアル</link>にあるとおり、ビルドシステムで利用可能なツールとライブラリの指定はホームディレクトリの <filename>user-config.jam</filename> で行う。<filename>user-config.jam</filename> を作成・編集して Python の起動、ヘッダのインクルード、ライブラリのリンクについての方法を Boost.Build に指定する必要があるかもしれない。
    </para>
    <note>
      <title>Unix 系 OS のユーザ</title>
      <para>
	Unix 系 OS を使用しており Boost の <filename>configure</filename> スクリプトを走らせた場合、<filename>user-config.jam</filename> が生成されている可能性がある。
	<footnote>
	  <para>
	    <command>configure</command> はホームディレクトリにある既存の <filename>user-config.jam</filename> について、（あれば）バックアップを作成した後で上書きする。
	  </para>
	</footnote>
	<command>configure</command>/<command>make</command> シーケンスが成功して Boost.Python のバイナリがビルドされていれば、<filename>user-config.jam</filename> はおそらく既に正しい状態になっている。
      </para>
    </note>
    <para>
      Python を「標準的な」形でインストールしたのであれば、特に行うことはない。<filename>user-config.jam</filename> で python を設定していない（かつ Boost.Build コマンドラインで <option>--without-python</option> を指定していない）のであれば、Boost.Build は自動的に以下と等価なことを行い、最も適切な場所から Python を自動的に探し出す。
    </para>
    <programlisting language="bjam">import toolset : using ;
using python ;</programlisting>
    <para>
      ただしこれが行われるのは Boost.Python のプロジェクトファイルを使用した場合だけである（例えば <package>quickstart</package> の方法のように別のプロジェクトから参照される場合）。個別にコンパイルした Boost.Python バイナリにリンクする場合は、上に挙げた最小限のおまじないで <filename>user-config.jam</filename> をセットアップしなければならない。
      <!-- building.no-install-quickstart -->
    </para>

    <section xml:id="building.configuring_boost_build.python_configuration_parameters">
      <title>Python の設定引数</title>
      <para>
	Python を複数バージョンインストールしている場合や Python を通常でない方法でインストールした場合は、以下の省略可能な引数のいずれか、またはすべてを <code language="bjam">using python</code> に与えなければならない可能性がある。
      </para>
      <variablelist>
	<varlistentry>
	  <term>version</term>
	  <listitem>
	    <para>
	      使用する Python のバージョン。（メジャー）.（マイナー）の形式でなければらない（例：<code language="bjam">2.3</code>）。サブマイナーバージョンは含めてはならない（<code language="bjam">2.5.1</code> は<emphasis>不可</emphasis>）。複数のバージョンの Python をインストールした場合、大抵は version が省略不可能な唯一の引数となる。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>cmd-or-prefix</term>
	  <listitem>
	    <para>
	      Python インタープリタを起動するコマンド。または Python のライブラリやヘッダファイルのインストール接頭辞。このパラメータの使用は、適切な Python 実行可能ファイルがない場合に限定すること。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>includes</term>
	  <listitem>
	    <para>
	      Python ヘッダの <code language="C++">#include</code> パス。通常、<option>version</option> と <option>cmd-or-prefix</option> から適切なパスが推測される。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>libraries</term>
	  <listitem>
	    <para>
	      Python ライブラリのバイナリへのパス。MacOS/Darwin では Python フレームワークのパスを渡してもよい。通常、<option>version</option> と <option>cmd-or-prefix</option> から適切なパスが推測される。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>condition</term>
	  <listitem>
	    <para>
	      指定する場合は、Boost.Build が使用する Python の設定を選択するときのビルド設定にマッチした Boost.Build パラメータの集合でなければならない。詳細は以下の例を見よ。
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term>extension-suffix</term>
	  <listitem>
	    <para>
	      拡張モジュール名の真のファイル拡張子の前に追加する文字列。ほとんどの場合、この引数を使用する必要はない。大抵の場合、この接尾辞を使用するのは Windows において Python のデバッグビルドをターゲットにする場合だけであり、<code language="bjam" linkend="building.python_debugging_builds">&lt;python-debugging&gt;</code> 機能の値に基づいて自動的に設定される。しかしながら少なくとも 1 つの Linux のディストリビューション（Ubuntu Feisty Fawn）では <link xlink:href="https://wiki.ubuntu.com/PyDbgBuilds">python-dbg</link> は特殊な設定がなされており、この種の接頭辞を使用しなければならない。
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </section>

    <section xml:id="building.configuring_boost_build.examples">
      <title>例</title>
      <para>
	以下の例では大文字小文字の区別や、<emphasis>特に空白</emphasis>が重要である。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Python 2.5 と Python 2.4 の両方をインストールしている場合、<filename>user-config.jam</filename> を次のようにしておく。
	  </para>
	  <programlisting language="bjam">using python : 2.5 ;  # 両方のバージョンの Python を有効にする

using python : 2.4 ;  # python 2.4 でビルドする場合は、python=2.4 を
                      # コマンドラインに追加する。</programlisting>
	  <para>
	    最初のバージョン設定（2.5）が既定となる。Python 2.4 についてビルドする場合は <command>bjam</command> コマンドラインに <option>python=2.4</option> を追加する。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Python を通常でない場所にインストールしている場合、<option>cmd-or-prefix</option> 引数にインタープリタへのパスを与えるとよい。
	  </para>
	  <programlisting language="bjam">using python : : /usr/local/python-2.6-beta/bin/python ;</programlisting>
	</listitem>
	<listitem>
	  <para>
	    特定のツールセットに対して個別の Python ビルドを置いている場合、<option>condition</option> 引数にそのツールセットを与えるとよい。
	  </para>
	  <programlisting language="bjam">using python ;  # 通常のツールセットで使用

# Intel C++ ツールセットで使用
using python
     : # version
     : c:\\Devel\\Python-2.5-IntelBuild\\PCBuild\\python # cmd-or-prefix
     : # includes
     : # libraries
     : &lt;toolset&gt;intel # condition
     ;</programlisting>
	</listitem>
	<listitem>
	  <para>
	    Python のソースをダウンロードし、Windows 上でソースから通常版と「<link linkend="building.python-debugging-builds">Python デバッグ</link>」ビルド版の両方をビルドした場合、次のようにするとよい。
	  </para>
	  <programlisting language="bjam">using python : 2.5 : C:\\src\\Python-2.5\\PCBuild\\python ;
using python : 2.5 : C:\\src\\Python-2.5\\PCBuild\\python_d
  : # includes
  : # libs
  : &lt;python-debugging&gt;on ;</programlisting>
	</listitem>
	<listitem>
	  <para>
	    Windows でビルドした bjam では、Windows と <link xlink:href="http://cygwin.com/">Cygwin</link> の両方の Python 拡張をビルド・テストできるよう <filename>user-config.jam</filename> をセットアップできる。Cygwin の Python インストールに対して <option>condition</option> 引数に <code language="bjam">&lt;target-os&gt;cygwin</code> を渡すだけでよい。
	  </para>
	  <programlisting language="bjam"># Windows の場合
using python ;

# Cygwin の場合
using python : : c:\\cygwin\\bin\\python2.5 : : : &lt;target-os&gt;cygwin ;</programlisting>
	  <para>
	    ビルドリクエストに <option>target-os=cygwin</option> と書くと、Cygwin 版の Python でビルドが行われる。
	    <footnote>
	      <para>
		<code language="bjam">&lt;target-os&gt;cygwin</code> 機能は <command>gcc</command> ツール群の <code language="bjam">&lt;flavor&gt;cygwin</code> サブ機能とは別物であることに注意していただきたい。MinGW GCC もインストールしている場合は、両者を明示的に扱わなければならない。
	      </para>
	    </footnote>
	    <!-- boostorg.github.io 版だとこの footnote が消えてる -->
	  </para>
	  <screen><userinput>bjam target-os=cygwin toolset=gcc</userinput></screen>
	  <para>
	    他の方法でも同様に動作すると思う（Windows 版の Python をターゲットにして <link xlink:href="http://cygwin.com/">Cygwin</link> 版の bjam を使用する場合）が、本稿執筆時点ではそのような組み合わせのビルドに対する Boost.Build ツールセットのサポートにはバグがあるようだ。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <link xlink:href="http://zigzag.cs.msu.su/boost.build/wiki/AlternativeSelection">Boost.Build がターゲットを選択する方法</link>が原因で、ビルドリクエストは完全に明確にしなければならないということに注意していただきたい。例えば、次のようであるとすると、
	  </para>
	  <programlisting language="bjam">using python : 2.5 ; # 通常の Windows ビルドの場合
using python : 2.4 : : : : &lt;target-os&gt;cygwin ;</programlisting>
	  <para>
	    以下の方法でビルドするとエラーになる。
	  </para>
	  <screen><userinput>bjam target-os=cygwin</userinput></screen>
	  <para>
	    代わりに、こう書く必要がある。
	  </para>
	  <screen><userinput>bjam target-os=cygwin/python=2.4</userinput></screen>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="building.choosing_a_boost_python_library_">
    <title>Boost.Python ライブラリのバイナリを選択する</title>
    <para>
      （Boost.Build に自動的に正しいライブラリを構築、リンクさせる代わりに）ビルド済みの Boost.Python ライブラリを使用する場合、どれをリンクするか考える必要がある。Boost.Python バイナリには動的版と静的版がある。アプリケーションに応じて注意して選択しなければならない。
      <footnote>
	<para>
	  Boost.Python の静的ビルドと動的ビルドを区別する方法：
	</para>
	<itemizedlist>
	  <listitem>
	    <para xlink:href="http://www.boost.org/more/getting_started/windows.html#library-naming">Windows の場合</para>
	  </listitem>
	  <listitem>
	    <para xlink:href="http://www.boost.org/more/getting_started/unix-variants.html#library-naming">Unix 系の場合</para>
	  </listitem>
	</itemizedlist>
      </footnote>
    </para>

    <section xml:id="building.choosing_a_boost_python_library_.the_dynamic_binary">
      <title>動的バイナリ</title>
      <para>
	動的ライブラリは最も安全で最も汎用性の高い選択である。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    与えられたツールセットでビルドしたすべての拡張モジュールが、ライブラリコードの単一のコピーを使用する。
	    <footnote>
	      <para>
		ほとんどの Unix/Linux 系プラットフォームでは動的に読み込んだオブジェクトを共有するため、異なるコンパイラツールセットでビルドした拡張モジュールを同一の Python インスタンスに読み込んだとき常に異なる Boost.Python ライブラリのコピーを使用するか定かではない。それらのコンパイラが互換性のある ABI を有しているのであれば、2 つのライブラリでビルドした拡張モジュールは相互運用可能なので、別のライブラリを使用しないほうが望ましい。そうでなければ拡張モジュールと Boost.Python はクラスレイアウト等が異なるため、大惨事となるかもしれない。何が起こるか確認する実験を行ってくれる人がいれば幸いである。
	      </para>
	    </footnote>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    ライブラリには型変換レジストリが含まれる。すべての拡張モジュールが単一のレジストリを共有するので、ある動的に読み込んだ拡張モジュールで Python へエクスポートしたクラスのインスタンスを、別のモジュールでエクスポートした関数へ渡すことができる。
	  </para>
	</listitem>
      </itemizedlist>
    </section>

    <section xml:id="building.choosing_a_boost_python_library_.the_static_binary">
      <title>静的バイナリ</title>
      <para>
	以下のいずれかの場合は Boost.Python の静的ライブラリを使用するのが適切である。
      </para>
      <itemizedlist>
	<listitem>
	  <para>
	    Python を<link xlink:href="http://docs.python.jp/2/extending/extending.html">拡張</link>していて、動的に読み込んだ拡張モジュールで他の Boost.Python 拡張モジュールから使用する必要のない型をエクスポートしており、かつそれらの間でコアライブラリコードが複製されても問題ない場合。
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Python をアプリケーションに<link xlink:href="http://docs.python.jp/2/extending/embedding.html">組み込んで</link>おり、かつ以下のいずれかの場合。
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>
		MacOS か AIX 以外の Unix 系 OS をターゲットにしていて、動的に読み込んだ拡張モジュールから実行可能ファイルの一部である Boost.Python ライブラリシンボルが「見える」場合。
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		またはアプリケーションに何らかの Boost.Python 拡張モジュールを静的にリンクしており、かつ動的に読み込んだ Boost.Python 拡張モジュールが静的にリンクした拡張モジュールでエクスポートした型を使用可能でも問題ない場合（あるいはその逆）。
	      </para>
	    </listitem>
	  </itemizedlist>
	</listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="building.include-issues">
    <title><code language="C++">#include</code> に関すること</title>
    <orderedlist>
      <listitem>
	<para>
	  Boost.Python を使用するプログラムの翻訳単位で直接 <code language="C++">#include "python.h"</code> と書きたくなったら、代わりに <code language="C++">#include "boost/python/detail/wrap_python.hpp"</code> を使用せよ。こうすることで Boost.Python を使用するのに必要ないくつかの事柄が適当に処理される（その中の 1 つを次節で見る）。
	</para>
      </listitem>
      <listitem>
	<para>
	  <filename class="headerfile">wrap_python.hpp</filename> の前にシステムヘッダをインクルードしないよう注意せよ。この制限は実際には Python によるものであり、より正確には Python とオペレーティングシステムの相互作用によるものである。詳細は <link xlink:href="http://docs.python.org/ext/simpleExample.html">http://docs.python.org/ext/simpleExample.html</link>
	  <footnote>
	    <para>
	      訳注　日本語訳は <link xlink:href="http://docs.python.jp/2/extending/extending.html#extending-simpleexample">http://docs.python.jp/2/extending/extending.html#extending-simpleexample</link>（Python 2.x の場合）。
	    </para>
	  </footnote>
	  を見よ。
	</para>
      </listitem>
    </orderedlist>
  </section>

  <section xml:id="building.python-debugging-builds">
    <title>Python のデバッグビルド</title>
    <para>
      Python は特殊な「python debugging」設定でビルドすることで、拡張モジュールの開発者にとって非常に有用なチェックとインストゥルメント（<foreignphrase xml:lang="en">instrumentation</foreignphrase>）を追加できる。デバッグ設定が使用するデータ構造は追加のメンバを含んでいるため、<emphasis>python debugging を有効にした Python 実行可能ビルドを、有効にせずにコンパイルしたライブラリや拡張モジュールとともに使用することはできない（その逆も同様である）。</emphasis>
    </para>
    <para>
      Python のビルド済み実行可能の「python debugging」版はほとんどの Python ディストリビューションでは提供されておらず
      <footnote>
	<para>
	  Unix 系列のプラットフォームでは、debugging python と関連ライブラリは Python のビルド設定で <option>--with-pydebug</option> を追加するとビルドされる。Windows では Python のデバッグ版は、Python の完全なソースコードディストリビューションの <filename class="directory">PCBuild</filename> サブディレクトリにある Visual Studio プロジェクトの「Win32 Debug」ターゲットから生成される。
	</para>
      </footnote>
      、それらのビルドをユーザに強制したくないので、<option>debug</option> ビルド（既定）において python debugging を自動的に有効化することはない。代わりに <option>python-debugging</option> という特殊なビルドプロパティを用意しており、これを使用すると適切なプリプロセッサシンボルが定義され正しいライブラリがリンク先として選択される。
    </para>
    <para>
      Unix 系プラットフォームでは、デバッグ版 Python のデータ構造は <symbol>Py_DEBUG</symbol> シンボルを定義したときのみ使用される。多くの Windows コンパイラでは、プリプロセッサシンボル <symbol>_DEBUG</symbol> を付けてビルドすると、Python は既定では Python DLL の特殊デバッグ版へのリンクを強制する。このシンボルは Python の有無とは別にごくありふれたものであるので、Boost.Python は <filename class="headerfile">boost/python/detail/wrap_python.hpp</filename> で <filename class="headerfile">Python.h</filename> をインクルードするときから <symbol>BOOST_DEBUG_PYTHON</symbol> が定義されるまでの間、一時的に <symbol>_DEBUG</symbol> を未定義にする。結論としては「python debugging」が必要で Boost.Build を使用しない場合は、<symbol>BOOST_DEBUG_PYTHON</symbol> が定義されているのを確認することである。そうでなければ python debugging は無効になる。
    </para>
  </section>

  <section xml:id="building.testing_boost_python">
    <title>Boost.Python をテストする</title>
    <para>
      Boost.Build の完全なテストスイートを走らせるには、Boost ディストリビューションの <filename class="directory">test</filename> サブディレクトリで <command>bjam</command> を起動する。
    </para>
  </section>

  <section xml:id="building.notes_for_mingw_and_cygwin_with_">
    <title>MinGW（および Cygwin の -mno-cygwin）の GCC ユーザに対する注意</title>
    <para>
      Python の 2.4.1 より前のバージョンを MinGW の 3.0.0（binutils-2.13.90-20030111-1）より前のバージョンで使用する場合は、MinGW 互換バージョンの Python ライブラリを作成する必要がある（Python に付属のものは Microsoft 互換のリンカでしか動作しない）。『<link xlink:href="http://docs.python.jp/2/install/">Python モジュールのインストール</link>』の「拡張モジュールのビルド: 小技と豆知識」―「Windows で非 Microsoft コンパイラを使ってビルドするには」の節に従い、<filename class="libraryfile">libpython<replaceable>XX</replaceable>.a</filename> を作成する。<replaceable>XX</replaceable> はインストールした Python のメジャーバージョンとマイナーバージョン番号である。
    </para>
  </section>
</chapter>
