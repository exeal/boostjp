<?xml version="1.0" ?>
<!--
  Copyright David Abrahams 2006. Distributed under the Boost
  Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.configuration">
  <title>設定に関する情報</title>

  <section xml:id="v2.configuration.introduction">
    <title>はじめに</title>
    <para>
      Boost.Python は <filename class="headerfile" xlink:href="http://www.boost.org/libs/config/config.htm">&lt;boost/config.hpp&gt;</filename> にある数個の設定マクロのほか、アプリケーションが与える設定マクロを使用する。これらのマクロについて記載する。
    </para>
  </section>

  <section xml:id="v2.configuration.app-defined">
    <title>アプリケーション定義のマクロ</title>
    <para>
      これらは Boost.Python を使用するアプリケーションが定義可能なマクロである。動的ライブラリをカバーするのに C++ 標準の厳密な解釈を拡大するのであれば、異なるライブラリ（拡張モジュールや Boost.Python 自身も含む）をコンパイルするときにこれらのマクロの異なる値を使用することは <glossterm linkend="v2.definitions.ODR">ODR</glossterm> 違反であることに注意していただきたい。しかしながら、この種の違反を検出可能か問題となる C++ 実装は無いようである。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>規定</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_PYTHON_MAX_ARITY</symbol></td>
	  <td>15</td>
	  <td>引数 <code>x1, x2, ...x<replaceable>n</replaceable></code> をとるよう指定した Boost.Python 関数の起動における、ラップする関数、メンバ関数、コンストラクタの最大<glossterm linkend="v2.definitions.arity">引数長</glossterm>。これには特に <code language="C++"><classname linkend="v2.object.object-spec">object</classname>::operator()(...)</code> や <code language="C++"><function linkend="v2.call_method.call_method-spec">call_method</function>&lt;R&gt;(...)</code> のようなコールバック機構も含まれる。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_MAX_BASES</symbol></td>
	  <td>10</td>
	  <td>ラップした C++ クラスの基底型を指定する <classname linkend="v2.class.bases-spec">bases&lt;...&gt;</classname> クラステンプレートのテンプレート引数の最大数。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_STATIC_MODULE</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、モジュール初期化関数がエクスポート対象シンボルとして扱われないようになる（コード内での区別をサポートするプラットフォームの場合）。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_ENABLE_CDECL</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、<code language="C++">__cdecl</code> 呼び出し規約を使用する関数のラップが可能となる。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_ENABLE_STDCALL</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、<code language="C++">__stdcall</code> 呼び出し規約を使用する関数のラップが可能となる。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_ENABLE_FASTCALL</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、<code language="C++">__fastcall</code> 呼び出し規約を使用する関数のラップが可能となる。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>

  <section xml:id="v2.configuration.lib-defined-impl">
    <title>ライブラリ定義の実装マクロ</title>
    <para>
      これらのマクロは Boost.Python が定義するものであり、新しいプラットフォームへ移植する実装者のみが取り扱う実装の詳細である。
    </para>
    <informaltable>
      <thead>
	<tr>
	  <th>マクロ</th>
	  <th>規定</th>
	  <th>意味</th>
	</tr>
      </thead>
      <tbody>
	<tr>
	  <td><symbol>BOOST_PYTHON_TYPE_ID_NAME</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、共有ライブラリ境界をまたいだ <classname>type_info</classname> の比較がこのプラットフォームでは動作しないことを指定する。言い換えると、shared-lib-2 内の <code language="C++">typeid(T)</code> を比較する関数に shared-lib-1 が <code language="C++">typeid(T)</code> を渡すと、比較結果は <literal>false</literal> になるということである。このマクロを定義しておくと、Boost.Python は <classname>std::type_info</classname> オブジェクトの比較を直接使用する代わりに <code language="C++">typeid(T).name()</code> の比較を使用する。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_NO_PY_SIGNATURES</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、モジュール関数のドキュメンテーション文字列に対して Python のシグニチャが生成されなくなり、モジュールが登録した変換器に Python 型が紐付かなくなる。また、モジュールのバイナリサイズが約 14%（gcc でコンパイルした場合）削減する。boost_python 実行時ライブラリで定義すると、<code language="C++">docstring_options.enable_py_signatures()</code> の既定は <literal>false</literal> に設定される。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_SUPPORTS_PY_SIGNATURES</symbol></td>
	  <td><symbol>BOOST_PYTHON_NO_PY_SIGNATURES</symbol> を定義していないと定義される</td>
	  <td>このマクロを定義すると、Python のシグニチャをサポートしない古いバージョンの Boost.Python からのスムースな移行が有効になる。使用例は<link linkend="v2.pytype_function.examples">ここ</link>を見よ。</td>
	</tr>
	<tr>
	  <td><symbol>BOOST_PYTHON_PY_SIGNATURES_PROPER_INIT_SELF_TYPE</symbol></td>
	  <td>（未定義）</td>
	  <td>定義すると、<methodname>__init__</methodname> メソッドの <parameter>self</parameter> 引数の Python 型を適切に生成する。それ以外の場合、<classname>object</classname> を使用する。モジュールのバイナリサイズが約 14%（gcc でコンパイルした場合）増加するため、既定では定義されない。</td>
	</tr>
      </tbody>
    </informaltable>
  </section>
</section>
