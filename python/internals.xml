<?xml version="1.0" ?>
<!--
  Copyright David Abrahams 2006. Distributed under the Boost
  Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
-->
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:lang="ja" version="5.0" xml:id="v2.internals">
  <title>Boost.Python の裏側</title>

  <section>
    <info>
      <copyright>
	<year>2003</year>
	<holder>David Abrahams</holder>
	<holder>Brett Calcott</holder>
      </copyright>
      <legalnotice>
	<remark>
	  See accompanying <link xlink:href="http://www.boost.org/LICENSE_1_0.txt">license</link> for terms of use.
	</remark>
      </legalnotice>
      <title><personname>Brett Calcott</personname> と <personname>David Abrahams</personname> のやりとり</title>
    </info>

    <para>
      （訳注：素の文が <personname>David Abrahams</personname> 、引用文が <personname>Brett Calcott</personname> のメッセージ。以下の 2 問が <personname>Brett</personname> から <personname>David</personname> に投げかけられた。その上で）
      <footnote>
	<para>
	  訳注　元のメッセージは <uri type="webpage" xlink:href="https://mail.python.org/pipermail/cplusplus-sig/2003-July/004480.html">https://mail.python.org/pipermail/cplusplus-sig/2003-July/004480.html</uri>。
	</para>
      </footnote>
      これらのケースではいずれもコードを読んでいくことはできるのだが、アーキテクチャの意図がソースからは構造的にも時間的にも分からなかった（つまりその、私が言いたいのはそれらがどのような順序で行われるかだ）。
    </para>

    <blockquote>
      <orderedlist>
	<listitem>
	  <para>
	    次のようにすると何が起こるか：
	  </para>
	  <programlisting language="C++">struct boring {};
...etc...
class_&lt;boring&gt;("boring")
    ;</programlisting>
	  <para>
	    先を続けさせてもらうと、次のようにいろいろ出てくると思うのだが。
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para>Python は新しい ClassType の登録を必要とする。</para>
	    </listitem>
	    <listitem>
	      <para><classname>boring</classname> 構造体を保持可能な新しい型を構築する必要がある。</para>
	    </listitem>
	    <listitem>
	      <para>この型に対して内向きと外向きの変換器を登録する必要がある。</para>
	    </listitem>
	  </itemizedlist>
	  <para>
	    これらの方法について汎用的な方向性を提示してもらえるだろうか？
	  </para>
	</listitem>
      </orderedlist>
    </blockquote>

    <para>
      時間の関係で確かこうだったぐらいの回答しかできないけど。このメールを読んだあとにデバッガを使ってコードの詳細を調べるのはどうかな（別に忘れちゃったわけじゃないけどね）。
    </para>
    <para>
      <methodname>Boost.Python.class</methodname>（メタ型）を呼び出すと、<classname>Boost.Python.Instance</classname> の新しい（Python の）派生クラスが作成される（<filename>libs/python/src/object/class.cpp</filename> を参照）：
    </para>
    <screen language="Python"><prompt>&gt;&gt;&gt; </prompt><userinput>boring = Boost.Python.class(</userinput>
<prompt>... </prompt><userinput>    'boring'</userinput>
<prompt>... </prompt><userinput>  , bases_tuple       # この場合は単に ()</userinput>
<prompt>... </prompt><userinput>  , { </userinput>
<prompt>... </prompt><userinput>        '__module__' : module_name</userinput>
<prompt>... </prompt><userinput>      , '__doc__' : doc_string # 省略可能</userinput>
<prompt>... </prompt><userinput>    }</userinput>
<prompt>... </prompt><userinput>)</userinput></screen>
    <para>
      このオブジェクトに対するハンドルは <classname>registration</classname> の <varname>m_class_object</varname> フィールドで <code language="C++">typeid(boring)</code> に紐付けされる。（たぶんよろしくないことだけど）拡張モジュールの <classname>boring</classname> 属性を一掃したとしても、レジストリはこのオブジェクトを永久に生存させる。
    </para>
    <para>
      <code language="C++">class_&lt;boring, non_copyable, ...&gt;</code> を指定していないので、<classname>boring</classname> の Python への変換器を登録する。この変換器は Python の <classname>boring</classname> オブジェクトが保持する <varname>value_holder</varname> へその引数をコピーする。
    </para>
    <para>
      <code language="C++">class&lt;boring, ...&gt;(no_init)</code> を指定していないので、<function>__init__</function> 関数オブジェクトをクラスの辞書に追加する。この関数オブジェクトは（ホルダとしてスマートポインタか派生ラッパクラスを指定していないので）Python の <classname>boring</classname> オブジェクトが保持する <varname>value_holder</varname> に <classname>boring</classname> をデフォルトコンストラクトする。
    </para>
    <para>
      <function>register_class_from_python</function> は、<classname>shared_ptr&lt;boring&gt;</classname> に対する Python からの変換器を登録するのに使う。<classname>boost::shared_ptr</classname> はスマートポインタの中でも特殊なものだ。Deleter 引数を使えば、（C++ オブジェクトの保持がどのような形態であれ）その内包する C++ オブジェクトのみならず Python オブジェクト全体をも管理できるからだ。
    </para>
    <para>
      <classname>bases&lt;&gt;</classname> を与えておくと、これら基底クラス群と <classname>boring</classname> 間の継承図（<filename>inheritance.[hpp/cpp]</filename>）における関係も登録する。
    </para>
    <para>
      このコードの以前のバージョンでは、このクラスに対して Python から lvalue への変換器を登録していた。現在はラップされたクラスの Python からの変換は、変換元の Python オブジェクトのメタクラスが Boost.Python のメタクラスである場合、レジストリを調べる前に特殊な場合として処理される。
    </para>
    <para>
      とまぁ、こういった Python からの変換器は、たぶん明示的に変換を登録しない場合の変換器クラスと同様に扱うべきだね。
    </para>

    <blockquote>
      <orderedlist continuation="continues">
	<listitem>
	  <para>
	    レジストリ内に現れるデータ構造について、手短な概要は
	  </para>
	</listitem>
      </orderedlist>
    </blockquote>

    <para>
      レジストリは簡単で、<code language="C++">typeid</code> から <classname>registration</classname> への写像（<filename class="headerfile">boost/python/converter/registrations.hpp</filename> を参照）でしかない。<varname>lvalue_chain</varname> と <varname>rvalue_chain</varname> は単に内部的なリンクリストだ。
    </para>
    <para>
      他に知りたいことがあったら、また聞いてくれ。
    </para>
    <para>
      継承図について知りたいことがあったら、他のメッセージで個別に聞いてくれ。
    </para>

    <blockquote>
      <para>
	同時に C++ から Python およびその逆方向の型変換について処理の概要はどうか。
      </para>
    </blockquote>

    <para>
      難題だね。背景について調べることを勧めるよ。LLNL 進捗レポート内の関連情報と、そこからリンクしているメッセージを探すといい。あとは、
      <footnote>
	<para>
	  訳注　<orgname>Python.org</orgname> の URL は移動してしまいました。<uri type="webpage" xlink:href="https://mail.python.org/pipermail/cplusplus-sig/">https://mail.python.org/pipermail/cplusplus-sig/</uri> 以下が移動先と思われますが、訳者には個々のメッセージの場所が分かりませんでした。
	</para>
      </footnote>
    </para>
    <itemizedlist>
      <listitem>
	<para><uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2002-May/001023.html">http://mail.python.org/pipermail/c++-sig/2002-May/001023.html</uri></para>
      </listitem>
      <listitem>
	<para><uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2002-December/003115.html">http://mail.python.org/pipermail/c++-sig/2002-December/003115.html</uri></para>
      </listitem>
      <listitem>
	<para><uri type="webpage" xlink:href="http://aspn.activestate.com/ASPN/Mail/Message/1280898">http://aspn.activestate.com/ASPN/Mail/Message/1280898</uri></para>
      </listitem>
      <listitem>
	<para><uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2002-July/001755.html">http://mail.python.org/pipermail/c++-sig/2002-July/001755.html</uri></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>C++ から Python への変換：</title>
      <para>
	型と使っている呼び出しポリシーによる。あるいは <function>call&lt;&gt;(...)</function> 、<function>call_method&lt;&gt;(...)</function> 、<methodname>object(...)</methodname> については <function>ref</function> や <function>ptr</function> を使っているかによる。Python への変換は基本的には、「戻り値」の変換（Python から C++ の呼び出し）と「引数」の変換（C++ から Python の呼び出しと明示的な <methodname>object()</methodname> の変換）の 2 つに分けられる。詳細はすぐには思い出せないけど、これら 2 つの振る舞いの違いはとにかくわずかなものだ。上の参考にたぶんその答えがあるし、コードを見たら確実に見つかる。
      </para>
      <para>
	「既定の」場合だと値による（コピー）変換になるので、Python への変換器として <classname>to_python_value</classname> を使う。
      </para>
      <para>
	普通に考えると、ある型を Python へ変換する方法は 1 つしかないはず（スコープ付きのレジストリを使う方法もあるが今は無視しよう）なので、Python への変換は当然テンプレートの特殊化で処理する。この型が組み込みの変換（<filename class="headerfile">builtin_converters.hpp</filename>）で処理するものであれば、相当する <classname>to_python_value</classname> のテンプレート特殊化を使う。
      </para>
      <para>
	上記以外の場合、<classname>to_python_value</classname> は C++ 型に対する registration 内の <varname>m_to_python</varname> 関数を使う。
      </para>
      <para>
	参照による変換のような他の変換はラップしたクラスでのみ有効で、明示的に要求されるのは <function>ref(...)</function> か <function>ptr(...)</function> を使うか異なる CallPolicies を指定（異なる Python への変換器を使う）した場合だ。<classname>registration</classname> を使って参照先の C++ 型に対応する Python クラスを見つける必要があるが、これらの変換器はどこにも登録されない。これらは単に Python の新しいインスタンスを構築し、適当な <type>Holder</type> インスタンスを紐付ける。
      </para>
    </section>

    <section>
      <title>Python から C++ への変換：</title>
      <para>
	もう一度、「戻り値」の変換と「引数」の変換には違いがあることを覚えておこう。そしてその正確な意味は忘れよう。
      </para>
      <para>
	何が起こるかは lvalue の変換が必要かどうかによる（<uri type="webpage" xlink:href="http://mail.python.org/pipermail/c++-sig/2002-May/001023.html">http://mail.python.org/pipermail/c++-sig/2002-May/001023.html</uri> を参照）。rvalue が登録されていれば lvalue は確実に問題ないので、あらゆる lvalue の変換器は型の rvalue の変換チェインにも登録される。
      </para>
      <para>
	rvalue の変換は、ラップした関数の多重定義と与えられた対象の C++ 型に対する複数の変換器をサポートするために 2 ステップ必要とする（まず変換が可能か判断して、次のステップで変換したオブジェクトを構築する）。いっぽう、lvalue の変換は 1 ステップで完了できる（オブジェクトへのポインタを得るだけだ。変換が不可能な場合は NULL の可能性がある）。
      </para>
    </section>
  </section>
</article>
